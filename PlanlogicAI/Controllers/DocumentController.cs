using AutoMapper;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;
using A = DocumentFormat.OpenXml.Drawing;
using DW = DocumentFormat.OpenXml.Drawing.Wordprocessing;
using PIC = DocumentFormat.OpenXml.Drawing.Pictures;
using V = DocumentFormat.OpenXml.Vml;
using W = DocumentFormat.OpenXml.Wordprocessing;
using Wp = DocumentFormat.OpenXml.Drawing.Wordprocessing;
using Wps = DocumentFormat.OpenXml.Office2010.Word.DrawingShape;
using Wp14 = DocumentFormat.OpenXml.Office2010.Word.Drawing;
using A14 = DocumentFormat.OpenXml.Office2010.Drawing;
using System.IO;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using PlanlogicAI.Data;
using PlanlogicAI.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Reflection;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Blob;
using Microsoft.Extensions.Configuration;

namespace PlanlogicAI.Controllers
{
    [Route("/api/documentGenerator")]
    public class DocumentController : Controller
    {
        private readonly IMapper mapper;
        private readonly StrategyOptimizerPrototypeContext context;

        public IConfiguration Configuration { get; }


        public DocumentController(StrategyOptimizerPrototypeContext context,IMapper mapper, IConfiguration configuration)
        {
            this.context = context;
            this.mapper = mapper;
            this.Configuration = configuration;
        }

        [HttpPost]
        public async Task<IActionResult> GenerateDocument([FromBody] DocumentDetails[] documentDetails)
        {
            try
            {
                //string filePath = Environment.CurrentDirectory + @"\\Documents\\" + documentDetails[0].clientDetails.FamilyName.ToString().Trim() + "," + documentDetails[0].clientDetails.ClientName.ToString().Trim() + "-" + documentDetails[0].clientDetails.ClientId.ToString().Trim() + ".docx";
                MemoryStream ms = new MemoryStream();
                string _storageConnection = Configuration.GetConnectionString("StorageConnectionString");
                CloudStorageAccount cloudStorageAccount = CloudStorageAccount.Parse(_storageConnection);
                CloudBlobClient cloudBlobClient = cloudStorageAccount.CreateCloudBlobClient();
                CloudBlobContainer cloudBlobContainer = cloudBlobClient.GetContainerReference("plstorage");

                if (await cloudBlobContainer.CreateIfNotExistsAsync())
                {
                    await cloudBlobContainer.SetPermissionsAsync(new BlobContainerPermissions
                    {
                        PublicAccess = BlobContainerPublicAccessType.Blob
                    });
                }
                string filePath = documentDetails[0].clientDetails.FamilyName.ToString().Trim() + "," + documentDetails[0].clientDetails.ClientName.ToString().Trim() + "-" + documentDetails[0].clientDetails.ClientId.ToString().Trim() + ".docx";

                CloudBlockBlob blockBlob = cloudBlobContainer.GetBlockBlobReference(filePath);
                using (WordprocessingDocument package = WordprocessingDocument.Create(ms, WordprocessingDocumentType.Document))
                {

                    MainDocumentPart mainPart = package.AddMainDocumentPart();
                    mainPart.Document = new Document();
                    Body body = mainPart.Document.AppendChild(new Body());                  

                    SectionProperties sectionProperties1 = new SectionProperties() { RsidRPr = "008818E9", RsidR = "00543A0D" };
                    FooterReference footerReference1 = new FooterReference() { Type = HeaderFooterValues.Default, Id = "rId8" };

                    sectionProperties1.Append(footerReference1);

                    body.Append(sectionProperties1);





                    NumberingDefinitionsPart numberinfPart = mainPart.AddNewPart<NumberingDefinitionsPart>("numbering");
                    Numbering element = new Numbering(new AbstractNum(new Level(new NumberingFormat() { Val = NumberFormatValues.Bullet }, new LevelText() { Val = "â€¢" }, new LevelJustification { Val = LevelJustificationValues.Left }, new ParagraphProperties(new Indentation { Left = "720", Hanging = "360" })) { LevelIndex = 0 }) { AbstractNumberId = 0 }, new NumberingInstance(new AbstractNumId() { Val = 0 }) { NumberID = 1 });
                    element.Save(numberinfPart);


                    foreach (DocumentDetails docDet in documentDetails)
                    {
                       

                        Paragraph WhereAreYouNow = new Paragraph(new Run(new RunProperties(new Color() { Val = "ED7D27" }, new FontSize { Val = "40" }), new Text("Where you are now")));
                        body.Append(WhereAreYouNow);
                        Color orange = new Color() { Val = "ED7D27" };
                        // RunProperties runProp = new RunProperties(new RunFonts { Ascii = "Verdana" }, new FontSize { Val = new StringValue("9") });


                        //Where Are You Now
                        AddBasicDetails(body, docDet.clientDetails, orange);
                        AddIncomeAndExpenses(body, docDet.income, docDet.expenses, docDet.lifestyleAssets, orange);
                        AddInvestmentPortfolio(body, docDet.currentOriginalAssests, docDet.clientDetails, orange);
                        AddLiabilities(body, docDet.liabilities, orange);
                        AddEstatePlanningDetails(body, docDet.clientDetails, orange);


                        Paragraph break2 = new Paragraph(new Run(new Break() { Type = BreakValues.Page }));
                        body.Append(break2);

                        Paragraph pr0 = new Paragraph();
                        add(pr0);
                        body.Append(pr0);

                        GenerateBody(body);
                        Run br1 = new Run(new Break());
                        Paragraph pr1 = new Paragraph();
                        pr1.Append(new OpenXmlElement[] { br1 });
                        body.Append(pr1);

                        AddPara1(body);

                        Paragraph paragraph14 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                        ParagraphProperties paragraphProperties14 = new ParagraphProperties();
                        SuppressAutoHyphens suppressAutoHyphens14 = new SuppressAutoHyphens();
                       
                        SpacingBetweenLines spacingBetweenLines14 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                        Justification justification4 = new Justification() { Val = JustificationValues.Both };

                        ParagraphMarkRunProperties paragraphMarkRunProperties14 = new ParagraphMarkRunProperties();
                        RunFonts runFonts36 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize35 = new FontSize() { Val = "18" };
                        Languages languages33 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        paragraphMarkRunProperties14.Append(runFonts36);
                        paragraphMarkRunProperties14.Append(fontSize35);
                        paragraphMarkRunProperties14.Append(languages33);

                        paragraphProperties14.Append(suppressAutoHyphens14);
                        paragraphProperties14.Append(spacingBetweenLines14);
                        paragraphProperties14.Append(justification4);
                        paragraphProperties14.Append(paragraphMarkRunProperties14);
                        body.AppendChild(paragraph14);

                        AddPara2(body);

                        Paragraph break1 = new Paragraph(new Run(new Break() { Type = BreakValues.Page }));
                        body.Append(break1);
                        //Your Risk Profile
                        Paragraph RiskProfile = new Paragraph(new Run(new RunProperties(new Color() { Val = "ED7D27" }, new FontSize { Val = "40" }), new Text("Your risk profile")));
                        body.Append(RiskProfile);

                        AddRiskProfile(mainPart, body, docDet.clientDetails, orange, docDet.proposedAssets);
                       // body.AppendChild((Paragraph)paragraph14.CloneNode(true));

                        AddInvestmentRecommendation(body, docDet.clientDetails, docDet.proposedAssets , docDet.clientWeights,docDet.partnerWeights,docDet.jointWeights);



                        AddRecommemdedPortfolio(body, docDet.currentOriginalAssests, docDet.proposedAssets, docDet.clientDetails);


                       
                       

                        if (docDet.clientWeights.Length > 0)
                        {
                            AddProposedAllocation(body, docDet.clientWeights, orange, docDet.clientRiskProfile,"C", docDet.proposedAssets, docDet.clientDetails);
                        }

                        Run linebreak = new Run(new Break());
                        Paragraph paragraph = new Paragraph();
                        paragraph.Append(new OpenXmlElement[] { linebreak });
                        body.Append(paragraph);

                        if (docDet.partnerWeights.Length > 0)
                        {
                            AddProposedAllocation(body, docDet.partnerWeights, orange, docDet.partnerRiskProfile, "P", docDet.proposedAssets, docDet.clientDetails);
                        }


                        Run linebreak3 = new Run(new Break());
                        Run linebreak4 = new Run(new Break());
                        Run linebreak5 = new Run(new Break());
                        Paragraph paragraph1 = new Paragraph();
                        paragraph1.Append(new OpenXmlElement[] { linebreak3, linebreak4, linebreak5 });
                        body.Append(paragraph1);

                        if (docDet.jointWeights.Length > 0)
                        {
                            AddProposedAllocation(body, docDet.jointWeights, orange, docDet.jointRiskProfile, "J", docDet.proposedAssets, docDet.clientDetails);
                        }




                        AddReplacementOfProduct(body, docDet.currentAssests, docDet.proposedAssets, docDet.alternativeAssets, docDet.clientDetails, orange);

                        Run linebreak6 = new Run(new Break());

                        Paragraph paragraph2 = new Paragraph();
                        paragraph1.Append(new OpenXmlElement[] { linebreak6 });
                        body.Append(paragraph2);


                        AddReplacementOfInvestmentProduct(body, docDet.currentAssests, docDet.proposedAssets, docDet.alternativeAssets, docDet.clientDetails, orange);

                        Paragraph break6 = new Paragraph(new Run(new Break() { Type = BreakValues.Page }));
                        body.Append(break6);

                        //Your Risk Profile
                        Paragraph ProductCosts = new Paragraph(new Run(new RunProperties(new FontSize { Val = "40" }, new Color() { Val = "ED7D27" }), new Text("Product costs")));
                        body.Append(ProductCosts);

                        AddProductCosts(body, docDet.proposedAssets, orange, docDet.clientDetails);
                    }

                    var t = mainPart.Document.Body.Descendants<Table>().ToList();
                    var p = mainPart.Document.Body.Descendants<Paragraph>().ToList();
                    AlterTableType(t, p, package);

                    FooterPart footerPart = mainPart.AddNewPart<FooterPart>();

                    string footerPartId = mainPart.GetIdOfPart(footerPart);
                    GeneratePartContent(footerPart);

                    IEnumerable<SectionProperties> sections = mainPart.Document.Body.Elements<SectionProperties>();
                    foreach (var section in sections)
                    {
                        section.RemoveAllChildren<FooterReference>();
                        section.PrependChild<FooterReference>(new FooterReference() { Id = footerPartId });
                    }


                    package.MainDocumentPart.Document.Save();
                    package.Close();

                }


                ms.Position = 0;
                await blockBlob.UploadFromStreamAsync(ms);


                return File(ms.ToArray(), "application/octet-stream", "test");
            }
            catch(Exception ex)
            {
                throw ex;
            }
        }

       
        private void AddInvestmentRecommendation(Body body1, BasicDetails clientDetails, PF[] proposedAssets, AssetDetails[] clientWeights, AssetDetails[] partnerWeights, AssetDetails[] jointWeights)
        {
            var platforms = new List<PlatformViewModel>();
            foreach (PF product in proposedAssets)
            {
                PlatformViewModel platform = this.mapper.Map<IEnumerable<PlatformViewModel>>(from s in this.context.Product.AsEnumerable() join sa in this.context.Platform.AsEnumerable() on s.PlatformId equals sa.PlatformId where s.ProductId == product.productId select sa).FirstOrDefault();
                if (platform.PlatformId != 0)
                {
                    // if(!(platforms.Contains(platform)))
                    //if((platforms.Where(p => p.PlatformId == platform.PlatformId).Count() <= 0));
                    if (!platforms.Any(n => n.PlatformId == platform.PlatformId))
                    {
                        platforms.Add(platform);
                    }
                }
            }

            if (platforms.Count() > 0)
            {
                Paragraph nextPage = new Paragraph(new Run(new Break() { Type = BreakValues.Page }));

                body1.AppendChild(nextPage);

                Table table1 = new Table();

                TableProperties tableProperties1 = new TableProperties();
                TableWidth tableWidth1 = new TableWidth() { Width = "9638", Type = TableWidthUnitValues.Dxa };
                TableIndentation tableIndentation1 = new TableIndentation() { Width = -5, Type = TableWidthUnitValues.Dxa };
                TableLayout tableLayout1 = new TableLayout() { Type = TableLayoutValues.Fixed };
                TableLook tableLook1 = new TableLook() { Val = "0000", FirstRow = false, LastRow = false, FirstColumn = false, LastColumn = false, NoHorizontalBand = false, NoVerticalBand = false };

                tableProperties1.Append(tableWidth1);
                tableProperties1.Append(tableIndentation1);
                tableProperties1.Append(tableLayout1);
                tableProperties1.Append(tableLook1);

                TableGrid tableGrid1 = new TableGrid();
                GridColumn gridColumn1 = new GridColumn() { Width = "9638" };

                tableGrid1.Append(gridColumn1);

                TableRow tableRow1 = new TableRow() { RsidTableRowMarkRevision = "00482D19", RsidTableRowAddition = "001A4A50", RsidTableRowProperties = "00A85FEB" };

                TableRowProperties tableRowProperties1 = new TableRowProperties();
                TableRowHeight tableRowHeight1 = new TableRowHeight() { Val = (UInt32Value)567U };

                tableRowProperties1.Append(tableRowHeight1);

                TableCell tableCell1 = new TableCell();

                TableCellProperties tableCellProperties1 = new TableCellProperties();
                TableCellWidth tableCellWidth1 = new TableCellWidth() { Width = "9638", Type = TableWidthUnitValues.Dxa };

                TableCellBorders tableCellBorders1 = new TableCellBorders();
                TopBorder topBorder1 = new TopBorder() { Val = BorderValues.Single, Color = "FFFFFF", Size = (UInt32Value)4U, Space = (UInt32Value)0U };
                LeftBorder leftBorder1 = new LeftBorder() { Val = BorderValues.Single, Color = "FFFFFF", Size = (UInt32Value)4U, Space = (UInt32Value)0U };
                BottomBorder bottomBorder1 = new BottomBorder() { Val = BorderValues.Single, Color = "FFFFFF", Size = (UInt32Value)4U, Space = (UInt32Value)0U };
                RightBorder rightBorder1 = new RightBorder() { Val = BorderValues.Single, Color = "FFFFFF", Size = (UInt32Value)4U, Space = (UInt32Value)0U };

                tableCellBorders1.Append(topBorder1);
                tableCellBorders1.Append(leftBorder1);
                tableCellBorders1.Append(bottomBorder1);
                tableCellBorders1.Append(rightBorder1);
                Shading shading1 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "auto" };

                tableCellProperties1.Append(tableCellWidth1);
                tableCellProperties1.Append(tableCellBorders1);
                tableCellProperties1.Append(shading1);

                Paragraph paragraph1 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties1 = new ParagraphProperties();

                Tabs tabs1 = new Tabs();
                TabStop tabStop1 = new TabStop() { Val = TabStopValues.Number, Position = 432 };

                tabs1.Append(tabStop1);
                SuppressAutoHyphens suppressAutoHyphens1 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Indentation indentation1 = new Indentation() { Left = "432", Hanging = "432" };
                Justification justification1 = new Justification() { Val = JustificationValues.Both };
                OutlineLevel outlineLevel1 = new OutlineLevel() { Val = 0 };

                ParagraphMarkRunProperties paragraphMarkRunProperties1 = new ParagraphMarkRunProperties();
                RunFonts runFonts1 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Segoe UI Light" };
                Color color1 = new Color() { Val = "00B050" };
                FontSize fontSize1 = new FontSize() { Val = "16" };
                FontSizeComplexScript fontSizeComplexScript1 = new FontSizeComplexScript() { Val = "18" };
                Languages languages1 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties1.Append(runFonts1);
                paragraphMarkRunProperties1.Append(color1);
                paragraphMarkRunProperties1.Append(fontSize1);
                paragraphMarkRunProperties1.Append(fontSizeComplexScript1);
                paragraphMarkRunProperties1.Append(languages1);

                paragraphProperties1.Append(tabs1);
                paragraphProperties1.Append(suppressAutoHyphens1);
                paragraphProperties1.Append(spacingBetweenLines1);
                paragraphProperties1.Append(indentation1);
                paragraphProperties1.Append(justification1);
                paragraphProperties1.Append(outlineLevel1);
                paragraphProperties1.Append(paragraphMarkRunProperties1);

                Run run1 = new Run();

                RunProperties runProperties1 = new RunProperties();
                RunFonts runFonts2 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color2 = new Color() { Val = "000000" };
                Languages languages2 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties1.Append(runFonts2);
                runProperties1.Append(color2);
                runProperties1.Append(languages2);
                Break break1 = new Break() { Type = BreakValues.Page };

                run1.Append(runProperties1);
                run1.Append(break1);
                BookmarkStart bookmarkStart1 = new BookmarkStart() { Name = "_Toc516482676", Id = "0" };

                Run run2 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties2 = new RunProperties();
                RunFonts runFonts3 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Arial" };
                Color color3 = new Color() { Val = "F58426" };
                FontSize fontSize2 = new FontSize() { Val = "40" };
                FontSizeComplexScript fontSizeComplexScript2 = new FontSizeComplexScript() { Val = "28" };
                Languages languages3 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

                runProperties2.Append(runFonts3);
                runProperties2.Append(color3);
                runProperties2.Append(fontSize2);
                runProperties2.Append(fontSizeComplexScript2);
                runProperties2.Append(languages3);
                Text text1 = new Text();
                text1.Text = "Investment product recommendations";

                run2.Append(runProperties2);
                run2.Append(text1);
                BookmarkEnd bookmarkEnd1 = new BookmarkEnd() { Id = "0" };

                //Run run3 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties3 = new RunProperties();
                //RunFonts runFonts4 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Arial" };
                //Color color4 = new Color() { Val = "F58426" };
                //FontSize fontSize3 = new FontSize() { Val = "40" };
                //FontSizeComplexScript fontSizeComplexScript3 = new FontSizeComplexScript() { Val = "28" };
                //Languages languages4 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

                //runProperties3.Append(runFonts4);
                //runProperties3.Append(color4);
                //runProperties3.Append(fontSize3);
                //runProperties3.Append(fontSizeComplexScript3);
                //runProperties3.Append(languages4);
                //Text text2 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text2.Text = " ";

                //run3.Append(runProperties3);
                //run3.Append(text2);

                paragraph1.Append(paragraphProperties1);
                paragraph1.Append(run1);
                paragraph1.Append(bookmarkStart1);
                paragraph1.Append(run2);
                //paragraph1.Append(bookmarkEnd1);
                //paragraph1.Append(run3);

                tableCell1.Append(tableCellProperties1);
                tableCell1.Append(paragraph1);

                tableRow1.Append(tableRowProperties1);
                tableRow1.Append(tableCell1);

                table1.Append(tableProperties1);
                table1.Append(tableGrid1);
                table1.Append(tableRow1);

                body1.Append(table1);
            }


            foreach (PlatformViewModel pf in platforms)
            {

                var selectedProducts = proposedAssets.Where(c => c.platformId == pf.PlatformId);
                var clientProducts = selectedProducts.Where(c => c.owner == "Client").ToArray();
                var partnerProducts = selectedProducts.Where(c => c.owner == "Partner").ToArray();
                var jointProducts = selectedProducts.Where(c => c.owner == "Joint").ToArray();

                var isPension = false;

                decimal productSum = 0;
                decimal totalSum = 0;
                bool isDirectShare = false;
                bool isDirectProperty = false;
                bool hasEquityInvestment = false;
                bool onlyETF = true;
                bool hasGWInvestment = false;
                bool hasGWSP = false;

                foreach (PF client in clientProducts)
                {
                    var currProduct = context.Product.Where(d => d.ProductId == client.productId).FirstOrDefault();
                    if (currProduct != null)
                    {
                        if (pf.SubType == "GrowWrap")
                        {
                            if (currProduct.ProductType == "Investment")
                            {
                                hasGWInvestment = true;
                            }

                            if (currProduct.ProductType == "Super" || currProduct.ProductType == "Pension")
                            {
                                hasGWSP = true;
                            }
                        }
                    }

                    productSum += client.value;
                    foreach (ProposedClientFundsViewModel data in client.data)
                    {
                        var prod = context.InvestmentFund.Where(d => d.Apircode == data.Apircode).FirstOrDefault();
                        if (prod != null)
                        {
                            if (prod.IsActive == "P")
                            {
                                totalSum += data.Value;
                            }

                            if (prod.DomesticEquity > 0 || prod.InternationalEquity > 0)
                            {
                                hasEquityInvestment = true;
                            }
                            if (prod.DomesticProperty > 0 || prod.InternationalProperty > 0)
                            {
                                isDirectProperty = true;
                            }
                        }

                        if (data.FeeLabel3 == "ASX" || data.FeeLabel4 == "ETF")
                        {
                            isDirectShare = true;
                        }

                        if (data.FeeLabel4 != "ETF")
                        {
                            onlyETF = false;
                        }
                    }
                }
                foreach (PF client in partnerProducts)
                {
                    var currProduct = context.Product.Where(d => d.ProductId == client.productId).FirstOrDefault();
                    if (currProduct != null)
                    {
                        if (pf.SubType == "GrowWrap")
                        {
                            if (currProduct.ProductType == "Investment")
                            {
                                hasGWInvestment = true;
                            }

                            if (currProduct.ProductType == "Super" || currProduct.ProductType == "Pension")
                            {
                                hasGWSP = true;
                            }
                        }
                    }

                    productSum += client.value;
                    foreach (ProposedClientFundsViewModel data in client.data)
                    {
                        var prod = context.InvestmentFund.Where(d => d.Apircode == data.Apircode).FirstOrDefault();
                        if (prod != null)
                        {
                            if (prod.IsActive == "P")
                            {
                                totalSum += data.Value;
                            }
                            if (prod.DomesticEquity > 0 || prod.InternationalEquity > 0)
                            {
                                hasEquityInvestment = true;
                            }
                            if (prod.DomesticProperty > 0 || prod.InternationalProperty > 0)
                            {
                                isDirectProperty = true;
                            }
                        }
                        if (data.FeeLabel3 == "ASX" || data.FeeLabel4 == "ETF")
                        {
                            isDirectShare = true;
                        }
                    }
                }
                foreach (PF client in jointProducts)
                {
                    var currProduct = context.Product.Where(d => d.ProductId == client.productId).FirstOrDefault();
                    if (currProduct != null)
                    {
                        if (pf.SubType == "GrowWrap")
                        {
                            if (currProduct.ProductType == "Investment")
                            {
                                hasGWInvestment = true;
                            }

                            if (currProduct.ProductType == "Super" || currProduct.ProductType == "Pension")
                            {
                                hasGWSP = true;
                            }
                        }
                    }

                    productSum += client.value;
                    foreach (ProposedClientFundsViewModel data in client.data)
                    {
                        var prod = context.InvestmentFund.Where(d => d.Apircode == data.Apircode).FirstOrDefault();
                        if (prod != null)
                        {
                            if (prod.IsActive == "P")
                            {
                                totalSum += data.Value;
                            }
                            if (prod.DomesticEquity > 0 || prod.InternationalEquity > 0)
                            {
                                hasEquityInvestment = true;
                            }
                            if (prod.DomesticProperty > 0 || prod.InternationalProperty > 0)
                            {
                                isDirectProperty = true;
                            }
                        }
                        if (data.FeeLabel3 == "ASX" || data.FeeLabel4 == "ETF")
                        {
                            isDirectShare = true;
                        }
                    }
                }



                Paragraph paragraph2 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties2 = new ParagraphProperties();

                Tabs tabs2 = new Tabs();
                TabStop tabStop2 = new TabStop() { Val = TabStopValues.Left, Position = 7230 };

                tabs2.Append(tabStop2);
                SuppressAutoHyphens suppressAutoHyphens2 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines2 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties2 = new ParagraphMarkRunProperties();
                RunFonts runFonts5 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Verdana" };
                Color color5 = new Color() { Val = "000000" };
                FontSize fontSize4 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript4 = new FontSizeComplexScript() { Val = "18" };
                Languages languages5 = new Languages() { EastAsia = "zh-CN" };

                paragraphMarkRunProperties2.Append(runFonts5);
                paragraphMarkRunProperties2.Append(color5);
                paragraphMarkRunProperties2.Append(fontSize4);
                paragraphMarkRunProperties2.Append(fontSizeComplexScript4);
                paragraphMarkRunProperties2.Append(languages5);

                paragraphProperties2.Append(tabs2);
                paragraphProperties2.Append(suppressAutoHyphens2);
                paragraphProperties2.Append(spacingBetweenLines2);
                paragraphProperties2.Append(paragraphMarkRunProperties2);

                paragraph2.Append(paragraphProperties2);

                Table table2 = new Table();

                TableProperties tableProperties2 = new TableProperties();
                TableWidth tableWidth2 = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                TableCellMarginDefault tableCellMarginDefault1 = new TableCellMarginDefault();
                TopMargin topMargin1 = new TopMargin() { Width = "113", Type = TableWidthUnitValues.Dxa };
                BottomMargin bottomMargin1 = new BottomMargin() { Width = "113", Type = TableWidthUnitValues.Dxa };

                tableCellMarginDefault1.Append(topMargin1);
                tableCellMarginDefault1.Append(bottomMargin1);
                TableLook tableLook2 = new TableLook() { Val = "04A0", FirstRow = true, LastRow = false, FirstColumn = true, LastColumn = false, NoHorizontalBand = false, NoVerticalBand = true };

                tableProperties2.Append(tableWidth2);
                tableProperties2.Append(tableCellMarginDefault1);
                tableProperties2.Append(tableLook2);

                TableGrid tableGrid2 = new TableGrid();
                GridColumn gridColumn2 = new GridColumn() { Width = "2059" };
                GridColumn gridColumn3 = new GridColumn() { Width = "7301" };

                tableGrid2.Append(gridColumn2);
                tableGrid2.Append(gridColumn3);

                TableRow tableRow2 = new TableRow() { RsidTableRowMarkRevision = "00482D19", RsidTableRowAddition = "001A4A50", RsidTableRowProperties = "00A85FEB" };

                TableCell tableCell2 = new TableCell();

                TableCellProperties tableCellProperties2 = new TableCellProperties();
                TableCellWidth tableCellWidth2 = new TableCellWidth() { Width = "1100", Type = TableWidthUnitValues.Pct };
                TableCellVerticalAlignment tableCellVerticalAlignment1 = new TableCellVerticalAlignment() { Val = TableVerticalAlignmentValues.Center };

                tableCellProperties2.Append(tableCellWidth2);
                tableCellProperties2.Append(tableCellVerticalAlignment1);

                Paragraph paragraph3 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties3 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens3 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines3 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties3 = new ParagraphMarkRunProperties();
                RunFonts runFonts6 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize5 = new FontSize() { Val = "18" };
                Languages languages6 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties3.Append(runFonts6);
                paragraphMarkRunProperties3.Append(fontSize5);
                paragraphMarkRunProperties3.Append(languages6);

                paragraphProperties3.Append(suppressAutoHyphens3);
                paragraphProperties3.Append(spacingBetweenLines3);
                paragraphProperties3.Append(paragraphMarkRunProperties3);

                Run run4 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties4 = new RunProperties();
                RunFonts runFonts7 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Bold bold1 = new Bold();
                Color color6 = new Color() { Val = "FF0000" };
                FontSize fontSize6 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript5 = new FontSizeComplexScript() { Val = "18" };
                Languages languages7 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

                runProperties4.Append(runFonts7);
                runProperties4.Append(bold1);
                runProperties4.Append(color6);
                runProperties4.Append(fontSize6);
                runProperties4.Append(fontSizeComplexScript5);
                runProperties4.Append(languages7);
                Text text3 = new Text();
                text3.Text = "Logo of platform";

                run4.Append(runProperties4);
                run4.Append(text3);

                Run run5 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties5 = new RunProperties();
                RunFonts runFonts8 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize7 = new FontSize() { Val = "18" };
                Languages languages8 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties5.Append(runFonts8);
                runProperties5.Append(fontSize7);
                runProperties5.Append(languages8);
                Text text4 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text4.Text = " ";

                run5.Append(runProperties5);
                run5.Append(text4);

                paragraph3.Append(paragraphProperties3);
                paragraph3.Append(run4);
                paragraph3.Append(run5);

                tableCell2.Append(tableCellProperties2);
                tableCell2.Append(paragraph3);

                TableCell tableCell3 = new TableCell();

                TableCellProperties tableCellProperties3 = new TableCellProperties();
                TableCellWidth tableCellWidth3 = new TableCellWidth() { Width = "3900", Type = TableWidthUnitValues.Pct };
                TableCellVerticalAlignment tableCellVerticalAlignment2 = new TableCellVerticalAlignment() { Val = TableVerticalAlignmentValues.Center };
                HideMark hideMark1 = new HideMark();

                tableCellProperties3.Append(tableCellWidth3);
                tableCellProperties3.Append(tableCellVerticalAlignment2);
                tableCellProperties3.Append(hideMark1);
                tableCell3.Append(tableCellProperties3);

                if (clientProducts.Length > 0 || jointProducts.Length > 0)
                {
                    Paragraph paragraph4 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties4 = new ParagraphProperties();
                    SuppressAutoHyphens suppressAutoHyphens4 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines4 = new SpacingBetweenLines() { After = "40", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                    ParagraphMarkRunProperties paragraphMarkRunProperties4 = new ParagraphMarkRunProperties();
                    RunFonts runFonts9 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    Color color7 = new Color() { Val = "9FA1A4" };
                    FontSize fontSize8 = new FontSize() { Val = "26" };
                    FontSizeComplexScript fontSizeComplexScript6 = new FontSizeComplexScript() { Val = "26" };
                    Languages languages9 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties4.Append(runFonts9);
                    paragraphMarkRunProperties4.Append(color7);
                    paragraphMarkRunProperties4.Append(fontSize8);
                    paragraphMarkRunProperties4.Append(fontSizeComplexScript6);
                    paragraphMarkRunProperties4.Append(languages9);

                    paragraphProperties4.Append(suppressAutoHyphens4);
                    paragraphProperties4.Append(spacingBetweenLines4);
                    paragraphProperties4.Append(paragraphMarkRunProperties4);

                    Run run6 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties6 = new RunProperties();
                    RunFonts runFonts10 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    Color color8 = new Color() { Val = "F58426" };
                    FontSize fontSize9 = new FontSize() { Val = "26" };
                    FontSizeComplexScript fontSizeComplexScript7 = new FontSizeComplexScript() { Val = "26" };
                    Languages languages10 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties6.Append(runFonts10);
                    runProperties6.Append(color8);
                    runProperties6.Append(fontSize9);
                    runProperties6.Append(fontSizeComplexScript7);
                    runProperties6.Append(languages10);
                    Text text5 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text5.Text = clientDetails.ClientName;

                    run6.Append(runProperties6);
                    run6.Append(text5);

                    paragraph4.Append(paragraphProperties4);
                    paragraph4.Append(run6);


                    tableCell3.Append(paragraph4);
                }

                foreach (PF product in clientProducts)
                {
                    Paragraph paragraph5 = new Paragraph() { RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties5 = new ParagraphProperties();
                    KeepNext keepNext1 = new KeepNext();
                    KeepLines keepLines1 = new KeepLines();
                    SuppressAutoHyphens suppressAutoHyphens5 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines5 = new SpacingBetweenLines() { Before = "200", After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    OutlineLevel outlineLevel2 = new OutlineLevel() { Val = 2 };

                    ParagraphMarkRunProperties paragraphMarkRunProperties5 = new ParagraphMarkRunProperties();
                    RunFonts runFonts11 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Segoe UI Light" };
                    BoldComplexScript boldComplexScript1 = new BoldComplexScript();
                    Color color9 = new Color() { Val = "9FA1A4" };
                    FontSize fontSize10 = new FontSize() { Val = "26" };
                    FontSizeComplexScript fontSizeComplexScript8 = new FontSizeComplexScript() { Val = "26" };
                    Languages languages11 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties5.Append(runFonts11);
                    paragraphMarkRunProperties5.Append(boldComplexScript1);
                    paragraphMarkRunProperties5.Append(color9);
                    paragraphMarkRunProperties5.Append(fontSize10);
                    paragraphMarkRunProperties5.Append(fontSizeComplexScript8);
                    paragraphMarkRunProperties5.Append(languages11);

                    paragraphProperties5.Append(keepNext1);
                    paragraphProperties5.Append(keepLines1);
                    paragraphProperties5.Append(suppressAutoHyphens5);
                    paragraphProperties5.Append(spacingBetweenLines5);
                    paragraphProperties5.Append(outlineLevel2);
                    paragraphProperties5.Append(paragraphMarkRunProperties5);

                    Run run7 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties7 = new RunProperties();
                    RunFonts runFonts12 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Segoe UI Light" };
                    BoldComplexScript boldComplexScript2 = new BoldComplexScript();
                    Color color10 = new Color() { Val = "9FA1A4" };
                    FontSize fontSize11 = new FontSize() { Val = "26" };
                    FontSizeComplexScript fontSizeComplexScript9 = new FontSizeComplexScript() { Val = "26" };
                    Languages languages12 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties7.Append(runFonts12);
                    runProperties7.Append(boldComplexScript2);
                    runProperties7.Append(color10);
                    runProperties7.Append(fontSize11);
                    runProperties7.Append(fontSizeComplexScript9);
                    runProperties7.Append(languages12);
                    Text text6 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text6.Text = product.product;

                    run7.Append(runProperties7);
                    run7.Append(text6);

                    //Run run8 = new Run();

                    //RunProperties runProperties8 = new RunProperties();
                    //RunFonts runFonts13 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Segoe UI Light" };
                    //BoldComplexScript boldComplexScript3 = new BoldComplexScript();
                    //Color color11 = new Color() { Val = "9FA1A4" };
                    //FontSize fontSize12 = new FontSize() { Val = "26" };
                    //FontSizeComplexScript fontSizeComplexScript10 = new FontSizeComplexScript() { Val = "26" };
                    //Languages languages13 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    //runProperties8.Append(runFonts13);
                    //runProperties8.Append(boldComplexScript3);
                    //runProperties8.Append(color11);
                    //runProperties8.Append(fontSize12);
                    //runProperties8.Append(fontSizeComplexScript10);
                    //runProperties8.Append(languages13);
                    //Text text7 = new Text();
                    //text7.Text = "product";

                    //run8.Append(runProperties8);
                    //run8.Append(text7);

                    paragraph5.Append(paragraphProperties5);
                    paragraph5.Append(run7);
                    tableCell3.Append(paragraph5);
                    // paragraph5.Append(run8);
                }
                foreach (PF product in jointProducts)
                {
                    Paragraph paragraph5 = new Paragraph() { RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties5 = new ParagraphProperties();
                    KeepNext keepNext1 = new KeepNext();
                    KeepLines keepLines1 = new KeepLines();
                    SuppressAutoHyphens suppressAutoHyphens5 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines5 = new SpacingBetweenLines() { Before = "200", After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    OutlineLevel outlineLevel2 = new OutlineLevel() { Val = 2 };

                    ParagraphMarkRunProperties paragraphMarkRunProperties5 = new ParagraphMarkRunProperties();
                    RunFonts runFonts11 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Segoe UI Light" };
                    BoldComplexScript boldComplexScript1 = new BoldComplexScript();
                    Color color9 = new Color() { Val = "9FA1A4" };
                    FontSize fontSize10 = new FontSize() { Val = "26" };
                    FontSizeComplexScript fontSizeComplexScript8 = new FontSizeComplexScript() { Val = "26" };
                    Languages languages11 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties5.Append(runFonts11);
                    paragraphMarkRunProperties5.Append(boldComplexScript1);
                    paragraphMarkRunProperties5.Append(color9);
                    paragraphMarkRunProperties5.Append(fontSize10);
                    paragraphMarkRunProperties5.Append(fontSizeComplexScript8);
                    paragraphMarkRunProperties5.Append(languages11);

                    paragraphProperties5.Append(keepNext1);
                    paragraphProperties5.Append(keepLines1);
                    paragraphProperties5.Append(suppressAutoHyphens5);
                    paragraphProperties5.Append(spacingBetweenLines5);
                    paragraphProperties5.Append(outlineLevel2);
                    paragraphProperties5.Append(paragraphMarkRunProperties5);

                    Run run7 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties7 = new RunProperties();
                    RunFonts runFonts12 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Segoe UI Light" };
                    BoldComplexScript boldComplexScript2 = new BoldComplexScript();
                    Color color10 = new Color() { Val = "9FA1A4" };
                    FontSize fontSize11 = new FontSize() { Val = "26" };
                    FontSizeComplexScript fontSizeComplexScript9 = new FontSizeComplexScript() { Val = "26" };
                    Languages languages12 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties7.Append(runFonts12);
                    runProperties7.Append(boldComplexScript2);
                    runProperties7.Append(color10);
                    runProperties7.Append(fontSize11);
                    runProperties7.Append(fontSizeComplexScript9);
                    runProperties7.Append(languages12);
                    Text text6 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text6.Text = product.product;

                    run7.Append(runProperties7);
                    run7.Append(text6);
                    paragraph5.Append(paragraphProperties5);
                    paragraph5.Append(run7);
                    tableCell3.Append(paragraph5);
                }

                if (partnerProducts.Length > 0 || jointProducts.Length > 0)
                {
                    Paragraph paragraph4 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties4 = new ParagraphProperties();
                    SuppressAutoHyphens suppressAutoHyphens4 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines4 = new SpacingBetweenLines() { After = "40", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                    ParagraphMarkRunProperties paragraphMarkRunProperties4 = new ParagraphMarkRunProperties();
                    RunFonts runFonts9 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    Color color7 = new Color() { Val = "9FA1A4" };
                    FontSize fontSize8 = new FontSize() { Val = "26" };
                    FontSizeComplexScript fontSizeComplexScript6 = new FontSizeComplexScript() { Val = "26" };
                    Languages languages9 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties4.Append(runFonts9);
                    paragraphMarkRunProperties4.Append(color7);
                    paragraphMarkRunProperties4.Append(fontSize8);
                    paragraphMarkRunProperties4.Append(fontSizeComplexScript6);
                    paragraphMarkRunProperties4.Append(languages9);

                    paragraphProperties4.Append(suppressAutoHyphens4);
                    paragraphProperties4.Append(spacingBetweenLines4);
                    paragraphProperties4.Append(paragraphMarkRunProperties4);

                    Run run6 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties6 = new RunProperties();
                    RunFonts runFonts10 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    Color color8 = new Color() { Val = "F58426" };
                    FontSize fontSize9 = new FontSize() { Val = "26" };
                    FontSizeComplexScript fontSizeComplexScript7 = new FontSizeComplexScript() { Val = "26" };
                    Languages languages10 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties6.Append(runFonts10);
                    runProperties6.Append(color8);
                    runProperties6.Append(fontSize9);
                    runProperties6.Append(fontSizeComplexScript7);
                    runProperties6.Append(languages10);
                    Text text5 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text5.Text = clientDetails.PartnerName;

                    run6.Append(runProperties6);
                    run6.Append(text5);

                    paragraph4.Append(paragraphProperties4);
                    paragraph4.Append(run6);


                    tableCell3.Append(paragraph4);
                }

                foreach (PF product in partnerProducts)
                {
                    Paragraph paragraph5 = new Paragraph() { RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties5 = new ParagraphProperties();
                    KeepNext keepNext1 = new KeepNext();
                    KeepLines keepLines1 = new KeepLines();
                    SuppressAutoHyphens suppressAutoHyphens5 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines5 = new SpacingBetweenLines() { Before = "200", After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    OutlineLevel outlineLevel2 = new OutlineLevel() { Val = 2 };

                    ParagraphMarkRunProperties paragraphMarkRunProperties5 = new ParagraphMarkRunProperties();
                    RunFonts runFonts11 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Segoe UI Light" };
                    BoldComplexScript boldComplexScript1 = new BoldComplexScript();
                    Color color9 = new Color() { Val = "9FA1A4" };
                    FontSize fontSize10 = new FontSize() { Val = "26" };
                    FontSizeComplexScript fontSizeComplexScript8 = new FontSizeComplexScript() { Val = "26" };
                    Languages languages11 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties5.Append(runFonts11);
                    paragraphMarkRunProperties5.Append(boldComplexScript1);
                    paragraphMarkRunProperties5.Append(color9);
                    paragraphMarkRunProperties5.Append(fontSize10);
                    paragraphMarkRunProperties5.Append(fontSizeComplexScript8);
                    paragraphMarkRunProperties5.Append(languages11);

                    paragraphProperties5.Append(keepNext1);
                    paragraphProperties5.Append(keepLines1);
                    paragraphProperties5.Append(suppressAutoHyphens5);
                    paragraphProperties5.Append(spacingBetweenLines5);
                    paragraphProperties5.Append(outlineLevel2);
                    paragraphProperties5.Append(paragraphMarkRunProperties5);

                    Run run7 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties7 = new RunProperties();
                    RunFonts runFonts12 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Segoe UI Light" };
                    BoldComplexScript boldComplexScript2 = new BoldComplexScript();
                    Color color10 = new Color() { Val = "9FA1A4" };
                    FontSize fontSize11 = new FontSize() { Val = "26" };
                    FontSizeComplexScript fontSizeComplexScript9 = new FontSizeComplexScript() { Val = "26" };
                    Languages languages12 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties7.Append(runFonts12);
                    runProperties7.Append(boldComplexScript2);
                    runProperties7.Append(color10);
                    runProperties7.Append(fontSize11);
                    runProperties7.Append(fontSizeComplexScript9);
                    runProperties7.Append(languages12);
                    Text text6 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text6.Text = product.product;

                    run7.Append(runProperties7);
                    run7.Append(text6);

                    //Run run8 = new Run();

                    //RunProperties runProperties8 = new RunProperties();
                    //RunFonts runFonts13 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Segoe UI Light" };
                    //BoldComplexScript boldComplexScript3 = new BoldComplexScript();
                    //Color color11 = new Color() { Val = "9FA1A4" };
                    //FontSize fontSize12 = new FontSize() { Val = "26" };
                    //FontSizeComplexScript fontSizeComplexScript10 = new FontSizeComplexScript() { Val = "26" };
                    //Languages languages13 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    //runProperties8.Append(runFonts13);
                    //runProperties8.Append(boldComplexScript3);
                    //runProperties8.Append(color11);
                    //runProperties8.Append(fontSize12);
                    //runProperties8.Append(fontSizeComplexScript10);
                    //runProperties8.Append(languages13);
                    //Text text7 = new Text();
                    //text7.Text = "product";

                    //run8.Append(runProperties8);
                    //run8.Append(text7);

                    paragraph5.Append(paragraphProperties5);
                    paragraph5.Append(run7);
                    tableCell3.Append(paragraph5);
                    // paragraph5.Append(run8);
                }
                foreach (PF product in jointProducts)
                {
                    Paragraph paragraph5 = new Paragraph() { RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties5 = new ParagraphProperties();
                    KeepNext keepNext1 = new KeepNext();
                    KeepLines keepLines1 = new KeepLines();
                    SuppressAutoHyphens suppressAutoHyphens5 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines5 = new SpacingBetweenLines() { Before = "200", After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    OutlineLevel outlineLevel2 = new OutlineLevel() { Val = 2 };

                    ParagraphMarkRunProperties paragraphMarkRunProperties5 = new ParagraphMarkRunProperties();
                    RunFonts runFonts11 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Segoe UI Light" };
                    BoldComplexScript boldComplexScript1 = new BoldComplexScript();
                    Color color9 = new Color() { Val = "9FA1A4" };
                    FontSize fontSize10 = new FontSize() { Val = "26" };
                    FontSizeComplexScript fontSizeComplexScript8 = new FontSizeComplexScript() { Val = "26" };
                    Languages languages11 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties5.Append(runFonts11);
                    paragraphMarkRunProperties5.Append(boldComplexScript1);
                    paragraphMarkRunProperties5.Append(color9);
                    paragraphMarkRunProperties5.Append(fontSize10);
                    paragraphMarkRunProperties5.Append(fontSizeComplexScript8);
                    paragraphMarkRunProperties5.Append(languages11);

                    paragraphProperties5.Append(keepNext1);
                    paragraphProperties5.Append(keepLines1);
                    paragraphProperties5.Append(suppressAutoHyphens5);
                    paragraphProperties5.Append(spacingBetweenLines5);
                    paragraphProperties5.Append(outlineLevel2);
                    paragraphProperties5.Append(paragraphMarkRunProperties5);

                    Run run7 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties7 = new RunProperties();
                    RunFonts runFonts12 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Segoe UI Light" };
                    BoldComplexScript boldComplexScript2 = new BoldComplexScript();
                    Color color10 = new Color() { Val = "9FA1A4" };
                    FontSize fontSize11 = new FontSize() { Val = "26" };
                    FontSizeComplexScript fontSizeComplexScript9 = new FontSizeComplexScript() { Val = "26" };
                    Languages languages12 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties7.Append(runFonts12);
                    runProperties7.Append(boldComplexScript2);
                    runProperties7.Append(color10);
                    runProperties7.Append(fontSize11);
                    runProperties7.Append(fontSizeComplexScript9);
                    runProperties7.Append(languages12);
                    Text text6 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text6.Text = product.product;

                    run7.Append(runProperties7);
                    run7.Append(text6);
                    paragraph5.Append(paragraphProperties5);
                    paragraph5.Append(run7);
                    tableCell3.Append(paragraph5);
                }

                Paragraph paragraph10 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties10 = new ParagraphProperties();
                KeepNext keepNext4 = new KeepNext();
                KeepLines keepLines4 = new KeepLines();
                SuppressAutoHyphens suppressAutoHyphens10 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines10 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                OutlineLevel outlineLevel5 = new OutlineLevel() { Val = 2 };

                ParagraphMarkRunProperties paragraphMarkRunProperties10 = new ParagraphMarkRunProperties();
                RunFonts runFonts23 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Times New Roman" };
                BoldComplexScript boldComplexScript10 = new BoldComplexScript();
                Color color21 = new Color() { Val = "5B9BD5" };
                FontSize fontSize22 = new FontSize() { Val = "18" };
                Languages languages23 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties10.Append(runFonts23);
                paragraphMarkRunProperties10.Append(boldComplexScript10);
                paragraphMarkRunProperties10.Append(color21);
                paragraphMarkRunProperties10.Append(fontSize22);
                paragraphMarkRunProperties10.Append(languages23);

                paragraphProperties10.Append(keepNext4);
                paragraphProperties10.Append(keepLines4);
                paragraphProperties10.Append(suppressAutoHyphens10);
                paragraphProperties10.Append(spacingBetweenLines10);
                paragraphProperties10.Append(outlineLevel5);
                paragraphProperties10.Append(paragraphMarkRunProperties10);

                paragraph10.Append(paragraphProperties10);


                //tableCell3.Append(paragraph5);
                //tableCell3.Append(paragraph6);
                //tableCell3.Append(paragraph7);
                //tableCell3.Append(paragraph8);
                //tableCell3.Append(paragraph9);
                tableCell3.Append(paragraph10);

                ////TODO - Add Line break


                BookmarkStart bookmarkStart2 = new BookmarkStart() { Name = "_GoBack", Id = "1" };
                BookmarkEnd bookmarkEnd2 = new BookmarkEnd() { Id = "1" };

                tableRow2.Append(tableCell2);
                tableRow2.Append(tableCell3);
                tableRow2.Append(bookmarkStart2);
                tableRow2.Append(bookmarkEnd2);

                TableRow tableRow3 = new TableRow() { RsidTableRowMarkRevision = "00482D19", RsidTableRowAddition = "001A4A50", RsidTableRowProperties = "00A85FEB" };

                TableCell tableCell4 = new TableCell();

                TableCellProperties tableCellProperties4 = new TableCellProperties();
                TableCellWidth tableCellWidth4 = new TableCellWidth() { Width = "1100", Type = TableWidthUnitValues.Pct };

                tableCellProperties4.Append(tableCellWidth4);

                Paragraph paragraph11 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties11 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens11 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines11 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties11 = new ParagraphMarkRunProperties();
                RunFonts runFonts24 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize23 = new FontSize() { Val = "18" };
                Languages languages24 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties11.Append(runFonts24);
                paragraphMarkRunProperties11.Append(fontSize23);
                paragraphMarkRunProperties11.Append(languages24);

                paragraphProperties11.Append(suppressAutoHyphens11);
                paragraphProperties11.Append(spacingBetweenLines11);
                paragraphProperties11.Append(paragraphMarkRunProperties11);

                Run run14 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties14 = new RunProperties();
                RunFonts runFonts25 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Bold bold2 = new Bold();
                Color color22 = new Color() { Val = "393939" };
                FontSize fontSize24 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript20 = new FontSizeComplexScript() { Val = "18" };
                Languages languages25 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

                runProperties14.Append(runFonts25);
                runProperties14.Append(bold2);
                runProperties14.Append(color22);
                runProperties14.Append(fontSize24);
                runProperties14.Append(fontSizeComplexScript20);
                runProperties14.Append(languages25);
                Text text13 = new Text();
                text13.Text = "Overview";

                run14.Append(runProperties14);
                run14.Append(text13);

                paragraph11.Append(paragraphProperties11);
                paragraph11.Append(run14);

                tableCell4.Append(tableCellProperties4);
                tableCell4.Append(paragraph11);

                TableCell tableCell5 = new TableCell();

                TableCellProperties tableCellProperties5 = new TableCellProperties();
                TableCellWidth tableCellWidth5 = new TableCellWidth() { Width = "3900", Type = TableWidthUnitValues.Pct };

                tableCellProperties5.Append(tableCellWidth5);
                tableCell5.Append(tableCellProperties5);

                foreach (PF product in selectedProducts)
                {
                    var prod = context.Product.Where(x => x.ProductId == product.productId).FirstOrDefault();
                    if (prod != null)
                    {
                        if (prod.ProductType == "Pension")
                        {
                            isPension = true;
                        }
                    }

                    Paragraph paragraph12 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties12 = new ParagraphProperties();
                    SuppressAutoHyphens suppressAutoHyphens12 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines12 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification2 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties12 = new ParagraphMarkRunProperties();
                    RunFonts runFonts26 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Times New Roman" };
                    FontSize fontSize25 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript21 = new FontSizeComplexScript() { Val = "19" };

                    paragraphMarkRunProperties12.Append(runFonts26);
                    paragraphMarkRunProperties12.Append(fontSize25);
                    paragraphMarkRunProperties12.Append(fontSizeComplexScript21);

                    paragraphProperties12.Append(suppressAutoHyphens12);
                    // paragraphProperties12.Append(spacingBetweenLines12);
                    paragraphProperties12.Append(justification2);
                    paragraphProperties12.Append(paragraphMarkRunProperties12);
                    paragraph12.Append(paragraphProperties12);
                    if (clientDetails.MaritalStatus == "M")
                    {
                        Run run15 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties15 = new RunProperties();
                        RunFonts runFonts27 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize26 = new FontSize() { Val = "18" };
                        //  Highlight highlight1 = new Highlight() { Val = HighlightColorValues.Yellow };
                        Languages languages26 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties15.Append(runFonts27);
                        runProperties15.Append(fontSize26);
                        //  runProperties15.Append(highlight1);
                        runProperties15.Append(languages26);
                        Text text14 = new Text();


                        if (product.owner == "Client")
                        {
                            text14.Text = clientDetails.ClientName;
                        }
                        else if (product.owner == "Partner")
                        {
                            text14.Text = clientDetails.PartnerName;
                        }
                        else if (product.owner == "Joint")
                        {
                            text14.Text = clientDetails.ClientName + " and " + clientDetails.PartnerName;
                        }

                        run15.Append(runProperties15);
                        run15.Append(text14);


                        Run run16 = new Run();

                        RunProperties runProperties16 = new RunProperties();
                        RunFonts runFonts28 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize27 = new FontSize() { Val = "18" };
                        Languages languages27 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties16.Append(runFonts28);
                        runProperties16.Append(fontSize27);
                        runProperties16.Append(languages27);
                        Text text15 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text15.Text = ", we recommend ";

                        run16.Append(runProperties16);
                        run16.Append(text15);

                        paragraph12.Append(run15);
                        paragraph12.Append(run16);
                    }
                    else
                    {
                        Run run16 = new Run();

                        RunProperties runProperties16 = new RunProperties();
                        RunFonts runFonts28 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize27 = new FontSize() { Val = "18" };
                        Languages languages27 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties16.Append(runFonts28);
                        runProperties16.Append(fontSize27);
                        runProperties16.Append(languages27);
                        Text text15 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text15.Text = "We recommend ";

                        run16.Append(runProperties16);
                        run16.Append(text15);


                        paragraph12.Append(run16);
                    }



                    //Run run17 = new Run() { RsidRunProperties = "00482D19" };

                    //RunProperties runProperties17 = new RunProperties();
                    //RunFonts runFonts29 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    //FontSize fontSize28 = new FontSize() { Val = "18" };
                    //Languages languages28 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    //runProperties17.Append(runFonts29);
                    //runProperties17.Append(fontSize28);
                    //runProperties17.Append(languages28);
                    //Text text16 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    //text16.Text = "e recommend ";

                    //run17.Append(runProperties17);
                    //run17.Append(text16);

                    Run run18 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties18 = new RunProperties();
                    RunFonts runFonts30 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    // Color color23 = new Color() { Val = "FF0000" };
                    FontSize fontSize29 = new FontSize() { Val = "18" };
                    Languages languages29 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties18.Append(runFonts30);
                    // runProperties18.Append(color23);
                    runProperties18.Append(fontSize29);
                    runProperties18.Append(languages29);
                    Text text17 = new Text();
                    text17.Text = product.product;

                    run18.Append(runProperties18);
                    run18.Append(text17);

                    Run run19 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties19 = new RunProperties();
                    RunFonts runFonts31 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize30 = new FontSize() { Val = "18" };
                    Languages languages30 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties19.Append(runFonts31);
                    runProperties19.Append(fontSize30);
                    runProperties19.Append(languages30);
                    Text text18 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text18.Text = " which will enable you to implement our recommended strategy to ";

                    run19.Append(runProperties19);
                    run19.Append(text18);

                    //Run run20 = new Run();

                    //RunProperties runProperties20 = new RunProperties();
                    //RunFonts runFonts32 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    //FontSize fontSize31 = new FontSize() { Val = "18" };
                    //Languages languages31 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    //runProperties20.Append(runFonts32);
                    //runProperties20.Append(fontSize31);
                    //runProperties20.Append(languages31);
                    //Text text19 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    //text19.Text = " ";

                    //run20.Append(runProperties20);
                    //run20.Append(text19);

                    Run run21 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties21 = new RunProperties();
                    RunFonts runFonts33 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Times New Roman" };
                    Color color24 = new Color() { Val = "FF0000" };
                    FontSize fontSize32 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript22 = new FontSizeComplexScript() { Val = "19" };

                    runProperties21.Append(runFonts33);
                    runProperties21.Append(color24);
                    runProperties21.Append(fontSize32);
                    runProperties21.Append(fontSizeComplexScript22);
                    Text text20 = new Text();
                    text20.Text = "XXX strategy";

                    run21.Append(runProperties21);
                    run21.Append(text20);

                    Run run22 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties22 = new RunProperties();
                    RunFonts runFonts34 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Times New Roman" };
                    FontSize fontSize33 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript23 = new FontSizeComplexScript() { Val = "19" };

                    runProperties22.Append(runFonts34);
                    runProperties22.Append(fontSize33);
                    runProperties22.Append(fontSizeComplexScript23);
                    Text text21 = new Text();
                    text21.Text = ".";

                    run22.Append(runProperties22);
                    run22.Append(text21);



                    //paragraph12.Append(run16);
                    //  paragraph12.Append(run17);
                    paragraph12.Append(run18);
                    paragraph12.Append(run19);
                    //  paragraph12.Append(run20);
                    paragraph12.Append(run21);
                    paragraph12.Append(run22);
                    tableCell5.Append(paragraph12);
                }


                if (pf.PlatformType == "Wrap" && pf.PlatformName != "GrowWrap")
                {
                    Paragraph paragraph13 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties13 = new ParagraphProperties();
                    SuppressAutoHyphens suppressAutoHyphens13 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines13 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification3 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties13 = new ParagraphMarkRunProperties();
                    RunFonts runFonts35 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize34 = new FontSize() { Val = "18" };
                    Highlight highlight2 = new Highlight() { Val = HighlightColorValues.Yellow };
                    Languages languages32 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties13.Append(runFonts35);
                    paragraphMarkRunProperties13.Append(fontSize34);
                    paragraphMarkRunProperties13.Append(highlight2);
                    paragraphMarkRunProperties13.Append(languages32);

                    paragraphProperties13.Append(suppressAutoHyphens13);
                    paragraphProperties13.Append(spacingBetweenLines13);
                    paragraphProperties13.Append(justification3);
                    paragraphProperties13.Append(paragraphMarkRunProperties13);

                    paragraph13.Append(paragraphProperties13);

                    Paragraph paragraph14 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties14 = new ParagraphProperties();
                    SuppressAutoHyphens suppressAutoHyphens14 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines14 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification4 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties14 = new ParagraphMarkRunProperties();
                    RunFonts runFonts36 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize35 = new FontSize() { Val = "18" };
                    Languages languages33 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties14.Append(runFonts36);
                    paragraphMarkRunProperties14.Append(fontSize35);
                    paragraphMarkRunProperties14.Append(languages33);

                    paragraphProperties14.Append(suppressAutoHyphens14);
                    paragraphProperties14.Append(spacingBetweenLines14);
                    paragraphProperties14.Append(justification4);
                    paragraphProperties14.Append(paragraphMarkRunProperties14);

                    Run run23 = new Run();

                    RunProperties runProperties23 = new RunProperties();
                    RunFonts runFonts37 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize36 = new FontSize() { Val = "18" };
                    // Highlight highlight3 = new Highlight() { Val = HighlightColorValues.Yellow };
                    Languages languages34 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties23.Append(runFonts37);
                    runProperties23.Append(fontSize36);
                    //runProperties23.Append(highlight3);
                    runProperties23.Append(languages34);
                    Text text22 = new Text();
                    text22.Text = pf.SubType;

                    run23.Append(runProperties23);
                    run23.Append(text22);

                    Run run24 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties24 = new RunProperties();
                    RunFonts runFonts38 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize37 = new FontSize() { Val = "18" };
                    Languages languages35 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties24.Append(runFonts38);
                    runProperties24.Append(fontSize37);
                    runProperties24.Append(languages35);
                    Text text23 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text23.Text = " ";

                    run24.Append(runProperties24);
                    run24.Append(text23);

                    Run run25 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties25 = new RunProperties();
                    RunFonts runFonts39 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Arial" };
                    FontSize fontSize38 = new FontSize() { Val = "18" };
                    Languages languages36 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties25.Append(runFonts39);
                    runProperties25.Append(fontSize38);
                    runProperties25.Append(languages36);
                    Text text24 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text24.Text = "is a wrap service that allows ";

                    run25.Append(runProperties25);
                    run25.Append(text24);

                    Run run26 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties26 = new RunProperties();
                    RunFonts runFonts40 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize39 = new FontSize() { Val = "18" };
                    Languages languages37 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties26.Append(runFonts40);
                    runProperties26.Append(fontSize39);
                    runProperties26.Append(languages37);
                    Text text25 = new Text();
                    text25.Text = "all your account administration, transacting and account maintenance to be completed in one place. The product is designed for people who want a wide choice of investments, consolidated reporting and someone else to manage the paperwork.";

                    run26.Append(runProperties26);
                    run26.Append(text25);

                    paragraph14.Append(paragraphProperties14);
                    paragraph14.Append(run23);
                    paragraph14.Append(run24);
                    paragraph14.Append(run25);
                    paragraph14.Append(run26);

                    Paragraph paragraph15 = new Paragraph() { RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties15 = new ParagraphProperties();
                    SuppressAutoHyphens suppressAutoHyphens15 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines15 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification5 = new Justification() { Val = JustificationValues.Both };

                    paragraphProperties15.Append(suppressAutoHyphens15);
                    paragraphProperties15.Append(spacingBetweenLines15);
                    paragraphProperties15.Append(justification5);

                    paragraph15.Append(paragraphProperties15);
                    tableCell5.Append(paragraph13);
                    tableCell5.Append(paragraph14);
                    tableCell5.Append(paragraph15);
                }

                if (pf.PlatformType == "Wrap" && pf.PlatformName == "GrowWrap")
                {
                    Paragraph paragraph16 = new Paragraph() { RsidParagraphMarkRevision = "007C66BD", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties16 = new ParagraphProperties();
                    SuppressAutoHyphens suppressAutoHyphens16 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines16 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification6 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties15 = new ParagraphMarkRunProperties();
                    RunFonts runFonts41 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize40 = new FontSize() { Val = "18" };
                    Languages languages38 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties15.Append(runFonts41);
                    paragraphMarkRunProperties15.Append(fontSize40);
                    paragraphMarkRunProperties15.Append(languages38);

                    paragraphProperties16.Append(suppressAutoHyphens16);
                    paragraphProperties16.Append(spacingBetweenLines16);
                    paragraphProperties16.Append(justification6);
                    paragraphProperties16.Append(paragraphMarkRunProperties15);

                    Run run27 = new Run() { RsidRunProperties = "007C66BD" };

                    RunProperties runProperties27 = new RunProperties();
                    RunFonts runFonts42 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize41 = new FontSize() { Val = "18" };
                    // Highlight highlight4 = new Highlight() { Val = HighlightColorValues.Yellow };
                    Languages languages39 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties27.Append(runFonts42);
                    runProperties27.Append(fontSize41);
                    // runProperties27.Append(highlight4);
                    runProperties27.Append(languages39);
                    Text text26 = new Text();
                    text26.Text = "Grow Wrap";

                    run27.Append(runProperties27);
                    run27.Append(text26);

                    Run run28 = new Run() { RsidRunProperties = "007C66BD" };

                    RunProperties runProperties28 = new RunProperties();
                    RunFonts runFonts43 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize42 = new FontSize() { Val = "18" };
                    Languages languages40 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties28.Append(runFonts43);
                    runProperties28.Append(fontSize42);
                    runProperties28.Append(languages40);
                    Text text27 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text27.Text = " is a wrap service that combines all your investments like managed funds, separately managed accounts (SMAs), term deposits, direct shares under one administration and reporting umbrella with transactions made through a central cash account.";

                    run28.Append(runProperties28);
                    run28.Append(text27);

                    paragraph16.Append(paragraphProperties16);
                    paragraph16.Append(run27);
                    paragraph16.Append(run28);

                    Paragraph paragraph17 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties17 = new ParagraphProperties();
                    SuppressAutoHyphens suppressAutoHyphens17 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines17 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification7 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties16 = new ParagraphMarkRunProperties();
                    RunFonts runFonts44 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Calibri" };
                    FontSize fontSize43 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript24 = new FontSizeComplexScript() { Val = "20" };
                    Languages languages41 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties16.Append(runFonts44);
                    paragraphMarkRunProperties16.Append(fontSize43);
                    paragraphMarkRunProperties16.Append(fontSizeComplexScript24);
                    paragraphMarkRunProperties16.Append(languages41);

                    paragraphProperties17.Append(suppressAutoHyphens17);
                    paragraphProperties17.Append(spacingBetweenLines17);
                    paragraphProperties17.Append(justification7);
                    paragraphProperties17.Append(paragraphMarkRunProperties16);

                    paragraph17.Append(paragraphProperties17);
                    tableCell5.Append(paragraph16);
                    tableCell5.Append(paragraph17);

                }

                if (pf.PlatformType == "MasterTrust")
                {
                    Paragraph paragraph18 = new Paragraph() { RsidParagraphMarkRevision = "007C66BD", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties18 = new ParagraphProperties();
                    SuppressAutoHyphens suppressAutoHyphens18 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines18 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification8 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties17 = new ParagraphMarkRunProperties();
                    RunFonts runFonts45 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize44 = new FontSize() { Val = "18" };
                    Languages languages42 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties17.Append(runFonts45);
                    paragraphMarkRunProperties17.Append(fontSize44);
                    paragraphMarkRunProperties17.Append(languages42);

                    paragraphProperties18.Append(suppressAutoHyphens18);
                    paragraphProperties18.Append(spacingBetweenLines18);
                    paragraphProperties18.Append(justification8);
                    paragraphProperties18.Append(paragraphMarkRunProperties17);

                    Run run29 = new Run();

                    RunProperties runProperties29 = new RunProperties();
                    RunFonts runFonts46 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize45 = new FontSize() { Val = "18" };
                    // Highlight highlight5 = new Highlight() { Val = HighlightColorValues.Yellow };
                    Languages languages43 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties29.Append(runFonts46);
                    runProperties29.Append(fontSize45);
                    //  runProperties29.Append(highlight5);
                    runProperties29.Append(languages43);
                    Text text28 = new Text();
                    text28.Text = pf.SubType;

                    run29.Append(runProperties29);
                    run29.Append(text28);

                    Run run30 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties30 = new RunProperties();
                    RunFonts runFonts47 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize46 = new FontSize() { Val = "18" };
                    Languages languages44 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties30.Append(runFonts47);
                    runProperties30.Append(fontSize46);
                    runProperties30.Append(languages44);
                    Text text29 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text29.Text = " ";

                    run30.Append(runProperties30);
                    run30.Append(text29);

                    Run run31 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties31 = new RunProperties();
                    RunFonts runFonts48 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "ZurichBT-Roman" };
                    FontSize fontSize47 = new FontSize() { Val = "18" };
                    Languages languages45 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties31.Append(runFonts48);
                    runProperties31.Append(fontSize47);
                    runProperties31.Append(languages45);
                    Text text30 = new Text();
                    text30.Text = "is";

                    run31.Append(runProperties31);
                    run31.Append(text30);

                    Run run32 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties32 = new RunProperties();
                    RunFonts runFonts49 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize48 = new FontSize() { Val = "18" };
                    Languages languages46 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties32.Append(runFonts49);
                    runProperties32.Append(fontSize48);
                    runProperties32.Append(languages46);
                    Text text31 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text31.Text = " a master trust that allows you to hold a portfolio of investments under one umbrella. ";

                    run32.Append(runProperties32);
                    run32.Append(text31);

                    paragraph18.Append(paragraphProperties18);
                    paragraph18.Append(run29);
                    paragraph18.Append(run30);
                    paragraph18.Append(run31);
                    paragraph18.Append(run32);

                    tableCell5.Append(paragraph18);

                }


                tableRow3.Append(tableCell4);
                tableRow3.Append(tableCell5);

                table2.Append(tableProperties2);
                table2.Append(tableGrid2);
                table2.Append(tableRow2);
                table2.Append(tableRow3);

                Paragraph paragraph19 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties19 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens19 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines19 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties18 = new ParagraphMarkRunProperties();
                RunFonts runFonts50 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize49 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript25 = new FontSizeComplexScript() { Val = "20" };
                Languages languages47 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties18.Append(runFonts50);
                paragraphMarkRunProperties18.Append(fontSize49);
                paragraphMarkRunProperties18.Append(fontSizeComplexScript25);
                paragraphMarkRunProperties18.Append(languages47);

                paragraphProperties19.Append(suppressAutoHyphens19);
                paragraphProperties19.Append(spacingBetweenLines19);
                paragraphProperties19.Append(paragraphMarkRunProperties18);

                paragraph19.Append(paragraphProperties19);

                Paragraph paragraph20 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties20 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens20 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines20 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties19 = new ParagraphMarkRunProperties();
                RunFonts runFonts51 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize50 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript26 = new FontSizeComplexScript() { Val = "20" };
                Languages languages48 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties19.Append(runFonts51);
                paragraphMarkRunProperties19.Append(fontSize50);
                paragraphMarkRunProperties19.Append(fontSizeComplexScript26);
                paragraphMarkRunProperties19.Append(languages48);

                paragraphProperties20.Append(suppressAutoHyphens20);
                paragraphProperties20.Append(spacingBetweenLines20);
                paragraphProperties20.Append(paragraphMarkRunProperties19);

                paragraph20.Append(paragraphProperties20);

                Table table3 = new Table();

                TableProperties tableProperties3 = new TableProperties();
                TableWidth tableWidth3 = new TableWidth() { Width = "0", Type = TableWidthUnitValues.Auto };
                TableLayout tableLayout2 = new TableLayout() { Type = TableLayoutValues.Fixed };
                TableLook tableLook3 = new TableLook() { Val = "0000", FirstRow = false, LastRow = false, FirstColumn = false, LastColumn = false, NoHorizontalBand = false, NoVerticalBand = false };

                tableProperties3.Append(tableWidth3);
                tableProperties3.Append(tableLayout2);
                tableProperties3.Append(tableLook3);

                TableGrid tableGrid3 = new TableGrid();
                GridColumn gridColumn4 = new GridColumn() { Width = "1809" };
                GridColumn gridColumn5 = new GridColumn() { Width = "7797" };

                tableGrid3.Append(gridColumn4);
                tableGrid3.Append(gridColumn5);

                TableRow tableRow4 = new TableRow() { RsidTableRowMarkRevision = "00482D19", RsidTableRowAddition = "001A4A50", RsidTableRowProperties = "00A85FEB" };

                TableRowProperties tableRowProperties2 = new TableRowProperties();
                TableRowHeight tableRowHeight2 = new TableRowHeight() { Val = (UInt32Value)567U };

                tableRowProperties2.Append(tableRowHeight2);

                TableCell tableCell6 = new TableCell();

                TableCellProperties tableCellProperties6 = new TableCellProperties();
                TableCellWidth tableCellWidth6 = new TableCellWidth() { Width = "1809", Type = TableWidthUnitValues.Dxa };
                Shading shading2 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "auto" };

                tableCellProperties6.Append(tableCellWidth6);
                tableCellProperties6.Append(shading2);

                Paragraph paragraph21 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties21 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens21 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines21 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification9 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties20 = new ParagraphMarkRunProperties();
                RunFonts runFonts52 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize51 = new FontSize() { Val = "18" };
                Languages languages49 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties20.Append(runFonts52);
                paragraphMarkRunProperties20.Append(fontSize51);
                paragraphMarkRunProperties20.Append(languages49);

                paragraphProperties21.Append(suppressAutoHyphens21);
                paragraphProperties21.Append(spacingBetweenLines21);
                paragraphProperties21.Append(justification9);
                paragraphProperties21.Append(paragraphMarkRunProperties20);

                Run run33 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties33 = new RunProperties();
                RunFonts runFonts53 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Bold bold3 = new Bold();
                Color color25 = new Color() { Val = "393939" };
                FontSize fontSize52 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript27 = new FontSizeComplexScript() { Val = "18" };
                Languages languages50 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

                runProperties33.Append(runFonts53);
                runProperties33.Append(bold3);
                runProperties33.Append(color25);
                runProperties33.Append(fontSize52);
                runProperties33.Append(fontSizeComplexScript27);
                runProperties33.Append(languages50);
                Text text32 = new Text();
                text32.Text = "Advice";

                run33.Append(runProperties33);
                run33.Append(text32);

                paragraph21.Append(paragraphProperties21);
                paragraph21.Append(run33);

                tableCell6.Append(tableCellProperties6);
                tableCell6.Append(paragraph21);

                TableCell tableCell7 = new TableCell();

                TableCellProperties tableCellProperties7 = new TableCellProperties();
                TableCellWidth tableCellWidth7 = new TableCellWidth() { Width = "7797", Type = TableWidthUnitValues.Dxa };
                Shading shading3 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "auto" };

                tableCellProperties7.Append(tableCellWidth7);
                tableCellProperties7.Append(shading3);

                Paragraph paragraph22 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties22 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens22 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines22 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification10 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties21 = new ParagraphMarkRunProperties();
                RunFonts runFonts54 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Times New Roman" };
                FontSize fontSize53 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript28 = new FontSizeComplexScript() { Val = "20" };
                Languages languages51 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties21.Append(runFonts54);
                paragraphMarkRunProperties21.Append(fontSize53);
                paragraphMarkRunProperties21.Append(fontSizeComplexScript28);
                paragraphMarkRunProperties21.Append(languages51);

                paragraphProperties22.Append(suppressAutoHyphens22);
                paragraphProperties22.Append(spacingBetweenLines22);
                paragraphProperties22.Append(justification10);
                paragraphProperties22.Append(paragraphMarkRunProperties21);

                Run run34 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties34 = new RunProperties();
                RunFonts runFonts55 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Times New Roman" };
                Color color26 = new Color() { Val = "FF0000" };
                FontSize fontSize54 = new FontSize() { Val = "18" };
                Languages languages52 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties34.Append(runFonts55);
                runProperties34.Append(color26);
                runProperties34.Append(fontSize54);
                runProperties34.Append(languages52);
                Text text33 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text33.Text = "Copy text from Strategy recommendation that is related to the investment product above. ";

                run34.Append(runProperties34);
                run34.Append(text33);

                paragraph22.Append(paragraphProperties22);
                paragraph22.Append(run34);

                tableCell7.Append(tableCellProperties7);
                tableCell7.Append(paragraph22);

                tableRow4.Append(tableRowProperties2);
                tableRow4.Append(tableCell6);
                tableRow4.Append(tableCell7);

                table3.Append(tableProperties3);
                table3.Append(tableGrid3);
                table3.Append(tableRow4);

                Paragraph paragraph23 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties23 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens23 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines23 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties22 = new ParagraphMarkRunProperties();
                RunFonts runFonts56 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize55 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript29 = new FontSizeComplexScript() { Val = "20" };
                Languages languages53 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties22.Append(runFonts56);
                paragraphMarkRunProperties22.Append(fontSize55);
                paragraphMarkRunProperties22.Append(fontSizeComplexScript29);
                paragraphMarkRunProperties22.Append(languages53);

                paragraphProperties23.Append(suppressAutoHyphens23);
                paragraphProperties23.Append(spacingBetweenLines23);
                paragraphProperties23.Append(paragraphMarkRunProperties22);

                paragraph23.Append(paragraphProperties23);

                Paragraph paragraph24 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties24 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens24 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines24 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties23 = new ParagraphMarkRunProperties();
                RunFonts runFonts57 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize56 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript30 = new FontSizeComplexScript() { Val = "20" };
                Languages languages54 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties23.Append(runFonts57);
                paragraphMarkRunProperties23.Append(fontSize56);
                paragraphMarkRunProperties23.Append(fontSizeComplexScript30);
                paragraphMarkRunProperties23.Append(languages54);

                paragraphProperties24.Append(suppressAutoHyphens24);
                paragraphProperties24.Append(spacingBetweenLines24);
                paragraphProperties24.Append(paragraphMarkRunProperties23);

                paragraph24.Append(paragraphProperties24);

                Paragraph paragraph25 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties25 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens25 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines25 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties24 = new ParagraphMarkRunProperties();
                RunFonts runFonts58 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize57 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript31 = new FontSizeComplexScript() { Val = "20" };
                Languages languages55 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties24.Append(runFonts58);
                paragraphMarkRunProperties24.Append(fontSize57);
                paragraphMarkRunProperties24.Append(fontSizeComplexScript31);
                paragraphMarkRunProperties24.Append(languages55);

                paragraphProperties25.Append(suppressAutoHyphens25);
                paragraphProperties25.Append(spacingBetweenLines25);
                paragraphProperties25.Append(paragraphMarkRunProperties24);
                CommentRangeStart commentRangeStart1 = new CommentRangeStart() { Id = "2" };
                CommentRangeEnd commentRangeEnd1 = new CommentRangeEnd() { Id = "2" };

                paragraph25.Append(paragraphProperties25);
                paragraph25.Append(commentRangeStart1);
                paragraph25.Append(commentRangeEnd1);

                Paragraph paragraph26 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties26 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens26 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines26 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties25 = new ParagraphMarkRunProperties();
                RunFonts runFonts59 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize58 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript32 = new FontSizeComplexScript() { Val = "20" };
                Languages languages56 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties25.Append(runFonts59);
                paragraphMarkRunProperties25.Append(fontSize58);
                paragraphMarkRunProperties25.Append(fontSizeComplexScript32);
                paragraphMarkRunProperties25.Append(languages56);

                paragraphProperties26.Append(suppressAutoHyphens26);
                paragraphProperties26.Append(spacingBetweenLines26);
                paragraphProperties26.Append(paragraphMarkRunProperties25);

                paragraph26.Append(paragraphProperties26);

                Table table4 = new Table();

                TableProperties tableProperties4 = new TableProperties();
                TableWidth tableWidth4 = new TableWidth() { Width = "9606", Type = TableWidthUnitValues.Dxa };
                TableLayout tableLayout3 = new TableLayout() { Type = TableLayoutValues.Fixed };
                TableLook tableLook4 = new TableLook() { Val = "0000", FirstRow = false, LastRow = false, FirstColumn = false, LastColumn = false, NoHorizontalBand = false, NoVerticalBand = false };

                tableProperties4.Append(tableWidth4);
                tableProperties4.Append(tableLayout3);
                tableProperties4.Append(tableLook4);

                TableGrid tableGrid4 = new TableGrid();
                GridColumn gridColumn6 = new GridColumn() { Width = "1809" };
                GridColumn gridColumn7 = new GridColumn() { Width = "7797" };

                tableGrid4.Append(gridColumn6);
                tableGrid4.Append(gridColumn7);

                TableRow tableRow5 = new TableRow() { RsidTableRowMarkRevision = "00482D19", RsidTableRowAddition = "001A4A50", RsidTableRowProperties = "00A85FEB" };

                TableRowProperties tableRowProperties3 = new TableRowProperties();
                TableRowHeight tableRowHeight3 = new TableRowHeight() { Val = (UInt32Value)851U };

                tableRowProperties3.Append(tableRowHeight3);

                TableCell tableCell8 = new TableCell();

                TableCellProperties tableCellProperties8 = new TableCellProperties();
                TableCellWidth tableCellWidth8 = new TableCellWidth() { Width = "1809", Type = TableWidthUnitValues.Dxa };
                Shading shading4 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "auto" };

                tableCellProperties8.Append(tableCellWidth8);
                tableCellProperties8.Append(shading4);

                Paragraph paragraph27 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties27 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens27 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines27 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties26 = new ParagraphMarkRunProperties();
                RunFonts runFonts60 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                FontSize fontSize59 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript33 = new FontSizeComplexScript() { Val = "18" };
                Languages languages57 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties26.Append(runFonts60);
                paragraphMarkRunProperties26.Append(fontSize59);
                paragraphMarkRunProperties26.Append(fontSizeComplexScript33);
                paragraphMarkRunProperties26.Append(languages57);

                paragraphProperties27.Append(suppressAutoHyphens27);
                paragraphProperties27.Append(spacingBetweenLines27);
                paragraphProperties27.Append(paragraphMarkRunProperties26);

                Run run35 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties35 = new RunProperties();
                RunFonts runFonts61 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Bold bold4 = new Bold();
                Color color27 = new Color() { Val = "393939" };
                FontSize fontSize60 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript34 = new FontSizeComplexScript() { Val = "18" };
                Languages languages58 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

                runProperties35.Append(runFonts61);
                runProperties35.Append(bold4);
                runProperties35.Append(color27);
                runProperties35.Append(fontSize60);
                runProperties35.Append(fontSizeComplexScript34);
                runProperties35.Append(languages58);
                Text text34 = new Text();
                text34.Text = "Benefits";

                run35.Append(runProperties35);
                run35.Append(text34);

                paragraph27.Append(paragraphProperties27);
                paragraph27.Append(run35);

                tableCell8.Append(tableCellProperties8);
                tableCell8.Append(paragraph27);

                TableCell tableCell9 = new TableCell();

                TableCellProperties tableCellProperties9 = new TableCellProperties();
                TableCellWidth tableCellWidth9 = new TableCellWidth() { Width = "7797", Type = TableWidthUnitValues.Dxa };
                Shading shading5 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "auto" };

                tableCellProperties9.Append(tableCellWidth9);
                tableCellProperties9.Append(shading5);

                tableCell9.Append(tableCellProperties9);

                Paragraph paragraph28 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties28 = new ParagraphProperties();

                NumberingProperties numberingProperties1 = new NumberingProperties();
                NumberingLevelReference numberingLevelReference1 = new NumberingLevelReference() { Val = 0 };
                NumberingId numberingId1 = new NumberingId() { Val = 1 };

                numberingProperties1.Append(numberingLevelReference1);
                numberingProperties1.Append(numberingId1);
                SuppressAutoHyphens suppressAutoHyphens28 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines28 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification11 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties27 = new ParagraphMarkRunProperties();
                RunFonts runFonts62 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize61 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript35 = new FontSizeComplexScript() { Val = "18" };
                Languages languages59 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties27.Append(runFonts62);
                paragraphMarkRunProperties27.Append(fontSize61);
                paragraphMarkRunProperties27.Append(fontSizeComplexScript35);
                paragraphMarkRunProperties27.Append(languages59);

                paragraphProperties28.Append(numberingProperties1);
                paragraphProperties28.Append(suppressAutoHyphens28);
                paragraphProperties28.Append(spacingBetweenLines28);
                paragraphProperties28.Append(justification11);
                paragraphProperties28.Append(paragraphMarkRunProperties27);

                Run run36 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties36 = new RunProperties();
                RunFonts runFonts63 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize62 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript36 = new FontSizeComplexScript() { Val = "18" };
                Languages languages60 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties36.Append(runFonts63);
                runProperties36.Append(fontSize62);
                runProperties36.Append(fontSizeComplexScript36);
                runProperties36.Append(languages60);
                Text text35 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text35.Text = "Investing your funds in our ";

                run36.Append(runProperties36);
                run36.Append(text35);

                Run run37 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties37 = new RunProperties();
                RunFonts runFonts64 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color28 = new Color() { Val = "FF0000" };
                FontSize fontSize63 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript37 = new FontSizeComplexScript() { Val = "18" };
                Languages languages61 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties37.Append(runFonts64);
                runProperties37.Append(color28);
                runProperties37.Append(fontSize63);
                runProperties37.Append(fontSizeComplexScript37);
                runProperties37.Append(languages61);
                Text text36 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text36.Text = "model / recommended ";

                run37.Append(runProperties37);
                run37.Append(text36);

                Run run38 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties38 = new RunProperties();
                RunFonts runFonts65 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize64 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript38 = new FontSizeComplexScript() { Val = "18" };
                Languages languages62 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties38.Append(runFonts65);
                runProperties38.Append(fontSize64);
                runProperties38.Append(fontSizeComplexScript38);
                runProperties38.Append(languages62);
                Text text37 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text37.Text = "portfolio would ensure your portfolio is optimally invested with adequate diversification and a sound investment approach ";

                run38.Append(runProperties38);
                run38.Append(text37);

                Run run39 = new Run() { RsidRunProperties = "00551D0F" };

                RunProperties runProperties39 = new RunProperties();
                RunFonts runFonts66 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color29 = new Color() { Val = "FF0000" };
                FontSize fontSize65 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript39 = new FontSizeComplexScript() { Val = "18" };
                Languages languages63 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties39.Append(runFonts66);
                runProperties39.Append(color29);
                runProperties39.Append(fontSize65);
                runProperties39.Append(fontSizeComplexScript39);
                runProperties39.Append(languages63);
                Text text38 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text38.Text = "with sufficient liquid funds readily available to meet your ";

                run39.Append(runProperties39);
                run39.Append(text38);

                Run run40 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties40 = new RunProperties();
                RunFonts runFonts67 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color30 = new Color() { Val = "FF0000" };
                FontSize fontSize66 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript40 = new FontSizeComplexScript() { Val = "18" };
                Languages languages64 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties40.Append(runFonts67);
                runProperties40.Append(color30);
                runProperties40.Append(fontSize66);
                runProperties40.Append(fontSizeComplexScript40);
                runProperties40.Append(languages64);
                Text text39 = new Text();
                text39.Text = "pension payment requirements / investment drawdowns.";

                run40.Append(runProperties40);
                run40.Append(text39);

                paragraph28.Append(paragraphProperties28);
                paragraph28.Append(run36);
                paragraph28.Append(run37);
                paragraph28.Append(run38);
                paragraph28.Append(run39);
                paragraph28.Append(run40);
                tableCell9.Append(paragraph28);


                var notAlignedVal = new List<string>();
                var alignedVal = new List<string>();
                var growthDefensive = new List<string>();
                var existingGreater = new List<string>();
                var count = 0;
                if (clientProducts.Count() > 0)
                {
                    count++;
                    var growth = clientWeights.Where(x => x.name == "Total Growth").FirstOrDefault();
                    var defensive = clientWeights.Where(x => x.name == "Total Defensive").FirstOrDefault();
                    if (growth != null && defensive != null)
                    {
                        var riskProfile = context.RiskProfile.Where(y => y.RiskProfile1 == clientDetails.ClientRiskProfile.Trim()).FirstOrDefault();
                        if (riskProfile != null)
                        {
                            if (growth.proposed >= riskProfile.GrowthMin && growth.proposed <= riskProfile.GrowthMax)
                            {
                                alignedVal.Add(clientDetails.ClientName);
                            }
                            if (growth.proposed > 25 && defensive.proposed > 25)
                            {
                                growthDefensive.Add(clientDetails.ClientName);
                            }

                            if (growth.current > growth.proposed)
                            {
                                existingGreater.Add("Client");
                            }

                        }
                    }
                }
                if (clientDetails.MaritalStatus == "M")
                {
                    if (partnerProducts.Count() > 0)
                    {
                        count++;
                        var growth = partnerWeights.Where(x => x.name == "Total Growth").FirstOrDefault();
                        var defensive = clientWeights.Where(x => x.name == "Total Defensive").FirstOrDefault();
                        if (growth != null && defensive != null)
                        {
                            var riskProfile = context.RiskProfile.Where(y => y.RiskProfile1 == clientDetails.PartnerRiskProfile.Trim()).FirstOrDefault();
                            if (riskProfile != null)
                            {
                                if (growth.proposed >= riskProfile.GrowthMin && growth.proposed <= riskProfile.GrowthMax)
                                {
                                    alignedVal.Add(clientDetails.PartnerName);
                                }
                                else
                                {
                                    notAlignedVal.Add(clientDetails.PartnerName);
                                }

                                if (growth.proposed > 25 && defensive.proposed > 25)
                                {
                                    growthDefensive.Add(clientDetails.PartnerName);
                                }
                                if (growth.current > growth.proposed)
                                {
                                    existingGreater.Add("Partner");
                                }
                            }
                        }
                    }

                    if (jointProducts.Count() > 0)
                    {
                        count++;
                        var growth = jointWeights.Where(x => x.name == "Total Growth").FirstOrDefault();
                        var defensive = clientWeights.Where(x => x.name == "Total Defensive").FirstOrDefault();
                        if (growth != null && defensive != null)
                        {
                            var riskProfile = context.RiskProfile.Where(y => y.RiskProfile1 == clientDetails.JointRiskProfile.Trim()).FirstOrDefault();
                            if (riskProfile != null)
                            {
                                if (growth.proposed >= riskProfile.GrowthMin && growth.proposed <= riskProfile.GrowthMax)
                                {
                                    alignedVal.Add("Joint");
                                }
                                else
                                {
                                    notAlignedVal.Add("Joint");
                                }

                                if (growth.proposed > 25 && defensive.proposed > 25)
                                {
                                    growthDefensive.Add("Joint");
                                }
                                if (growth.current > growth.proposed)
                                {
                                    existingGreater.Add("Joint");
                                }
                            }
                        }
                    }
                }

                if (alignedVal.Count() == count || notAlignedVal.Count() == count)
                {
                    Paragraph paragraph29 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties29 = new ParagraphProperties();

                    NumberingProperties numberingProperties2 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference2 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId2 = new NumberingId() { Val = 1 };

                    numberingProperties2.Append(numberingLevelReference2);
                    numberingProperties2.Append(numberingId2);
                    SuppressAutoHyphens suppressAutoHyphens29 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines29 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification12 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties28 = new ParagraphMarkRunProperties();
                    RunFonts runFonts68 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize67 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript41 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages65 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties28.Append(runFonts68);
                    paragraphMarkRunProperties28.Append(fontSize67);
                    paragraphMarkRunProperties28.Append(fontSizeComplexScript41);
                    paragraphMarkRunProperties28.Append(languages65);

                    paragraphProperties29.Append(numberingProperties2);
                    paragraphProperties29.Append(suppressAutoHyphens29);
                    paragraphProperties29.Append(spacingBetweenLines29);
                    paragraphProperties29.Append(justification12);
                    paragraphProperties29.Append(paragraphMarkRunProperties28);

                    Run run41 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties41 = new RunProperties();
                    RunFonts runFonts69 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize68 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript42 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages66 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties41.Append(runFonts69);
                    runProperties41.Append(fontSize68);
                    runProperties41.Append(fontSizeComplexScript42);
                    runProperties41.Append(languages66);
                    Text text40 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text40.Text = "Our ";

                    run41.Append(runProperties41);
                    run41.Append(text40);

                    Run run42 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties42 = new RunProperties();
                    RunFonts runFonts70 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    Color color31 = new Color() { Val = "FF0000" };
                    FontSize fontSize69 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript43 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages67 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties42.Append(runFonts70);
                    runProperties42.Append(color31);
                    runProperties42.Append(fontSize69);
                    runProperties42.Append(fontSizeComplexScript43);
                    runProperties42.Append(languages67);
                    Text text41 = new Text();
                    text41.Text = "model / recommended";

                    run42.Append(runProperties42);
                    run42.Append(text41);

                    Run run43 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties43 = new RunProperties();
                    RunFonts runFonts71 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize70 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript44 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages68 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties43.Append(runFonts71);
                    runProperties43.Append(fontSize70);
                    runProperties43.Append(fontSizeComplexScript44);
                    runProperties43.Append(languages68);
                    Text text42 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text42.Text = " portfolios look to maximise your return to help you meet your financial needs and objectives";

                    run43.Append(runProperties43);
                    run43.Append(text42);

                    Run run44 = new Run();

                    RunProperties runProperties44 = new RunProperties();
                    RunFonts runFonts72 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize71 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript45 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages69 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties44.Append(runFonts72);
                    runProperties44.Append(fontSize71);
                    runProperties44.Append(fontSizeComplexScript45);
                    runProperties44.Append(languages69);
                    Text text43 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text43.Text = " ";

                    run44.Append(runProperties44);
                    run44.Append(text43);

                    paragraph29.Append(paragraphProperties29);
                    paragraph29.Append(run41);
                    paragraph29.Append(run42);
                    paragraph29.Append(run43);
                    paragraph29.Append(run44);
                    if (alignedVal.Count() == count)
                    {
                        Run run46 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties46 = new RunProperties();
                        RunFonts runFonts74 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize73 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript47 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages71 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties46.Append(runFonts74);
                        runProperties46.Append(fontSize73);
                        runProperties46.Append(fontSizeComplexScript47);
                        runProperties46.Append(languages71);
                        Text text45 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text45.Text = ",whilst adhering to your tolerance to risk.";

                        run46.Append(runProperties46);
                        run46.Append(text45);
                        paragraph29.Append(run46);
                    }

                    tableCell9.Append(paragraph29);
                }
                else
                {
                    foreach (String s in alignedVal)
                    {
                        Paragraph paragraph29 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                        ParagraphProperties paragraphProperties29 = new ParagraphProperties();

                        NumberingProperties numberingProperties2 = new NumberingProperties();
                        NumberingLevelReference numberingLevelReference2 = new NumberingLevelReference() { Val = 0 };
                        NumberingId numberingId2 = new NumberingId() { Val = 1 };

                        numberingProperties2.Append(numberingLevelReference2);
                        numberingProperties2.Append(numberingId2);
                        SuppressAutoHyphens suppressAutoHyphens29 = new SuppressAutoHyphens();
                        SpacingBetweenLines spacingBetweenLines29 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                        Justification justification12 = new Justification() { Val = JustificationValues.Both };

                        ParagraphMarkRunProperties paragraphMarkRunProperties28 = new ParagraphMarkRunProperties();
                        RunFonts runFonts68 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize67 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript41 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages65 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        paragraphMarkRunProperties28.Append(runFonts68);
                        paragraphMarkRunProperties28.Append(fontSize67);
                        paragraphMarkRunProperties28.Append(fontSizeComplexScript41);
                        paragraphMarkRunProperties28.Append(languages65);

                        paragraphProperties29.Append(numberingProperties2);
                        paragraphProperties29.Append(suppressAutoHyphens29);
                        paragraphProperties29.Append(spacingBetweenLines29);
                        paragraphProperties29.Append(justification12);
                        paragraphProperties29.Append(paragraphMarkRunProperties28);

                        Run run41 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties41 = new RunProperties();
                        RunFonts runFonts69 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize68 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript42 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages66 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties41.Append(runFonts69);
                        runProperties41.Append(fontSize68);
                        runProperties41.Append(fontSizeComplexScript42);
                        runProperties41.Append(languages66);
                        Text text40 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        if (s == "Joint")
                        {
                            text40.Text = clientDetails.ClientName + " and " + clientDetails.PartnerName + ", Our ";
                        }
                        else
                        {
                            text40.Text = s + ", Our ";
                        }


                        run41.Append(runProperties41);
                        run41.Append(text40);

                        Run run42 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties42 = new RunProperties();
                        RunFonts runFonts70 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        Color color31 = new Color() { Val = "FF0000" };
                        FontSize fontSize69 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript43 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages67 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties42.Append(runFonts70);
                        runProperties42.Append(color31);
                        runProperties42.Append(fontSize69);
                        runProperties42.Append(fontSizeComplexScript43);
                        runProperties42.Append(languages67);
                        Text text41 = new Text();
                        text41.Text = "model / recommended";

                        run42.Append(runProperties42);
                        run42.Append(text41);

                        Run run43 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties43 = new RunProperties();
                        RunFonts runFonts71 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize70 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript44 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages68 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties43.Append(runFonts71);
                        runProperties43.Append(fontSize70);
                        runProperties43.Append(fontSizeComplexScript44);
                        runProperties43.Append(languages68);
                        Text text42 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text42.Text = " portfolios look to maximise your return to help you meet your financial needs and objectives";

                        run43.Append(runProperties43);
                        run43.Append(text42);

                        Run run44 = new Run();

                        RunProperties runProperties44 = new RunProperties();
                        RunFonts runFonts72 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize71 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript45 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages69 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties44.Append(runFonts72);
                        runProperties44.Append(fontSize71);
                        runProperties44.Append(fontSizeComplexScript45);
                        runProperties44.Append(languages69);
                        Text text43 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text43.Text = " ";

                        run44.Append(runProperties44);
                        run44.Append(text43);

                        paragraph29.Append(paragraphProperties29);
                        paragraph29.Append(run41);
                        paragraph29.Append(run42);
                        paragraph29.Append(run43);
                        paragraph29.Append(run44);

                        Run run46 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties46 = new RunProperties();
                        RunFonts runFonts74 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize73 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript47 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages71 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties46.Append(runFonts74);
                        runProperties46.Append(fontSize73);
                        runProperties46.Append(fontSizeComplexScript47);
                        runProperties46.Append(languages71);
                        Text text45 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text45.Text = ",whilst adhering to your tolerance to risk.";

                        run46.Append(runProperties46);
                        run46.Append(text45);
                        paragraph29.Append(run46);


                        tableCell9.Append(paragraph29);
                    }
                    foreach (String s in notAlignedVal)
                    {
                        Paragraph paragraph29 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                        ParagraphProperties paragraphProperties29 = new ParagraphProperties();

                        NumberingProperties numberingProperties2 = new NumberingProperties();
                        NumberingLevelReference numberingLevelReference2 = new NumberingLevelReference() { Val = 0 };
                        NumberingId numberingId2 = new NumberingId() { Val = 1 };

                        numberingProperties2.Append(numberingLevelReference2);
                        numberingProperties2.Append(numberingId2);
                        SuppressAutoHyphens suppressAutoHyphens29 = new SuppressAutoHyphens();
                        SpacingBetweenLines spacingBetweenLines29 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                        Justification justification12 = new Justification() { Val = JustificationValues.Both };

                        ParagraphMarkRunProperties paragraphMarkRunProperties28 = new ParagraphMarkRunProperties();
                        RunFonts runFonts68 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize67 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript41 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages65 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        paragraphMarkRunProperties28.Append(runFonts68);
                        paragraphMarkRunProperties28.Append(fontSize67);
                        paragraphMarkRunProperties28.Append(fontSizeComplexScript41);
                        paragraphMarkRunProperties28.Append(languages65);

                        paragraphProperties29.Append(numberingProperties2);
                        paragraphProperties29.Append(suppressAutoHyphens29);
                        paragraphProperties29.Append(spacingBetweenLines29);
                        paragraphProperties29.Append(justification12);
                        paragraphProperties29.Append(paragraphMarkRunProperties28);

                        Run run41 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties41 = new RunProperties();
                        RunFonts runFonts69 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize68 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript42 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages66 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties41.Append(runFonts69);
                        runProperties41.Append(fontSize68);
                        runProperties41.Append(fontSizeComplexScript42);
                        runProperties41.Append(languages66);
                        Text text40 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        if (s == "Joint")
                        {
                            text40.Text = clientDetails.ClientName + " and " + clientDetails.PartnerName + ", Our ";
                        }
                        else
                        {
                            text40.Text = s + ", Our ";
                        }


                        run41.Append(runProperties41);
                        run41.Append(text40);

                        Run run42 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties42 = new RunProperties();
                        RunFonts runFonts70 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        Color color31 = new Color() { Val = "FF0000" };
                        FontSize fontSize69 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript43 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages67 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties42.Append(runFonts70);
                        runProperties42.Append(color31);
                        runProperties42.Append(fontSize69);
                        runProperties42.Append(fontSizeComplexScript43);
                        runProperties42.Append(languages67);
                        Text text41 = new Text();
                        text41.Text = "model / recommended";

                        run42.Append(runProperties42);
                        run42.Append(text41);

                        Run run43 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties43 = new RunProperties();
                        RunFonts runFonts71 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize70 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript44 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages68 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties43.Append(runFonts71);
                        runProperties43.Append(fontSize70);
                        runProperties43.Append(fontSizeComplexScript44);
                        runProperties43.Append(languages68);
                        Text text42 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text42.Text = " portfolios look to maximise your return to help you meet your financial needs and objectives.";

                        run43.Append(runProperties43);
                        run43.Append(text42);



                        paragraph29.Append(paragraphProperties29);
                        paragraph29.Append(run41);
                        paragraph29.Append(run42);
                        paragraph29.Append(run43);
                        tableCell9.Append(paragraph29);
                    }
                }


                //Paragraph paragraph30 = new Paragraph() { RsidParagraphMarkRevision = "00551D0F", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                //ParagraphProperties paragraphProperties30 = new ParagraphProperties();

                //NumberingProperties numberingProperties3 = new NumberingProperties();
                //NumberingLevelReference numberingLevelReference3 = new NumberingLevelReference() { Val = 0 };
                //NumberingId numberingId3 = new NumberingId() { Val = 1 };;

                //numberingProperties3.Append(numberingLevelReference3);
                //numberingProperties3.Append(numberingId3);

                //Tabs tabs3 = new Tabs();
                //TabStop tabStop3 = new TabStop() { Val = TabStopValues.Left, Position = 0 };

                //tabs3.Append(tabStop3);
                //SuppressAutoHyphens suppressAutoHyphens30 = new SuppressAutoHyphens();
                //SpacingBetweenLines spacingBetweenLines30 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                //Justification justification13 = new Justification() { Val = JustificationValues.Both };

                //ParagraphMarkRunProperties paragraphMarkRunProperties29 = new ParagraphMarkRunProperties();
                //RunFonts runFonts75 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                //FontSize fontSize74 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript48 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight7 = new Highlight() { Val = HighlightColorValues.Yellow };
                //Languages languages72 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //paragraphMarkRunProperties29.Append(runFonts75);
                //paragraphMarkRunProperties29.Append(fontSize74);
                //paragraphMarkRunProperties29.Append(fontSizeComplexScript48);
                //paragraphMarkRunProperties29.Append(highlight7);
                //paragraphMarkRunProperties29.Append(languages72);

                //paragraphProperties30.Append(numberingProperties3);
                //paragraphProperties30.Append(tabs3);
                //paragraphProperties30.Append(suppressAutoHyphens30);
                //paragraphProperties30.Append(spacingBetweenLines30);
                //paragraphProperties30.Append(justification13);
                //paragraphProperties30.Append(paragraphMarkRunProperties29);

                //Run run47 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties47 = new RunProperties();
                //RunFonts runFonts76 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                //FontSize fontSize75 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript49 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight8 = new Highlight() { Val = HighlightColorValues.Cyan };
                //Languages languages73 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties47.Append(runFonts76);
                //runProperties47.Append(fontSize75);
                //runProperties47.Append(fontSizeComplexScript49);
                //runProperties47.Append(highlight8);
                //runProperties47.Append(languages73);
                //Text text46 = new Text();
                //text46.Text = "[If recommended portfolio has bias towards growth assets]";

                //run47.Append(runProperties47);
                //run47.Append(text46);

                //Run run48 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties48 = new RunProperties();
                //RunFonts runFonts77 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                //FontSize fontSize76 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript50 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages74 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties48.Append(runFonts77);
                //runProperties48.Append(fontSize76);
                //runProperties48.Append(fontSizeComplexScript50);
                //runProperties48.Append(languages74);
                //Text text47 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text47.Text = " The recommended portfolio provides potential to grow your capital through exposure to growth orientated asset classes ";

                //run48.Append(runProperties48);
                //run48.Append(text47);

                //Run run49 = new Run() { RsidRunProperties = "00551D0F" };

                //RunProperties runProperties49 = new RunProperties();
                //RunFonts runFonts78 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                //FontSize fontSize77 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript51 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight9 = new Highlight() { Val = HighlightColorValues.Yellow };
                //Languages languages75 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties49.Append(runFonts78);
                //runProperties49.Append(fontSize77);
                //runProperties49.Append(fontSizeComplexScript51);
                //runProperties49.Append(highlight9);
                //runProperties49.Append(languages75);
                //Text text48 = new Text();
                //text48.Text = "like Australian shares, international shares and property.";

                //run49.Append(runProperties49);
                //run49.Append(text48);

                //paragraph30.Append(paragraphProperties30);
                //paragraph30.Append(run47);
                //paragraph30.Append(run48);
                //paragraph30.Append(run49);

                if (growthDefensive.Count() == count)
                {
                    Paragraph paragraph31 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties31 = new ParagraphProperties();

                    NumberingProperties numberingProperties4 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference4 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId4 = new NumberingId() { Val = 1 }; ;

                    numberingProperties4.Append(numberingLevelReference4);
                    numberingProperties4.Append(numberingId4);

                    Tabs tabs4 = new Tabs();
                    TabStop tabStop4 = new TabStop() { Val = TabStopValues.Left, Position = 0 };

                    tabs4.Append(tabStop4);
                    SuppressAutoHyphens suppressAutoHyphens31 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines31 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification14 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties30 = new ParagraphMarkRunProperties();
                    RunFonts runFonts79 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize78 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript52 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages76 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties30.Append(runFonts79);
                    paragraphMarkRunProperties30.Append(fontSize78);
                    paragraphMarkRunProperties30.Append(fontSizeComplexScript52);
                    paragraphMarkRunProperties30.Append(languages76);

                    paragraphProperties31.Append(numberingProperties4);
                    paragraphProperties31.Append(tabs4);
                    paragraphProperties31.Append(suppressAutoHyphens31);
                    paragraphProperties31.Append(spacingBetweenLines31);
                    paragraphProperties31.Append(justification14);
                    paragraphProperties31.Append(paragraphMarkRunProperties30);

                    Run run52 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties52 = new RunProperties();
                    RunFonts runFonts82 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize81 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript55 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages79 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties52.Append(runFonts82);
                    runProperties52.Append(fontSize81);
                    runProperties52.Append(fontSizeComplexScript55);
                    runProperties52.Append(languages79);
                    Text text51 = new Text() { Space = SpaceProcessingModeValues.Preserve };

                    text51.Text = " The recommended portfolio has exposure to growth and defensive assets. Growth assets provide potential to grow your capital while defensive assets help to provide protection from market fluctuations.";

                    run52.Append(runProperties52);
                    run52.Append(text51);

                    paragraph31.Append(paragraphProperties31);
                    paragraph31.Append(run52);

                    tableCell9.Append(paragraph31);
                }
                else
                {
                    foreach (String s in growthDefensive)
                    {
                        Paragraph paragraph31 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                        ParagraphProperties paragraphProperties31 = new ParagraphProperties();

                        NumberingProperties numberingProperties4 = new NumberingProperties();
                        NumberingLevelReference numberingLevelReference4 = new NumberingLevelReference() { Val = 0 };
                        NumberingId numberingId4 = new NumberingId() { Val = 1 }; ;

                        numberingProperties4.Append(numberingLevelReference4);
                        numberingProperties4.Append(numberingId4);

                        Tabs tabs4 = new Tabs();
                        TabStop tabStop4 = new TabStop() { Val = TabStopValues.Left, Position = 0 };

                        tabs4.Append(tabStop4);
                        SuppressAutoHyphens suppressAutoHyphens31 = new SuppressAutoHyphens();
                        SpacingBetweenLines spacingBetweenLines31 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                        Justification justification14 = new Justification() { Val = JustificationValues.Both };

                        ParagraphMarkRunProperties paragraphMarkRunProperties30 = new ParagraphMarkRunProperties();
                        RunFonts runFonts79 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                        FontSize fontSize78 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript52 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages76 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        paragraphMarkRunProperties30.Append(runFonts79);
                        paragraphMarkRunProperties30.Append(fontSize78);
                        paragraphMarkRunProperties30.Append(fontSizeComplexScript52);
                        paragraphMarkRunProperties30.Append(languages76);

                        paragraphProperties31.Append(numberingProperties4);
                        paragraphProperties31.Append(tabs4);
                        paragraphProperties31.Append(suppressAutoHyphens31);
                        paragraphProperties31.Append(spacingBetweenLines31);
                        paragraphProperties31.Append(justification14);
                        paragraphProperties31.Append(paragraphMarkRunProperties30);

                        Run run52 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties52 = new RunProperties();
                        RunFonts runFonts82 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                        FontSize fontSize81 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript55 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages79 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties52.Append(runFonts82);
                        runProperties52.Append(fontSize81);
                        runProperties52.Append(fontSizeComplexScript55);
                        runProperties52.Append(languages79);
                        Text text51 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        if (s == "Joint")
                        {
                            text51.Text = clientDetails.ClientName + " and " + clientDetails.PartnerName + ", The recommended portfolio has exposure to growth and defensive assets. Growth assets provide potential to grow your capital while defensive assets help to provide protection from market fluctuations. ";
                        }
                        else
                        {
                            text51.Text = s + ", The recommended portfolio has exposure to growth and defensive assets. Growth assets provide potential to grow your capital while defensive assets help to provide protection from market fluctuations. ";
                        }
                        run52.Append(runProperties52);
                        run52.Append(text51);

                        paragraph31.Append(paragraphProperties31);
                        paragraph31.Append(run52);

                        tableCell9.Append(paragraph31);
                    }
                }

                foreach(string s in existingGreater)
                { 
                Paragraph paragraph32 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties32 = new ParagraphProperties();

                NumberingProperties numberingProperties5 = new NumberingProperties();
                NumberingLevelReference numberingLevelReference5 = new NumberingLevelReference() { Val = 0 };
                NumberingId numberingId5 = new NumberingId() { Val = 4 };

                numberingProperties5.Append(numberingLevelReference5);
                numberingProperties5.Append(numberingId5);
                SuppressAutoHyphens suppressAutoHyphens32 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines32 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification15 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties31 = new ParagraphMarkRunProperties();
                RunFonts runFonts83 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color32 = new Color() { Val = "000000" };
                FontSize fontSize82 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript56 = new FontSizeComplexScript() { Val = "18" };
                Languages languages80 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties31.Append(runFonts83);
                paragraphMarkRunProperties31.Append(color32);
                paragraphMarkRunProperties31.Append(fontSize82);
                paragraphMarkRunProperties31.Append(fontSizeComplexScript56);
                paragraphMarkRunProperties31.Append(languages80);

                paragraphProperties32.Append(numberingProperties5);
                paragraphProperties32.Append(suppressAutoHyphens32);
                paragraphProperties32.Append(spacingBetweenLines32);
                paragraphProperties32.Append(justification15);
                paragraphProperties32.Append(paragraphMarkRunProperties31);

               

                Run run54 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties54 = new RunProperties();
                RunFonts runFonts85 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize84 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript58 = new FontSizeComplexScript() { Val = "18" };
                Languages languages82 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties54.Append(runFonts85);
                runProperties54.Append(fontSize84);
                runProperties54.Append(fontSizeComplexScript58);
                runProperties54.Append(languages82);
                Text text53 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    if (s == "Joint")
                    {
                        text53.Text = clientDetails.ClientName + " and " + clientDetails.PartnerName + ", Your current portfolio is highly concentrated in growth assets, thereby exposing yourself to excessive risk. Investing the funds as per ";
                    }
                    else if (s == "Client")
                    {
                        text53.Text = clientDetails.ClientName + ", Your current portfolio is highly concentrated in growth assets, thereby exposing yourself to excessive risk. Investing the funds as per ";
                    }
                    else if (s == "Partner")
                    {
                        text53.Text = clientDetails.PartnerName + ", Your current portfolio is highly concentrated in growth assets, thereby exposing yourself to excessive risk. Investing the funds as per ";
                    }


                    run54.Append(runProperties54);
                run54.Append(text53);

                Run run55 = new Run() { RsidRunProperties = "00551D0F" };

                RunProperties runProperties55 = new RunProperties();
                RunFonts runFonts86 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize85 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript59 = new FontSizeComplexScript() { Val = "18" };
                Languages languages83 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties55.Append(runFonts86);
                runProperties55.Append(fontSize85);
                runProperties55.Append(fontSizeComplexScript59);
                runProperties55.Append(languages83);
                Text text54 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text54.Text = "our ";

                run55.Append(runProperties55);
                run55.Append(text54);

                Run run56 = new Run() { RsidRunProperties = "00551D0F" };

                RunProperties runProperties56 = new RunProperties();
                RunFonts runFonts87 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color33 = new Color() { Val = "FF0000" };
                FontSize fontSize86 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript60 = new FontSizeComplexScript() { Val = "18" };
                Languages languages84 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties56.Append(runFonts87);
                runProperties56.Append(color33);
                runProperties56.Append(fontSize86);
                runProperties56.Append(fontSizeComplexScript60);
                runProperties56.Append(languages84);
                Text text55 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text55.Text = "model / recommended portfolio ";

                run56.Append(runProperties56);
                run56.Append(text55);

                Run run57 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties57 = new RunProperties();
                RunFonts runFonts88 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize87 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript61 = new FontSizeComplexScript() { Val = "18" };
                Languages languages85 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties57.Append(runFonts88);
                runProperties57.Append(fontSize87);
                runProperties57.Append(fontSizeComplexScript61);
                runProperties57.Append(languages85);
                Text text56 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text56.Text = "will align your portfolio towards your ";

                run57.Append(runProperties57);
                run57.Append(text56);

                Run run58 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties58 = new RunProperties();
                RunFonts runFonts89 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize88 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript62 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight12 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages86 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties58.Append(runFonts89);
                runProperties58.Append(fontSize88);
                runProperties58.Append(fontSizeComplexScript62);
             
                runProperties58.Append(languages86);
                Text text57 = new Text();
                    if (s == "Joint")
                    {
                        text57.Text = clientDetails.JointRiskProfile;
                    }
                    else if (s == "Client")
                    {
                        text57.Text = clientDetails.ClientRiskProfile;
                    }
                    else if (s == "Partner")
                    {
                        text57.Text = clientDetails.PartnerRiskProfile;
                    }
                  

                run58.Append(runProperties58);
                run58.Append(text57);

                Run run59 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties59 = new RunProperties();
                RunFonts runFonts90 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize89 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript63 = new FontSizeComplexScript() { Val = "18" };
                Languages languages87 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties59.Append(runFonts90);
                runProperties59.Append(fontSize89);
                runProperties59.Append(fontSizeComplexScript63);
                runProperties59.Append(languages87);
                Text text58 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text58.Text = " risk profile. ";

                run59.Append(runProperties59);
                run59.Append(text58);

                paragraph32.Append(paragraphProperties32);
              
                paragraph32.Append(run54);
                paragraph32.Append(run55);
                paragraph32.Append(run56);
                paragraph32.Append(run57);
                paragraph32.Append(run58);
                paragraph32.Append(run59);

                tableCell9.Append(paragraph32);
            
            }

                //Paragraph paragraph33 = new Paragraph() { RsidParagraphMarkRevision = "00551D0F", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                //ParagraphProperties paragraphProperties33 = new ParagraphProperties();

                //NumberingProperties numberingProperties6 = new NumberingProperties();
                //NumberingLevelReference numberingLevelReference6 = new NumberingLevelReference() { Val = 0 };
                //NumberingId numberingId6 = new NumberingId() { Val = 5 };

                //numberingProperties6.Append(numberingLevelReference6);
                //numberingProperties6.Append(numberingId6);
                //SuppressAutoHyphens suppressAutoHyphens33 = new SuppressAutoHyphens();
                //SpacingBetweenLines spacingBetweenLines33 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                //Justification justification16 = new Justification() { Val = JustificationValues.Both };

                //ParagraphMarkRunProperties paragraphMarkRunProperties32 = new ParagraphMarkRunProperties();
                //RunFonts runFonts91 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize90 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript64 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages88 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //paragraphMarkRunProperties32.Append(runFonts91);
                //paragraphMarkRunProperties32.Append(fontSize90);
                //paragraphMarkRunProperties32.Append(fontSizeComplexScript64);
                //paragraphMarkRunProperties32.Append(languages88);

                //paragraphProperties33.Append(numberingProperties6);
                //paragraphProperties33.Append(suppressAutoHyphens33);
                //paragraphProperties33.Append(spacingBetweenLines33);
                //paragraphProperties33.Append(justification16);
                //paragraphProperties33.Append(paragraphMarkRunProperties32);

                //Run run60 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties60 = new RunProperties();
                //RunFonts runFonts92 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize91 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript65 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight13 = new Highlight() { Val = HighlightColorValues.Cyan };
                //Languages languages89 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties60.Append(runFonts92);
                //runProperties60.Append(fontSize91);
                //runProperties60.Append(fontSizeComplexScript65);
                //runProperties60.Append(highlight13);
                //runProperties60.Append(languages89);
                //Text text59 = new Text();
                //text59.Text = "[If cash and fixed interest in portfolio - more than 25%]";

                //run60.Append(runProperties60);
                //run60.Append(text59);

                //Run run61 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties61 = new RunProperties();
                //RunFonts runFonts93 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize92 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript66 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages90 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties61.Append(runFonts93);
                //runProperties61.Append(fontSize92);
                //runProperties61.Append(fontSizeComplexScript66);
                //runProperties61.Append(languages90);
                //Text text60 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text60.Text = " ";

                //run61.Append(runProperties61);
                //run61.Append(text60);

                //Run run62 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties62 = new RunProperties();
                //RunFonts runFonts94 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                //FontSize fontSize93 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript67 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages91 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties62.Append(runFonts94);
                //runProperties62.Append(fontSize93);
                //runProperties62.Append(fontSizeComplexScript67);
                //runProperties62.Append(languages91);
                //Text text61 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text61.Text = "Investing in cash ";

                //run62.Append(runProperties62);
                //run62.Append(text61);

                //Run run63 = new Run() { RsidRunProperties = "00551D0F" };

                //RunProperties runProperties63 = new RunProperties();
                //RunFonts runFonts95 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                //Color color34 = new Color() { Val = "FF0000" };
                //FontSize fontSize94 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript68 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages92 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties63.Append(runFonts95);
                //runProperties63.Append(color34);
                //runProperties63.Append(fontSize94);
                //runProperties63.Append(fontSizeComplexScript68);
                //runProperties63.Append(languages92);
                //Text text62 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text62.Text = "and fixed interest / term deposits ";

                //run63.Append(runProperties63);
                //run63.Append(text62);

                //Run run64 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties64 = new RunProperties();
                //RunFonts runFonts96 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                //FontSize fontSize95 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript69 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages93 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties64.Append(runFonts96);
                //runProperties64.Append(fontSize95);
                //runProperties64.Append(fontSizeComplexScript69);
                //runProperties64.Append(languages93);
                //Text text63 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text63.Text = "will help protect your retirement savings ";

                //run64.Append(runProperties64);
                //run64.Append(text63);

                //Run run65 = new Run() { RsidRunProperties = "00551D0F" };

                //RunProperties runProperties65 = new RunProperties();
                //RunFonts runFonts97 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                //FontSize fontSize96 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript70 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages94 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties65.Append(runFonts97);
                //runProperties65.Append(fontSize96);
                //runProperties65.Append(fontSizeComplexScript70);
                //runProperties65.Append(languages94);
                //Text text64 = new Text();
                //text64.Text = "from market fluctuations.";

                //run65.Append(runProperties65);
                //run65.Append(text64);

                //paragraph33.Append(paragraphProperties33);
                //paragraph33.Append(run60);
                //paragraph33.Append(run61);
                //paragraph33.Append(run62);
                //paragraph33.Append(run63);
                //paragraph33.Append(run64);
                //paragraph33.Append(run65);


                if ((clientDetails.ClientRiskProfile == "Preservation" || clientDetails.ClientRiskProfile == "Defensive") || (clientDetails.PartnerRiskProfile == "Preservation" || clientDetails.PartnerRiskProfile == "Defensive") || (clientDetails.JointRiskProfile == "Preservation" || clientDetails.JointRiskProfile == "Defensive"))
                {
                    Paragraph paragraph35 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties35 = new ParagraphProperties();

                    NumberingProperties numberingProperties8 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference8 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId8 = new NumberingId() { Val = 1 };

                    numberingProperties8.Append(numberingLevelReference8);
                    numberingProperties8.Append(numberingId8);
                    SuppressAutoHyphens suppressAutoHyphens35 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines35 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification18 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties34 = new ParagraphMarkRunProperties();
                    RunFonts runFonts112 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize111 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript85 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages109 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties34.Append(runFonts112);
                    paragraphMarkRunProperties34.Append(fontSize111);
                    paragraphMarkRunProperties34.Append(fontSizeComplexScript85);
                    paragraphMarkRunProperties34.Append(languages109);

                    paragraphProperties35.Append(numberingProperties8);
                    paragraphProperties35.Append(suppressAutoHyphens35);
                    paragraphProperties35.Append(spacingBetweenLines35);
                    paragraphProperties35.Append(justification18);
                    paragraphProperties35.Append(paragraphMarkRunProperties34);



                    Run run80 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties80 = new RunProperties();
                    RunFonts runFonts114 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize113 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript87 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages111 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties80.Append(runFonts114);
                    runProperties80.Append(fontSize113);
                    runProperties80.Append(fontSizeComplexScript87);
                    runProperties80.Append(languages111);
                    Text text79 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    if (((clientDetails.ClientRiskProfile == "Preservation" || clientDetails.ClientRiskProfile == "Defensive") && (clientDetails.PartnerRiskProfile == "Preservation" || clientDetails.PartnerRiskProfile == "Defensive")) || (clientDetails.JointRiskProfile == "Preservation" || clientDetails.JointRiskProfile == "Defensive"))
                    {
                        text79.Text = "The proposed portfolio includes a high exposure to cash and ";
                    }
                    else if (clientDetails.ClientRiskProfile == "Preservation" || clientDetails.ClientRiskProfile == "Defensive")
                    {
                        text79.Text = "The proposed portfolio for " + clientDetails.ClientName + " includes a high exposure to cash and ";
                    }
                    else if (clientDetails.PartnerRiskProfile == "Preservation" || clientDetails.PartnerRiskProfile == "Defensive")
                    {
                        text79.Text = "The proposed portfolio for " + clientDetails.PartnerName + " includes a high exposure to cash and ";
                    }

                    run80.Append(runProperties80);
                    run80.Append(text79);

                    Run run81 = new Run() { RsidRunProperties = "00163414" };

                    RunProperties runProperties81 = new RunProperties();
                    RunFonts runFonts115 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    Color color42 = new Color() { Val = "FF0000" };
                    FontSize fontSize114 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript88 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages112 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties81.Append(runFonts115);
                    runProperties81.Append(color42);
                    runProperties81.Append(fontSize114);
                    runProperties81.Append(fontSizeComplexScript88);
                    runProperties81.Append(languages112);
                    Text text80 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text80.Text = "bonds / fixed interest ";

                    run81.Append(runProperties81);
                    run81.Append(text80);

                    Run run82 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties82 = new RunProperties();
                    RunFonts runFonts116 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize115 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript89 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages113 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties82.Append(runFonts116);
                    runProperties82.Append(fontSize115);
                    runProperties82.Append(fontSizeComplexScript89);
                    runProperties82.Append(languages113);
                    Text text81 = new Text();
                    text81.Text = "which is appropriate for you as you want a high degree of certainty around consistency of income as well as capital preservation and wish to avoid negative returns or loss of capital.";

                    run82.Append(runProperties82);
                    run82.Append(text81);

                    paragraph35.Append(paragraphProperties35);
                    // paragraph35.Append(run79);
                    paragraph35.Append(run80);
                    paragraph35.Append(run81);
                    paragraph35.Append(run82);
                    tableCell9.Append(paragraph35);

                }

                if (clientDetails.ClientRiskProfile == clientDetails.PartnerRiskProfile)
                {

                    Paragraph paragraph36 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties36 = new ParagraphProperties();

                    NumberingProperties numberingProperties9 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference9 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId9 = new NumberingId() { Val = 1 };

                    numberingProperties9.Append(numberingLevelReference9);
                    numberingProperties9.Append(numberingId9);
                    SuppressAutoHyphens suppressAutoHyphens36 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines36 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification19 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties35 = new ParagraphMarkRunProperties();
                    RunFonts runFonts117 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize116 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript90 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages114 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties35.Append(runFonts117);
                    paragraphMarkRunProperties35.Append(fontSize116);
                    paragraphMarkRunProperties35.Append(fontSizeComplexScript90);
                    paragraphMarkRunProperties35.Append(languages114);

                    paragraphProperties36.Append(numberingProperties9);
                    paragraphProperties36.Append(suppressAutoHyphens36);
                    paragraphProperties36.Append(spacingBetweenLines36);
                    paragraphProperties36.Append(justification19);
                    paragraphProperties36.Append(paragraphMarkRunProperties35);



                    Run run85 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties85 = new RunProperties();
                    RunFonts runFonts120 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize119 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript93 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages117 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties85.Append(runFonts120);
                    runProperties85.Append(fontSize119);
                    runProperties85.Append(fontSizeComplexScript93);
                    runProperties85.Append(languages117);
                    Text text84 = new Text();
                    text84.Text = "Investing your funds as per our";

                    run85.Append(runProperties85);
                    run85.Append(text84);

                    Run run86 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties86 = new RunProperties();
                    RunFonts runFonts121 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize120 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript94 = new FontSizeComplexScript() { Val = "18" };
                    Highlight highlight18 = new Highlight() { Val = HighlightColorValues.Yellow };
                    Languages languages118 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties86.Append(runFonts121);
                    runProperties86.Append(fontSize120);
                    runProperties86.Append(fontSizeComplexScript94);
                    runProperties86.Append(highlight18);
                    runProperties86.Append(languages118);
                    Text text85 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text85.Text = " model / recommended ";

                    run86.Append(runProperties86);
                    run86.Append(text85);

                    Run run87 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties87 = new RunProperties();
                    RunFonts runFonts122 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize121 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript95 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages119 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties87.Append(runFonts122);
                    runProperties87.Append(fontSize121);
                    runProperties87.Append(fontSizeComplexScript95);
                    runProperties87.Append(languages119);
                    Text text86 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text86.Text = "portfolio would align your investments with your ";

                    run87.Append(runProperties87);
                    run87.Append(text86);

                    Run run88 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties88 = new RunProperties();
                    RunFonts runFonts123 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize122 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript96 = new FontSizeComplexScript() { Val = "18" };
                    Highlight highlight19 = new Highlight() { Val = HighlightColorValues.Yellow };
                    Languages languages120 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties88.Append(runFonts123);
                    runProperties88.Append(fontSize122);
                    runProperties88.Append(fontSizeComplexScript96);
                    //  runProperties88.Append(highlight19);
                    runProperties88.Append(languages120);
                    Text text87 = new Text();
                    text87.Text = clientDetails.ClientRiskProfile;

                    run88.Append(runProperties88);
                    run88.Append(text87);

                    Run run89 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties89 = new RunProperties();
                    RunFonts runFonts124 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize123 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript97 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages121 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties89.Append(runFonts124);
                    runProperties89.Append(fontSize123);
                    runProperties89.Append(fontSizeComplexScript97);
                    runProperties89.Append(languages121);
                    Text text88 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text88.Text = " risk profile. ";

                    run89.Append(runProperties89);
                    run89.Append(text88);

                    paragraph36.Append(paragraphProperties36);
                    paragraph36.Append(run85);
                    paragraph36.Append(run86);
                    paragraph36.Append(run87);
                    paragraph36.Append(run88);
                    paragraph36.Append(run89);

                    tableCell9.Append(paragraph36);
                }
                else
                {
                    if (clientDetails.ClientRiskProfile != "")
                    {
                        Paragraph paragraph36 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                        ParagraphProperties paragraphProperties36 = new ParagraphProperties();

                        NumberingProperties numberingProperties9 = new NumberingProperties();
                        NumberingLevelReference numberingLevelReference9 = new NumberingLevelReference() { Val = 0 };
                        NumberingId numberingId9 = new NumberingId() { Val = 1 };

                        numberingProperties9.Append(numberingLevelReference9);
                        numberingProperties9.Append(numberingId9);
                        SuppressAutoHyphens suppressAutoHyphens36 = new SuppressAutoHyphens();
                        SpacingBetweenLines spacingBetweenLines36 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                        Justification justification19 = new Justification() { Val = JustificationValues.Both };

                        ParagraphMarkRunProperties paragraphMarkRunProperties35 = new ParagraphMarkRunProperties();
                        RunFonts runFonts117 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize116 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript90 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages114 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        paragraphMarkRunProperties35.Append(runFonts117);
                        paragraphMarkRunProperties35.Append(fontSize116);
                        paragraphMarkRunProperties35.Append(fontSizeComplexScript90);
                        paragraphMarkRunProperties35.Append(languages114);

                        paragraphProperties36.Append(numberingProperties9);
                        paragraphProperties36.Append(suppressAutoHyphens36);
                        paragraphProperties36.Append(spacingBetweenLines36);
                        paragraphProperties36.Append(justification19);
                        paragraphProperties36.Append(paragraphMarkRunProperties35);



                        Run run85 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties85 = new RunProperties();
                        RunFonts runFonts120 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize119 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript93 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages117 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties85.Append(runFonts120);
                        runProperties85.Append(fontSize119);
                        runProperties85.Append(fontSizeComplexScript93);
                        runProperties85.Append(languages117);
                        Text text84 = new Text();
                        text84.Text = "" + clientDetails.ClientName + ", Investing your funds as per our";

                        run85.Append(runProperties85);
                        run85.Append(text84);

                        Run run86 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties86 = new RunProperties();
                        RunFonts runFonts121 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize120 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript94 = new FontSizeComplexScript() { Val = "18" };
                        Highlight highlight18 = new Highlight() { Val = HighlightColorValues.Yellow };
                        Languages languages118 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties86.Append(runFonts121);
                        runProperties86.Append(fontSize120);
                        runProperties86.Append(fontSizeComplexScript94);
                        runProperties86.Append(highlight18);
                        runProperties86.Append(languages118);
                        Text text85 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text85.Text = " model / recommended ";

                        run86.Append(runProperties86);
                        run86.Append(text85);

                        Run run87 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties87 = new RunProperties();
                        RunFonts runFonts122 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize121 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript95 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages119 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties87.Append(runFonts122);
                        runProperties87.Append(fontSize121);
                        runProperties87.Append(fontSizeComplexScript95);
                        runProperties87.Append(languages119);
                        Text text86 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text86.Text = "portfolio would align your investments with your ";

                        run87.Append(runProperties87);
                        run87.Append(text86);

                        Run run88 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties88 = new RunProperties();
                        RunFonts runFonts123 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize122 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript96 = new FontSizeComplexScript() { Val = "18" };
                        Highlight highlight19 = new Highlight() { Val = HighlightColorValues.Yellow };
                        Languages languages120 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties88.Append(runFonts123);
                        runProperties88.Append(fontSize122);
                        runProperties88.Append(fontSizeComplexScript96);
                        //  runProperties88.Append(highlight19);
                        runProperties88.Append(languages120);
                        Text text87 = new Text();
                        text87.Text = clientDetails.ClientRiskProfile;

                        run88.Append(runProperties88);
                        run88.Append(text87);

                        Run run89 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties89 = new RunProperties();
                        RunFonts runFonts124 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize123 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript97 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages121 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties89.Append(runFonts124);
                        runProperties89.Append(fontSize123);
                        runProperties89.Append(fontSizeComplexScript97);
                        runProperties89.Append(languages121);
                        Text text88 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text88.Text = " risk profile. ";

                        run89.Append(runProperties89);
                        run89.Append(text88);

                        paragraph36.Append(paragraphProperties36);
                        paragraph36.Append(run85);
                        paragraph36.Append(run86);
                        paragraph36.Append(run87);
                        paragraph36.Append(run88);
                        paragraph36.Append(run89);

                        tableCell9.Append(paragraph36);
                    }
                    if (clientDetails.ClientRiskProfile != "")
                    {
                        Paragraph paragraph36 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                        ParagraphProperties paragraphProperties36 = new ParagraphProperties();

                        NumberingProperties numberingProperties9 = new NumberingProperties();
                        NumberingLevelReference numberingLevelReference9 = new NumberingLevelReference() { Val = 0 };
                        NumberingId numberingId9 = new NumberingId() { Val = 1 };

                        numberingProperties9.Append(numberingLevelReference9);
                        numberingProperties9.Append(numberingId9);
                        SuppressAutoHyphens suppressAutoHyphens36 = new SuppressAutoHyphens();
                        SpacingBetweenLines spacingBetweenLines36 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                        Justification justification19 = new Justification() { Val = JustificationValues.Both };

                        ParagraphMarkRunProperties paragraphMarkRunProperties35 = new ParagraphMarkRunProperties();
                        RunFonts runFonts117 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize116 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript90 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages114 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        paragraphMarkRunProperties35.Append(runFonts117);
                        paragraphMarkRunProperties35.Append(fontSize116);
                        paragraphMarkRunProperties35.Append(fontSizeComplexScript90);
                        paragraphMarkRunProperties35.Append(languages114);

                        paragraphProperties36.Append(numberingProperties9);
                        paragraphProperties36.Append(suppressAutoHyphens36);
                        paragraphProperties36.Append(spacingBetweenLines36);
                        paragraphProperties36.Append(justification19);
                        paragraphProperties36.Append(paragraphMarkRunProperties35);



                        Run run85 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties85 = new RunProperties();
                        RunFonts runFonts120 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize119 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript93 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages117 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties85.Append(runFonts120);
                        runProperties85.Append(fontSize119);
                        runProperties85.Append(fontSizeComplexScript93);
                        runProperties85.Append(languages117);
                        Text text84 = new Text();
                        text84.Text = "" + clientDetails.PartnerName + ", Investing your funds as per our";

                        run85.Append(runProperties85);
                        run85.Append(text84);

                        Run run86 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties86 = new RunProperties();
                        RunFonts runFonts121 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize120 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript94 = new FontSizeComplexScript() { Val = "18" };
                        Highlight highlight18 = new Highlight() { Val = HighlightColorValues.Yellow };
                        Languages languages118 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties86.Append(runFonts121);
                        runProperties86.Append(fontSize120);
                        runProperties86.Append(fontSizeComplexScript94);
                        runProperties86.Append(highlight18);
                        runProperties86.Append(languages118);
                        Text text85 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text85.Text = " model / recommended ";

                        run86.Append(runProperties86);
                        run86.Append(text85);

                        Run run87 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties87 = new RunProperties();
                        RunFonts runFonts122 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize121 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript95 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages119 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties87.Append(runFonts122);
                        runProperties87.Append(fontSize121);
                        runProperties87.Append(fontSizeComplexScript95);
                        runProperties87.Append(languages119);
                        Text text86 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text86.Text = "portfolio would align your investments with your ";

                        run87.Append(runProperties87);
                        run87.Append(text86);

                        Run run88 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties88 = new RunProperties();
                        RunFonts runFonts123 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize122 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript96 = new FontSizeComplexScript() { Val = "18" };
                        Highlight highlight19 = new Highlight() { Val = HighlightColorValues.Yellow };
                        Languages languages120 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties88.Append(runFonts123);
                        runProperties88.Append(fontSize122);
                        runProperties88.Append(fontSizeComplexScript96);
                        //  runProperties88.Append(highlight19);
                        runProperties88.Append(languages120);
                        Text text87 = new Text();
                        text87.Text = clientDetails.PartnerName;

                        run88.Append(runProperties88);
                        run88.Append(text87);

                        Run run89 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties89 = new RunProperties();
                        RunFonts runFonts124 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize123 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript97 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages121 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties89.Append(runFonts124);
                        runProperties89.Append(fontSize123);
                        runProperties89.Append(fontSizeComplexScript97);
                        runProperties89.Append(languages121);
                        Text text88 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text88.Text = " risk profile. ";

                        run89.Append(runProperties89);
                        run89.Append(text88);

                        paragraph36.Append(paragraphProperties36);
                        paragraph36.Append(run85);
                        paragraph36.Append(run86);
                        paragraph36.Append(run87);
                        paragraph36.Append(run88);
                        paragraph36.Append(run89);

                        tableCell9.Append(paragraph36);
                    }
                }

                Paragraph paragraph37 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties37 = new ParagraphProperties();

                NumberingProperties numberingProperties10 = new NumberingProperties();
                NumberingLevelReference numberingLevelReference10 = new NumberingLevelReference() { Val = 0 };
                NumberingId numberingId10 = new NumberingId() { Val = 1 };

                numberingProperties10.Append(numberingLevelReference10);
                numberingProperties10.Append(numberingId10);
                SuppressAutoHyphens suppressAutoHyphens37 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines37 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification20 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties36 = new ParagraphMarkRunProperties();
                RunFonts runFonts125 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize124 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript98 = new FontSizeComplexScript() { Val = "18" };
                Languages languages122 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties36.Append(runFonts125);
                paragraphMarkRunProperties36.Append(fontSize124);
                paragraphMarkRunProperties36.Append(fontSizeComplexScript98);
                paragraphMarkRunProperties36.Append(languages122);

                paragraphProperties37.Append(numberingProperties10);
                paragraphProperties37.Append(suppressAutoHyphens37);
                paragraphProperties37.Append(spacingBetweenLines37);
                paragraphProperties37.Append(justification20);
                paragraphProperties37.Append(paragraphMarkRunProperties36);

                Run run90 = new Run() { RsidRunProperties = "00FC027E" };

                RunProperties runProperties90 = new RunProperties();
                RunFonts runFonts126 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color43 = new Color() { Val = "0070C0" };
                FontSize fontSize125 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript99 = new FontSizeComplexScript() { Val = "18" };
                Languages languages123 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties90.Append(runFonts126);
                runProperties90.Append(color43);
                runProperties90.Append(fontSize125);
                runProperties90.Append(fontSizeComplexScript99);
                runProperties90.Append(languages123);
                Text text89 = new Text();
                text89.Text = "[";

                run90.Append(runProperties90);
                run90.Append(text89);

                Run run91 = new Run();

                RunProperties runProperties91 = new RunProperties();
                RunFonts runFonts127 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Italic italic2 = new Italic();
                Color color44 = new Color() { Val = "0070C0" };
                FontSize fontSize126 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript100 = new FontSizeComplexScript() { Val = "18" };
                Languages languages124 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties91.Append(runFonts127);
                runProperties91.Append(italic2);
                runProperties91.Append(color44);
                runProperties91.Append(fontSize126);
                runProperties91.Append(fontSizeComplexScript100);
                runProperties91.Append(languages124);
                Text text90 = new Text();
                text90.Text = "If product is on approved product list and ongoing adviser fee is being charged";

                run91.Append(runProperties91);
                run91.Append(text90);

                Run run92 = new Run();

                RunProperties runProperties92 = new RunProperties();
                RunFonts runFonts128 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color45 = new Color() { Val = "0070C0" };
                FontSize fontSize127 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript101 = new FontSizeComplexScript() { Val = "18" };
                Languages languages125 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties92.Append(runFonts128);
                runProperties92.Append(color45);
                runProperties92.Append(fontSize127);
                runProperties92.Append(fontSizeComplexScript101);
                runProperties92.Append(languages125);
                Text text91 = new Text();
                text91.Text = "]";

                run92.Append(runProperties92);
                run92.Append(text91);

                Run run93 = new Run() { RsidRunProperties = "00163414" };

                RunProperties runProperties93 = new RunProperties();
                RunFonts runFonts129 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Italic italic3 = new Italic();
                Color color46 = new Color() { Val = "0070C0" };
                FontSize fontSize128 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript102 = new FontSizeComplexScript() { Val = "18" };
                Languages languages126 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties93.Append(runFonts129);
                runProperties93.Append(italic3);
                runProperties93.Append(color46);
                runProperties93.Append(fontSize128);
                runProperties93.Append(fontSizeComplexScript102);
                runProperties93.Append(languages126);
                Text text92 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text92.Text = " ";

                run93.Append(runProperties93);
                run93.Append(text92);

                Run run94 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties94 = new RunProperties();
                RunFonts runFonts130 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize129 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript103 = new FontSizeComplexScript() { Val = "18" };
                Languages languages127 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties94.Append(runFonts130);
                runProperties94.Append(fontSize129);
                runProperties94.Append(fontSizeComplexScript103);
                runProperties94.Append(languages127);
                Text text93 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text93.Text = "The investments within our ";

                run94.Append(runProperties94);
                run94.Append(text93);

                Run run95 = new Run() { RsidRunProperties = "00FC027E" };

                RunProperties runProperties95 = new RunProperties();
                RunFonts runFonts131 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color47 = new Color() { Val = "FF0000" };
                FontSize fontSize130 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript104 = new FontSizeComplexScript() { Val = "18" };
                Languages languages128 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties95.Append(runFonts131);
                runProperties95.Append(color47);
                runProperties95.Append(fontSize130);
                runProperties95.Append(fontSizeComplexScript104);
                runProperties95.Append(languages128);
                Text text94 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text94.Text = "model / recommended ";

                run95.Append(runProperties95);
                run95.Append(text94);

                Run run96 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties96 = new RunProperties();
                RunFonts runFonts132 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize131 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript105 = new FontSizeComplexScript() { Val = "18" };
                Languages languages129 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties96.Append(runFonts132);
                runProperties96.Append(fontSize131);
                runProperties96.Append(fontSizeComplexScript105);
                runProperties96.Append(languages129);
                Text text95 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text95.Text = "portfolio will be regularly reviewed under our ongoing service agreement, thereby enabling us to make changes in a timely manner if and when required.  ";

                run96.Append(runProperties96);
                run96.Append(text95);

                paragraph37.Append(paragraphProperties37);
                paragraph37.Append(run90);
                paragraph37.Append(run91);
                paragraph37.Append(run92);
                paragraph37.Append(run93);
                paragraph37.Append(run94);
                paragraph37.Append(run95);
                paragraph37.Append(run96);

                tableCell9.Append(paragraph37);

                //Paragraph paragraph38 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                //ParagraphProperties paragraphProperties38 = new ParagraphProperties();

                //NumberingProperties numberingProperties11 = new NumberingProperties();
                //NumberingLevelReference numberingLevelReference11 = new NumberingLevelReference() { Val = 0 };
                //NumberingId numberingId11 = new NumberingId() { Val = 4 };

                //numberingProperties11.Append(numberingLevelReference11);
                //numberingProperties11.Append(numberingId11);
                //SuppressAutoHyphens suppressAutoHyphens38 = new SuppressAutoHyphens();
                //SpacingBetweenLines spacingBetweenLines38 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                //Justification justification21 = new Justification() { Val = JustificationValues.Both };

                //ParagraphMarkRunProperties paragraphMarkRunProperties37 = new ParagraphMarkRunProperties();
                //RunFonts runFonts133 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize132 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript106 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages130 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //paragraphMarkRunProperties37.Append(runFonts133);
                //paragraphMarkRunProperties37.Append(fontSize132);
                //paragraphMarkRunProperties37.Append(fontSizeComplexScript106);
                //paragraphMarkRunProperties37.Append(languages130);

                //paragraphProperties38.Append(numberingProperties11);
                //paragraphProperties38.Append(suppressAutoHyphens38);
                //paragraphProperties38.Append(spacingBetweenLines38);
                //paragraphProperties38.Append(justification21);
                //paragraphProperties38.Append(paragraphMarkRunProperties37);

                //Run run97 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties97 = new RunProperties();
                //RunFonts runFonts134 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize133 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript107 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight20 = new Highlight() { Val = HighlightColorValues.Cyan };
                //Languages languages131 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties97.Append(runFonts134);
                //runProperties97.Append(fontSize133);
                //runProperties97.Append(fontSizeComplexScript107);
                //runProperties97.Append(highlight20);
                //runProperties97.Append(languages131);
                //Text text96 = new Text();
                //text96.Text = "[If one fund only]";

                //run97.Append(runProperties97);
                //run97.Append(text96);

                //Run run98 = new Run() { RsidRunProperties = "00FC027E" };

                //RunProperties runProperties98 = new RunProperties();
                //RunFonts runFonts135 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize134 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript108 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages132 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties98.Append(runFonts135);
                //runProperties98.Append(fontSize134);
                //runProperties98.Append(fontSizeComplexScript108);
                //runProperties98.Append(languages132);
                //Text text97 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text97.Text = " ";

                //run98.Append(runProperties98);
                //run98.Append(text97);

                //Run run99 = new Run() { RsidRunProperties = "00A85351" };

                //RunProperties runProperties99 = new RunProperties();
                //RunFonts runFonts136 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //Color color48 = new Color() { Val = "FF0000" };
                //FontSize fontSize135 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript109 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages133 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties99.Append(runFonts136);
                //runProperties99.Append(color48);
                //runProperties99.Append(fontSize135);
                //runProperties99.Append(fontSizeComplexScript109);
                //runProperties99.Append(languages133);
                //Text text98 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text98.Text = "Given the size of your portfolio, ";

                //run99.Append(runProperties99);
                //run99.Append(text98);

                //Run run100 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties100 = new RunProperties();
                //RunFonts runFonts137 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize136 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript110 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages134 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties100.Append(runFonts137);
                //runProperties100.Append(fontSize136);
                //runProperties100.Append(fontSizeComplexScript110);
                //runProperties100.Append(languages134);
                //Text text99 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text99.Text = "we have recommended you invest your funds in the ";

                //run100.Append(runProperties100);
                //run100.Append(text99);

                //Run run101 = new Run();

                //RunProperties runProperties101 = new RunProperties();
                //RunFonts runFonts138 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize137 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript111 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight21 = new Highlight() { Val = HighlightColorValues.Yellow };
                //Languages languages135 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties101.Append(runFonts138);
                //runProperties101.Append(fontSize137);
                //runProperties101.Append(fontSizeComplexScript111);
                //runProperties101.Append(highlight21);
                //runProperties101.Append(languages135);
                //Text text100 = new Text();
                //text100.Text = "[fund name]";

                //run101.Append(runProperties101);
                //run101.Append(text100);

                //Run run102 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties102 = new RunProperties();
                //RunFonts runFonts139 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize138 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript112 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages136 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties102.Append(runFonts139);
                //runProperties102.Append(fontSize138);
                //runProperties102.Append(fontSizeComplexScript112);
                //runProperties102.Append(languages136);
                //Text text101 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text101.Text = " which provides exposure to a cost effective portfolio with a";

                //run102.Append(runProperties102);
                //run102.Append(text101);

                //Run run103 = new Run();

                //RunProperties runProperties103 = new RunProperties();
                //RunFonts runFonts140 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize139 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript113 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages137 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties103.Append(runFonts140);
                //runProperties103.Append(fontSize139);
                //runProperties103.Append(fontSizeComplexScript113);
                //runProperties103.Append(languages137);
                //Text text102 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text102.Text = " ";

                //run103.Append(runProperties103);
                //run103.Append(text102);

                //Run run104 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties104 = new RunProperties();
                //RunFonts runFonts141 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize140 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript114 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight22 = new Highlight() { Val = HighlightColorValues.Cyan };
                //Languages languages138 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties104.Append(runFonts141);
                //runProperties104.Append(fontSize140);
                //runProperties104.Append(fontSizeComplexScript114);
                //runProperties104.Append(highlight22);
                //runProperties104.Append(languages138);
                //Text text103 = new Text();
                //text103.Text = "[If Balanced]";

                //run104.Append(runProperties104);
                //run104.Append(text103);

                //Run run105 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties105 = new RunProperties();
                //RunFonts runFonts142 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize141 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript115 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight23 = new Highlight() { Val = HighlightColorValues.Yellow };
                //Languages languages139 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties105.Append(runFonts142);
                //runProperties105.Append(fontSize141);
                //runProperties105.Append(fontSizeComplexScript115);
                //runProperties105.Append(highlight23);
                //runProperties105.Append(languages139);
                //Text text104 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text104.Text = "balance of income and growth assets ";

                //run105.Append(runProperties105);
                //run105.Append(text104);

                //Run run106 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties106 = new RunProperties();
                //RunFonts runFonts143 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize142 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript116 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight24 = new Highlight() { Val = HighlightColorValues.Cyan };
                //Languages languages140 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties106.Append(runFonts143);
                //runProperties106.Append(fontSize142);
                //runProperties106.Append(fontSizeComplexScript116);
                //runProperties106.Append(highlight24);
                //runProperties106.Append(languages140);
                //Text text105 = new Text();
                //text105.Text = "[If growth/defensive]";

                //run106.Append(runProperties106);
                //run106.Append(text105);

                //Run run107 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties107 = new RunProperties();
                //RunFonts runFonts144 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize143 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript117 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight25 = new Highlight() { Val = HighlightColorValues.Yellow };
                //Languages languages141 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties107.Append(runFonts144);
                //runProperties107.Append(fontSize143);
                //runProperties107.Append(fontSizeComplexScript117);
                //runProperties107.Append(highlight25);
                //runProperties107.Append(languages141);
                //Text text106 = new Text();
                //text106.Text = "bias / strong bias towards growth / defensive assets";

                //run107.Append(runProperties107);
                //run107.Append(text106);

                //Run run108 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties108 = new RunProperties();
                //RunFonts runFonts145 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize144 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript118 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages142 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties108.Append(runFonts145);
                //runProperties108.Append(fontSize144);
                //runProperties108.Append(fontSizeComplexScript118);
                //runProperties108.Append(languages142);
                //Text text107 = new Text();
                //text107.Text = ".";

                //run108.Append(runProperties108);
                //run108.Append(text107);

                //paragraph38.Append(paragraphProperties38);
                //paragraph38.Append(run97);
                //paragraph38.Append(run98);
                //paragraph38.Append(run99);
                //paragraph38.Append(run100);
                //paragraph38.Append(run101);
                //paragraph38.Append(run102);
                //paragraph38.Append(run103);
                //paragraph38.Append(run104);
                //paragraph38.Append(run105);
                //paragraph38.Append(run106);
                //paragraph38.Append(run107);
                //paragraph38.Append(run108);

                //Paragraph paragraph39 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                //ParagraphProperties paragraphProperties39 = new ParagraphProperties();

                //NumberingProperties numberingProperties12 = new NumberingProperties();
                //NumberingLevelReference numberingLevelReference12 = new NumberingLevelReference() { Val = 0 };
                //NumberingId numberingId12 = new NumberingId() { Val = 4 };

                //numberingProperties12.Append(numberingLevelReference12);
                //numberingProperties12.Append(numberingId12);
                //SuppressAutoHyphens suppressAutoHyphens39 = new SuppressAutoHyphens();
                //SpacingBetweenLines spacingBetweenLines39 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                //Justification justification22 = new Justification() { Val = JustificationValues.Both };

                //ParagraphMarkRunProperties paragraphMarkRunProperties38 = new ParagraphMarkRunProperties();
                //RunFonts runFonts146 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize145 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript119 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages143 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //paragraphMarkRunProperties38.Append(runFonts146);
                //paragraphMarkRunProperties38.Append(fontSize145);
                //paragraphMarkRunProperties38.Append(fontSizeComplexScript119);
                //paragraphMarkRunProperties38.Append(languages143);

                //paragraphProperties39.Append(numberingProperties12);
                //paragraphProperties39.Append(suppressAutoHyphens39);
                //paragraphProperties39.Append(spacingBetweenLines39);
                //paragraphProperties39.Append(justification22);
                //paragraphProperties39.Append(paragraphMarkRunProperties38);

                //Run run109 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties109 = new RunProperties();
                //RunFonts runFonts147 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize146 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript120 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight26 = new Highlight() { Val = HighlightColorValues.Cyan };
                //Languages languages144 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties109.Append(runFonts147);
                //runProperties109.Append(fontSize146);
                //runProperties109.Append(fontSizeComplexScript120);
                //runProperties109.Append(highlight26);
                //runProperties109.Append(languages144);
                //Text text108 = new Text();
                //text108.Text = "[If one fund only]";

                //run109.Append(runProperties109);
                //run109.Append(text108);

                //Run run110 = new Run() { RsidRunProperties = "00A85351" };

                //RunProperties runProperties110 = new RunProperties();
                //RunFonts runFonts148 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize147 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript121 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages145 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties110.Append(runFonts148);
                //runProperties110.Append(fontSize147);
                //runProperties110.Append(fontSizeComplexScript121);
                //runProperties110.Append(languages145);
                //Text text109 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text109.Text = " ";

                //run110.Append(runProperties110);
                //run110.Append(text109);

                //Run run111 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties111 = new RunProperties();
                //RunFonts runFonts149 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize148 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript122 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages146 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties111.Append(runFonts149);
                //runProperties111.Append(fontSize148);
                //runProperties111.Append(fontSizeComplexScript122);
                //runProperties111.Append(languages146);
                //Text text110 = new Text();
                //text110.Text = "The recommended investment fund will align your portfolio with your â€˜";

                //run111.Append(runProperties111);
                //run111.Append(text110);

                //Run run112 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties112 = new RunProperties();
                //RunFonts runFonts150 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize149 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript123 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight27 = new Highlight() { Val = HighlightColorValues.Yellow };
                //Languages languages147 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties112.Append(runFonts150);
                //runProperties112.Append(fontSize149);
                //runProperties112.Append(fontSizeComplexScript123);
                //runProperties112.Append(highlight27);
                //runProperties112.Append(languages147);
                //Text text111 = new Text();
                //text111.Text = "Balanced";

                //run112.Append(runProperties112);
                //run112.Append(text111);

                //Run run113 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties113 = new RunProperties();
                //RunFonts runFonts151 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize150 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript124 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages148 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties113.Append(runFonts151);
                //runProperties113.Append(fontSize150);
                //runProperties113.Append(fontSizeComplexScript124);
                //runProperties113.Append(languages148);
                //Text text112 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text112.Text = "â€™ risk profile. ";

                //run113.Append(runProperties113);
                //run113.Append(text112);

                //paragraph39.Append(paragraphProperties39);
                //paragraph39.Append(run109);
                //paragraph39.Append(run110);
                //paragraph39.Append(run111);
                //paragraph39.Append(run112);
                //paragraph39.Append(run113);

                //Paragraph paragraph40 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                //ParagraphProperties paragraphProperties40 = new ParagraphProperties();

                //NumberingProperties numberingProperties13 = new NumberingProperties();
                //NumberingLevelReference numberingLevelReference13 = new NumberingLevelReference() { Val = 0 };
                //NumberingId numberingId13 = new NumberingId() { Val = 4 };

                //numberingProperties13.Append(numberingLevelReference13);
                //numberingProperties13.Append(numberingId13);
                //SuppressAutoHyphens suppressAutoHyphens40 = new SuppressAutoHyphens();
                //SpacingBetweenLines spacingBetweenLines40 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                //Justification justification23 = new Justification() { Val = JustificationValues.Both };

                //ParagraphMarkRunProperties paragraphMarkRunProperties39 = new ParagraphMarkRunProperties();
                //RunFonts runFonts152 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize151 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript125 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages149 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //paragraphMarkRunProperties39.Append(runFonts152);
                //paragraphMarkRunProperties39.Append(fontSize151);
                //paragraphMarkRunProperties39.Append(fontSizeComplexScript125);
                //paragraphMarkRunProperties39.Append(languages149);

                //paragraphProperties40.Append(numberingProperties13);
                //paragraphProperties40.Append(suppressAutoHyphens40);
                //paragraphProperties40.Append(spacingBetweenLines40);
                //paragraphProperties40.Append(justification23);
                //paragraphProperties40.Append(paragraphMarkRunProperties39);

                //Run run114 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties114 = new RunProperties();
                //RunFonts runFonts153 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize152 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript126 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight28 = new Highlight() { Val = HighlightColorValues.Cyan };
                //Languages languages150 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties114.Append(runFonts153);
                //runProperties114.Append(fontSize152);
                //runProperties114.Append(fontSizeComplexScript126);
                //runProperties114.Append(highlight28);
                //runProperties114.Append(languages150);
                //Text text113 = new Text();
                //text113.Text = "[If one fund only";

                //run114.Append(runProperties114);
                //run114.Append(text113);

                //Run run115 = new Run();

                //RunProperties runProperties115 = new RunProperties();
                //RunFonts runFonts154 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize153 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript127 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight29 = new Highlight() { Val = HighlightColorValues.Cyan };
                //Languages languages151 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties115.Append(runFonts154);
                //runProperties115.Append(fontSize153);
                //runProperties115.Append(fontSizeComplexScript127);
                //runProperties115.Append(highlight29);
                //runProperties115.Append(languages151);
                //Text text114 = new Text();
                //text114.Text = "]";

                //run115.Append(runProperties115);
                //run115.Append(text114);

                //Run run116 = new Run() { RsidRunProperties = "00A85351" };

                //RunProperties runProperties116 = new RunProperties();
                //RunFonts runFonts155 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize154 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript128 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages152 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties116.Append(runFonts155);
                //runProperties116.Append(fontSize154);
                //runProperties116.Append(fontSizeComplexScript128);
                //runProperties116.Append(languages152);
                //Text text115 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text115.Text = " ";

                //run116.Append(runProperties116);
                //run116.Append(text115);

                //Run run117 = new Run() { RsidRunProperties = "00FC027E" };

                //RunProperties runProperties117 = new RunProperties();
                //RunFonts runFonts156 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //Color color49 = new Color() { Val = "0070C0" };
                //FontSize fontSize155 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript129 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages153 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties117.Append(runFonts156);
                //runProperties117.Append(color49);
                //runProperties117.Append(fontSize155);
                //runProperties117.Append(fontSizeComplexScript129);
                //runProperties117.Append(languages153);
                //Text text116 = new Text();
                //text116.Text = "[";

                //run117.Append(runProperties117);
                //run117.Append(text116);

                //Run run118 = new Run();

                //RunProperties runProperties118 = new RunProperties();
                //RunFonts runFonts157 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //Italic italic4 = new Italic();
                //Color color50 = new Color() { Val = "0070C0" };
                //FontSize fontSize156 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript130 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages154 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties118.Append(runFonts157);
                //runProperties118.Append(italic4);
                //runProperties118.Append(color50);
                //runProperties118.Append(fontSize156);
                //runProperties118.Append(fontSizeComplexScript130);
                //runProperties118.Append(languages154);
                //Text text117 = new Text();
                //text117.Text = "If product is on approved product list and ongoing adviser fee is being charged";

                //run118.Append(runProperties118);
                //run118.Append(text117);

                //Run run119 = new Run();

                //RunProperties runProperties119 = new RunProperties();
                //RunFonts runFonts158 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //Color color51 = new Color() { Val = "0070C0" };
                //FontSize fontSize157 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript131 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages155 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties119.Append(runFonts158);
                //runProperties119.Append(color51);
                //runProperties119.Append(fontSize157);
                //runProperties119.Append(fontSizeComplexScript131);
                //runProperties119.Append(languages155);
                //Text text118 = new Text();
                //text118.Text = "]";

                //run119.Append(runProperties119);
                //run119.Append(text118);

                //Run run120 = new Run() { RsidRunProperties = "00163414" };

                //RunProperties runProperties120 = new RunProperties();
                //RunFonts runFonts159 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //Italic italic5 = new Italic();
                //Color color52 = new Color() { Val = "0070C0" };
                //FontSize fontSize158 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript132 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages156 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties120.Append(runFonts159);
                //runProperties120.Append(italic5);
                //runProperties120.Append(color52);
                //runProperties120.Append(fontSize158);
                //runProperties120.Append(fontSizeComplexScript132);
                //runProperties120.Append(languages156);
                //Text text119 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text119.Text = " ";

                //run120.Append(runProperties120);
                //run120.Append(text119);

                //Run run121 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties121 = new RunProperties();
                //RunFonts runFonts160 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize159 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript133 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages157 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties121.Append(runFonts160);
                //runProperties121.Append(fontSize159);
                //runProperties121.Append(fontSizeComplexScript133);
                //runProperties121.Append(languages157);
                //Text text120 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text120.Text = "The recommended investment will be regularly reviewed under our ongoing service agreement, thereby enabling us to make changes in a timely manner if and when required.  ";

                //run121.Append(runProperties121);
                //run121.Append(text120);

                //paragraph40.Append(paragraphProperties40);
                //paragraph40.Append(run114);
                //paragraph40.Append(run115);
                //paragraph40.Append(run116);
                //paragraph40.Append(run117);
                //paragraph40.Append(run118);
                //paragraph40.Append(run119);
                //paragraph40.Append(run120);
                //paragraph40.Append(run121);

                //Paragraph paragraph41 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                //ParagraphProperties paragraphProperties41 = new ParagraphProperties();

                //NumberingProperties numberingProperties14 = new NumberingProperties();
                //NumberingLevelReference numberingLevelReference14 = new NumberingLevelReference() { Val = 0 };
                //NumberingId numberingId14 = new NumberingId() { Val = 4 };

                //numberingProperties14.Append(numberingLevelReference14);
                //numberingProperties14.Append(numberingId14);

                //Tabs tabs5 = new Tabs();
                //TabStop tabStop5 = new TabStop() { Val = TabStopValues.Left, Position = 720 };

                //tabs5.Append(tabStop5);
                //SuppressAutoHyphens suppressAutoHyphens41 = new SuppressAutoHyphens();
                //SpacingBetweenLines spacingBetweenLines41 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                //Justification justification24 = new Justification() { Val = JustificationValues.Both };

                //ParagraphMarkRunProperties paragraphMarkRunProperties40 = new ParagraphMarkRunProperties();
                //RunFonts runFonts161 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize160 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript134 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages158 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //paragraphMarkRunProperties40.Append(runFonts161);
                //paragraphMarkRunProperties40.Append(fontSize160);
                //paragraphMarkRunProperties40.Append(fontSizeComplexScript134);
                //paragraphMarkRunProperties40.Append(languages158);

                //paragraphProperties41.Append(numberingProperties14);
                //paragraphProperties41.Append(tabs5);
                //paragraphProperties41.Append(suppressAutoHyphens41);
                //paragraphProperties41.Append(spacingBetweenLines41);
                //paragraphProperties41.Append(justification24);
                //paragraphProperties41.Append(paragraphMarkRunProperties40);

                //Run run122 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties122 = new RunProperties();
                //RunFonts runFonts162 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize161 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript135 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight30 = new Highlight() { Val = HighlightColorValues.Cyan };
                //Languages languages159 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties122.Append(runFonts162);
                //runProperties122.Append(fontSize161);
                //runProperties122.Append(fontSizeComplexScript135);
                //runProperties122.Append(highlight30);
                //runProperties122.Append(languages159);
                //Text text121 = new Text();
                //text121.Text = "[If portfolio risk profile is different to client risk profile]";

                //run122.Append(runProperties122);
                //run122.Append(text121);

                //Run run123 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties123 = new RunProperties();
                //RunFonts runFonts163 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize162 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript136 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages160 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties123.Append(runFonts163);
                //runProperties123.Append(fontSize162);
                //runProperties123.Append(fontSizeComplexScript136);
                //runProperties123.Append(languages160);
                //Text text122 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text122.Text = " Investing your funds as per our ";

                //run123.Append(runProperties123);
                //run123.Append(text122);

                //Run run124 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties124 = new RunProperties();
                //RunFonts runFonts164 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize163 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript137 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight31 = new Highlight() { Val = HighlightColorValues.Yellow };
                //Languages languages161 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties124.Append(runFonts164);
                //runProperties124.Append(fontSize163);
                //runProperties124.Append(fontSizeComplexScript137);
                //runProperties124.Append(highlight31);
                //runProperties124.Append(languages161);
                //Text text123 = new Text();
                //text123.Text = "model/recommended";

                //run124.Append(runProperties124);
                //run124.Append(text123);

                //Run run125 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties125 = new RunProperties();
                //RunFonts runFonts165 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize164 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript138 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages162 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties125.Append(runFonts165);
                //runProperties125.Append(fontSize164);
                //runProperties125.Append(fontSizeComplexScript138);
                //runProperties125.Append(languages162);
                //Text text124 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text124.Text = " portfolio for â€˜";

                //run125.Append(runProperties125);
                //run125.Append(text124);

                //Run run126 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties126 = new RunProperties();
                //RunFonts runFonts166 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize165 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript139 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight32 = new Highlight() { Val = HighlightColorValues.Yellow };
                //Languages languages163 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties126.Append(runFonts166);
                //runProperties126.Append(fontSize165);
                //runProperties126.Append(fontSizeComplexScript139);
                //runProperties126.Append(highlight32);
                //runProperties126.Append(languages163);
                //Text text125 = new Text();
                //text125.Text = "Balancedâ€™";

                //run126.Append(runProperties126);
                //run126.Append(text125);

                //Run run127 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties127 = new RunProperties();
                //RunFonts runFonts167 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize166 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript140 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages164 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties127.Append(runFonts167);
                //runProperties127.Append(fontSize166);
                //runProperties127.Append(fontSizeComplexScript140);
                //runProperties127.Append(languages164);
                //Text text126 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text126.Text = " investors would align your overall investment exposure (";

                //run127.Append(runProperties127);
                //run127.Append(text126);

                //Run run128 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties128 = new RunProperties();
                //RunFonts runFonts168 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize167 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript141 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight33 = new Highlight() { Val = HighlightColorValues.Yellow };
                //Languages languages165 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties128.Append(runFonts168);
                //runProperties128.Append(fontSize167);
                //runProperties128.Append(fontSizeComplexScript141);
                //runProperties128.Append(highlight33);
                //runProperties128.Append(languages165);
                //Text text127 = new Text();
                //text127.Text = "including existing cash holdings and XXX";

                //run128.Append(runProperties128);
                //run128.Append(text127);

                //Run run129 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties129 = new RunProperties();
                //RunFonts runFonts169 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize168 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript142 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages166 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties129.Append(runFonts169);
                //runProperties129.Append(fontSize168);
                //runProperties129.Append(fontSizeComplexScript142);
                //runProperties129.Append(languages166);
                //Text text128 = new Text();
                //text128.Text = ") in line with your â€˜";

                //run129.Append(runProperties129);
                //run129.Append(text128);

                //Run run130 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties130 = new RunProperties();
                //RunFonts runFonts170 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize169 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript143 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight34 = new Highlight() { Val = HighlightColorValues.Yellow };
                //Languages languages167 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties130.Append(runFonts170);
                //runProperties130.Append(fontSize169);
                //runProperties130.Append(fontSizeComplexScript143);
                //runProperties130.Append(highlight34);
                //runProperties130.Append(languages167);
                //Text text129 = new Text();
                //text129.Text = "Moderate\'";

                //run130.Append(runProperties130);
                //run130.Append(text129);

                //Run run131 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties131 = new RunProperties();
                //RunFonts runFonts171 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize170 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript144 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages168 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties131.Append(runFonts171);
                //runProperties131.Append(fontSize170);
                //runProperties131.Append(fontSizeComplexScript144);
                //runProperties131.Append(languages168);
                //Text text130 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text130.Text = " risk profile. ";

                //run131.Append(runProperties131);
                //run131.Append(text130);

                //paragraph41.Append(paragraphProperties41);
                //paragraph41.Append(run122);
                //paragraph41.Append(run123);
                //paragraph41.Append(run124);
                //paragraph41.Append(run125);
                //paragraph41.Append(run126);
                //paragraph41.Append(run127);
                //paragraph41.Append(run128);
                //paragraph41.Append(run129);
                //paragraph41.Append(run130);
                //paragraph41.Append(run131);


                if(isPension == true)
                { 
                Paragraph paragraph42 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties42 = new ParagraphProperties();

                NumberingProperties numberingProperties15 = new NumberingProperties();
                NumberingLevelReference numberingLevelReference15 = new NumberingLevelReference() { Val = 0 };
                NumberingId numberingId15 = new NumberingId() { Val = 1 };

                numberingProperties15.Append(numberingLevelReference15);
                numberingProperties15.Append(numberingId15);

                Tabs tabs6 = new Tabs();
                TabStop tabStop6 = new TabStop() { Val = TabStopValues.Left, Position = 720 };

                tabs6.Append(tabStop6);
                SuppressAutoHyphens suppressAutoHyphens42 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines42 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification25 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties41 = new ParagraphMarkRunProperties();
                RunFonts runFonts172 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize171 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript145 = new FontSizeComplexScript() { Val = "18" };
                Languages languages169 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties41.Append(runFonts172);
                paragraphMarkRunProperties41.Append(fontSize171);
                paragraphMarkRunProperties41.Append(fontSizeComplexScript145);
                paragraphMarkRunProperties41.Append(languages169);

                paragraphProperties42.Append(numberingProperties15);
                paragraphProperties42.Append(tabs6);
                paragraphProperties42.Append(suppressAutoHyphens42);
                paragraphProperties42.Append(spacingBetweenLines42);
                paragraphProperties42.Append(justification25);
                paragraphProperties42.Append(paragraphMarkRunProperties41);

               
                Run run133 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties133 = new RunProperties();
                RunFonts runFonts174 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize173 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript147 = new FontSizeComplexScript() { Val = "18" };
                Languages languages171 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties133.Append(runFonts174);
                runProperties133.Append(fontSize173);
                runProperties133.Append(fontSizeComplexScript147);
                runProperties133.Append(languages171);
                Text text132 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text132.Text = "We have adjusted our portfolio and allocated additional funds to the ";

                run133.Append(runProperties133);
                run133.Append(text132);

                Run run134 = new Run();

                RunProperties runProperties134 = new RunProperties();
                RunFonts runFonts175 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color54 = new Color() { Val = "FF0000" };
                FontSize fontSize174 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript148 = new FontSizeComplexScript() { Val = "18" };
                Languages languages172 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties134.Append(runFonts175);
                runProperties134.Append(color54);
                runProperties134.Append(fontSize174);
                runProperties134.Append(fontSizeComplexScript148);
                runProperties134.Append(languages172);
                Text text133 = new Text();
                text133.Text = "[Fund name]";

                run134.Append(runProperties134);
                run134.Append(text133);

                Run run135 = new Run() { RsidRunProperties = "00A85351" };

                RunProperties runProperties135 = new RunProperties();
                RunFonts runFonts176 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color55 = new Color() { Val = "FF0000" };
                FontSize fontSize175 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript149 = new FontSizeComplexScript() { Val = "18" };
                Languages languages173 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties135.Append(runFonts176);
                runProperties135.Append(color55);
                runProperties135.Append(fontSize175);
                runProperties135.Append(fontSizeComplexScript149);
                runProperties135.Append(languages173);
                Text text134 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text134.Text = " ";

                run135.Append(runProperties135);
                run135.Append(text134);

                Run run136 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties136 = new RunProperties();
                RunFonts runFonts177 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize176 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript150 = new FontSizeComplexScript() { Val = "18" };
                Languages languages174 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties136.Append(runFonts177);
                runProperties136.Append(fontSize176);
                runProperties136.Append(fontSizeComplexScript150);
                runProperties136.Append(languages174);
                Text text135 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text135.Text = "to ensure there are sufficient liquid funds readily available to meet your pension payment requirements for the ";

                run136.Append(runProperties136);
                run136.Append(text135);

                Run run137 = new Run() { RsidRunProperties = "00A85351" };

                RunProperties runProperties137 = new RunProperties();
                RunFonts runFonts178 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color56 = new Color() { Val = "FF0000" };
                FontSize fontSize177 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript151 = new FontSizeComplexScript() { Val = "18" };
                Languages languages175 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties137.Append(runFonts178);
                runProperties137.Append(color56);
                runProperties137.Append(fontSize177);
                runProperties137.Append(fontSizeComplexScript151);
                runProperties137.Append(languages175);
                Text text136 = new Text();
                text136.Text = "next 1 and a half years";

                run137.Append(runProperties137);
                run137.Append(text136);

                Run run138 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties138 = new RunProperties();
                RunFonts runFonts179 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize178 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript152 = new FontSizeComplexScript() { Val = "18" };
                Languages languages176 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties138.Append(runFonts179);
                runProperties138.Append(fontSize178);
                runProperties138.Append(fontSizeComplexScript152);
                runProperties138.Append(languages176);
                Text text137 = new Text();
                text137.Text = ".";

                run138.Append(runProperties138);
                run138.Append(text137);

                paragraph42.Append(paragraphProperties42);
                paragraph42.Append(run133);
                paragraph42.Append(run134);
                paragraph42.Append(run135);
                paragraph42.Append(run136);
                paragraph42.Append(run137);
                paragraph42.Append(run138);

                tableCell9.Append(paragraph42);
                }

                //TODO - Test
                if(!(clientDetails.ClientRiskProfile == "Preservation" || clientDetails.ClientRiskProfile == "Defensive") && !(clientDetails.PartnerRiskProfile == "Preservation" || clientDetails.PartnerRiskProfile == "Defensive"))
                {
                    if (totalSum < ((decimal)0.25 * productSum))
                    {
                        Paragraph paragraph43 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                        ParagraphProperties paragraphProperties43 = new ParagraphProperties();

                        NumberingProperties numberingProperties16 = new NumberingProperties();
                        NumberingLevelReference numberingLevelReference16 = new NumberingLevelReference() { Val = 0 };
                        NumberingId numberingId16 = new NumberingId() { Val = 1 };

                        numberingProperties16.Append(numberingLevelReference16);
                        numberingProperties16.Append(numberingId16);
                        SuppressAutoHyphens suppressAutoHyphens43 = new SuppressAutoHyphens();
                        SpacingBetweenLines spacingBetweenLines43 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                        Justification justification26 = new Justification() { Val = JustificationValues.Both };

                        ParagraphMarkRunProperties paragraphMarkRunProperties42 = new ParagraphMarkRunProperties();
                        RunFonts runFonts180 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize179 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript153 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages177 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        paragraphMarkRunProperties42.Append(runFonts180);
                        paragraphMarkRunProperties42.Append(fontSize179);
                        paragraphMarkRunProperties42.Append(fontSizeComplexScript153);
                        paragraphMarkRunProperties42.Append(languages177);

                        paragraphProperties43.Append(numberingProperties16);
                        paragraphProperties43.Append(suppressAutoHyphens43);
                        paragraphProperties43.Append(spacingBetweenLines43);
                        paragraphProperties43.Append(justification26);
                        paragraphProperties43.Append(paragraphMarkRunProperties42);



                        Run run141 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties141 = new RunProperties();
                        RunFonts runFonts183 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        Bold bold6 = new Bold();
                        Color color58 = new Color() { Val = "FF0000" };
                        FontSize fontSize182 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript156 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages180 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties141.Append(runFonts183);
                        runProperties141.Append(bold6);
                        runProperties141.Append(color58);
                        runProperties141.Append(fontSize182);
                        runProperties141.Append(fontSizeComplexScript156);
                        runProperties141.Append(languages180);
                        Text text140 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text140.Text = " ";

                        run141.Append(runProperties141);
                        run141.Append(text140);

                        Run run142 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties142 = new RunProperties();
                        RunFonts runFonts184 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize183 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript157 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages181 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties142.Append(runFonts184);
                        runProperties142.Append(fontSize183);
                        runProperties142.Append(fontSizeComplexScript157);
                        runProperties142.Append(languages181);
                        Text text141 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text141.Text = "The proposed portfolio adopts an active investment approach which is appropriate for you because you want the potential for higher ";

                        run142.Append(runProperties142);
                        run142.Append(text141);

                        Run run143 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties143 = new RunProperties();
                        RunFonts runFonts185 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize184 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript158 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages182 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties143.Append(runFonts185);
                        runProperties143.Append(fontSize184);
                        runProperties143.Append(fontSizeComplexScript158);
                        runProperties143.Append(languages182);
                        LastRenderedPageBreak lastRenderedPageBreak2 = new LastRenderedPageBreak();
                        Text text142 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text142.Text = "investment returns than the broader market and are relatively comfortable with the level of risk needed to achieve this. ";

                        run143.Append(runProperties143);
                        run143.Append(lastRenderedPageBreak2);
                        run143.Append(text142);

                        paragraph43.Append(paragraphProperties43);
                      
                        paragraph43.Append(run141);
                        paragraph43.Append(run142);
                        paragraph43.Append(run143);

                        tableCell9.Append(paragraph43);
                    }
                }


                if (totalSum > ((decimal)0.75 * productSum))
                {
                    Paragraph paragraph44 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties44 = new ParagraphProperties();

                    NumberingProperties numberingProperties17 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference17 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId17 = new NumberingId() { Val = 1 };

                    numberingProperties17.Append(numberingLevelReference17);
                    numberingProperties17.Append(numberingId17);
                    SuppressAutoHyphens suppressAutoHyphens44 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines44 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification27 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties43 = new ParagraphMarkRunProperties();
                    RunFonts runFonts186 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize185 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript159 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages183 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties43.Append(runFonts186);
                    paragraphMarkRunProperties43.Append(fontSize185);
                    paragraphMarkRunProperties43.Append(fontSizeComplexScript159);
                    paragraphMarkRunProperties43.Append(languages183);

                    paragraphProperties44.Append(numberingProperties17);
                    paragraphProperties44.Append(suppressAutoHyphens44);
                    paragraphProperties44.Append(spacingBetweenLines44);
                    paragraphProperties44.Append(justification27);
                    paragraphProperties44.Append(paragraphMarkRunProperties43);

                   

                    Run run145 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties145 = new RunProperties();
                    RunFonts runFonts188 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize187 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript161 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages185 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties145.Append(runFonts188);
                    runProperties145.Append(fontSize187);
                    runProperties145.Append(fontSizeComplexScript161);
                    runProperties145.Append(languages185);
                    Text text144 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text144.Text = "The proposed portfolio adopts a passive investment approach which is appropriate for you because you want to access a cost effective investment strategy, minimise the risk of underperforming the broader market and wish to make as few investment decisions as possible.";

                    run145.Append(runProperties145);
                    run145.Append(text144);

                    paragraph44.Append(paragraphProperties44);
                    paragraph44.Append(run145);
                    tableCell9.Append(paragraph44);
                }

                if ((totalSum >= ((decimal)0.25 * productSum)) && (totalSum <= ((decimal)0.75 * productSum)))
                { 
                    Paragraph paragraph45 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties45 = new ParagraphProperties();

                    NumberingProperties numberingProperties18 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference18 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId18 = new NumberingId() { Val = 1 };

                    numberingProperties18.Append(numberingLevelReference18);
                    numberingProperties18.Append(numberingId18);
                    SuppressAutoHyphens suppressAutoHyphens45 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines45 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    ContextualSpacing contextualSpacing1 = new ContextualSpacing();
                    Justification justification28 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties44 = new ParagraphMarkRunProperties();
                    RunFonts runFonts189 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Arial" };
                    FontSize fontSize188 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript162 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages186 = new Languages() { Val = "en-AU", EastAsia = "ar-SA" };

                    paragraphMarkRunProperties44.Append(runFonts189);
                    paragraphMarkRunProperties44.Append(fontSize188);
                    paragraphMarkRunProperties44.Append(fontSizeComplexScript162);
                    paragraphMarkRunProperties44.Append(languages186);

                    paragraphProperties45.Append(numberingProperties18);
                    paragraphProperties45.Append(suppressAutoHyphens45);
                    paragraphProperties45.Append(spacingBetweenLines45);
                    paragraphProperties45.Append(contextualSpacing1);
                    paragraphProperties45.Append(justification28);
                    paragraphProperties45.Append(paragraphMarkRunProperties44);

                  

                    Run run147 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties147 = new RunProperties();
                    RunFonts runFonts191 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Arial" };
                    FontSize fontSize190 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript164 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages188 = new Languages() { Val = "en-AU", EastAsia = "ar-SA" };

                    runProperties147.Append(runFonts191);
                    runProperties147.Append(fontSize190);
                    runProperties147.Append(fontSizeComplexScript164);
                    runProperties147.Append(languages188);
                    Text text146 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text146.Text = "The proposed portfolio adopts a mix of both an active and passive investment approach. The active investment approach is appropriate for you because you want the potential for higher investment returns than the broader market and are relatively comfortable with the level of risk needed to achieve this. The passive investment approach is also appropriate for you because you want to access a cost effective investment strategy, minimise the risk of underperforming the broader market and wish to make as few investment decisions as possible.";

                    run147.Append(runProperties147);
                    run147.Append(text146);

                    paragraph45.Append(paragraphProperties45);
                    paragraph45.Append(run147);
                    tableCell9.Append(paragraph45);
                }

                if(isPension == false && hasEquityInvestment == true)
                {
                   
                        Paragraph paragraph46 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                        ParagraphProperties paragraphProperties46 = new ParagraphProperties();

                        NumberingProperties numberingProperties19 = new NumberingProperties();
                        NumberingLevelReference numberingLevelReference19 = new NumberingLevelReference() { Val = 0 };
                        NumberingId numberingId19 = new NumberingId() { Val = 1 };

                        numberingProperties19.Append(numberingLevelReference19);
                        numberingProperties19.Append(numberingId19);
                        SuppressAutoHyphens suppressAutoHyphens46 = new SuppressAutoHyphens();
                        SpacingBetweenLines spacingBetweenLines46 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                        Justification justification29 = new Justification() { Val = JustificationValues.Both };

                        ParagraphMarkRunProperties paragraphMarkRunProperties45 = new ParagraphMarkRunProperties();
                        RunFonts runFonts192 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize191 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript165 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages189 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        paragraphMarkRunProperties45.Append(runFonts192);
                        paragraphMarkRunProperties45.Append(fontSize191);
                        paragraphMarkRunProperties45.Append(fontSizeComplexScript165);
                        paragraphMarkRunProperties45.Append(languages189);

                        paragraphProperties46.Append(numberingProperties19);
                        paragraphProperties46.Append(suppressAutoHyphens46);
                        paragraphProperties46.Append(spacingBetweenLines46);
                        paragraphProperties46.Append(justification29);
                        paragraphProperties46.Append(paragraphMarkRunProperties45);

                     

                        Run run150 = new Run() { RsidRunProperties = "00482D19" };

                        RunProperties runProperties150 = new RunProperties();
                        RunFonts runFonts195 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                        FontSize fontSize194 = new FontSize() { Val = "18" };
                        FontSizeComplexScript fontSizeComplexScript168 = new FontSizeComplexScript() { Val = "18" };
                        Languages languages192 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                        runProperties150.Append(runFonts195);
                        runProperties150.Append(fontSize194);
                        runProperties150.Append(fontSizeComplexScript168);
                        runProperties150.Append(languages192);
                        Text text149 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                        text149.Text = "The proposed portfolio has exposure to equity which has the potential for higher investment returns and also provides a tax-effective return through capital gain discounts and income that may include franking credits.";

                        run150.Append(runProperties150);
                        run150.Append(text149);

                        paragraph46.Append(paragraphProperties46);
                        paragraph46.Append(run150);

                        tableCell9.Append(paragraph46);
                }

                //Paragraph paragraph47 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                //ParagraphProperties paragraphProperties47 = new ParagraphProperties();

                //NumberingProperties numberingProperties20 = new NumberingProperties();
                //NumberingLevelReference numberingLevelReference20 = new NumberingLevelReference() { Val = 0 };
                //NumberingId numberingId20 = new NumberingId() { Val = 5 };

                //numberingProperties20.Append(numberingLevelReference20);
                //numberingProperties20.Append(numberingId20);
                //SuppressAutoHyphens suppressAutoHyphens47 = new SuppressAutoHyphens();
                //SpacingBetweenLines spacingBetweenLines47 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                //Justification justification30 = new Justification() { Val = JustificationValues.Both };

                //ParagraphMarkRunProperties paragraphMarkRunProperties46 = new ParagraphMarkRunProperties();
                //RunFonts runFonts196 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize195 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript169 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages193 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //paragraphMarkRunProperties46.Append(runFonts196);
                //paragraphMarkRunProperties46.Append(fontSize195);
                //paragraphMarkRunProperties46.Append(fontSizeComplexScript169);
                //paragraphMarkRunProperties46.Append(languages193);

                //paragraphProperties47.Append(numberingProperties20);
                //paragraphProperties47.Append(suppressAutoHyphens47);
                //paragraphProperties47.Append(spacingBetweenLines47);
                //paragraphProperties47.Append(justification30);
                //paragraphProperties47.Append(paragraphMarkRunProperties46);

                //Run run151 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties151 = new RunProperties();
                //RunFonts runFonts197 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize196 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript170 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight41 = new Highlight() { Val = HighlightColorValues.Cyan };
                //Languages languages194 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties151.Append(runFonts197);
                //runProperties151.Append(fontSize196);
                //runProperties151.Append(fontSizeComplexScript170);
                //runProperties151.Append(highlight41);
                //runProperties151.Append(languages194);
                //Text text150 = new Text();
                //text150.Text = "[If direct equity model portfolio]";

                //run151.Append(runProperties151);
                //run151.Append(text150);

                //Run run152 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties152 = new RunProperties();
                //RunFonts runFonts198 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize197 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript171 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages195 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties152.Append(runFonts198);
                //runProperties152.Append(fontSize197);
                //runProperties152.Append(fontSizeComplexScript171);
                //runProperties152.Append(languages195);
                //Text text151 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text151.Text = " You want anÂ efficient way to invest in direct equities whilst reducing the need to conduct your own detailed analysis and portfolio construction. You are seekingÂ diversification across sectors which a pre-constructed model portfolio will provide.";

                //run152.Append(runProperties152);
                //run152.Append(text151);

                //paragraph47.Append(paragraphProperties47);
                //paragraph47.Append(run151);
                //paragraph47.Append(run152);

                //Paragraph paragraph48 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                //ParagraphProperties paragraphProperties48 = new ParagraphProperties();

                //NumberingProperties numberingProperties21 = new NumberingProperties();
                //NumberingLevelReference numberingLevelReference21 = new NumberingLevelReference() { Val = 0 };
                //NumberingId numberingId21 = new NumberingId() { Val = 5 };

                //numberingProperties21.Append(numberingLevelReference21);
                //numberingProperties21.Append(numberingId21);
                //SuppressAutoHyphens suppressAutoHyphens48 = new SuppressAutoHyphens();
                //SpacingBetweenLines spacingBetweenLines48 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                //Justification justification31 = new Justification() { Val = JustificationValues.Both };

                //ParagraphMarkRunProperties paragraphMarkRunProperties47 = new ParagraphMarkRunProperties();
                //RunFonts runFonts199 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize198 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript172 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages196 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //paragraphMarkRunProperties47.Append(runFonts199);
                //paragraphMarkRunProperties47.Append(fontSize198);
                //paragraphMarkRunProperties47.Append(fontSizeComplexScript172);
                //paragraphMarkRunProperties47.Append(languages196);

                //paragraphProperties48.Append(numberingProperties21);
                //paragraphProperties48.Append(suppressAutoHyphens48);
                //paragraphProperties48.Append(spacingBetweenLines48);
                //paragraphProperties48.Append(justification31);
                //paragraphProperties48.Append(paragraphMarkRunProperties47);

                //Run run153 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties153 = new RunProperties();
                //RunFonts runFonts200 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize199 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript173 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight42 = new Highlight() { Val = HighlightColorValues.Cyan };
                //Languages languages197 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties153.Append(runFonts200);
                //runProperties153.Append(fontSize199);
                //runProperties153.Append(fontSizeComplexScript173);
                //runProperties153.Append(highlight42);
                //runProperties153.Append(languages197);
                //Text text152 = new Text();
                //text152.Text = "[If exchange traded funds]";

                //run153.Append(runProperties153);
                //run153.Append(text152);

                //Run run154 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties154 = new RunProperties();
                //RunFonts runFonts201 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize200 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript174 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages198 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties154.Append(runFonts201);
                //runProperties154.Append(fontSize200);
                //runProperties154.Append(fontSizeComplexScript174);
                //runProperties154.Append(languages198);
                //Text text153 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text153.Text = " The recommended Exchange Traded Fund";

                //run154.Append(runProperties154);
                //run154.Append(text153);

                //Run run155 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties155 = new RunProperties();
                //RunFonts runFonts202 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize201 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript175 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight43 = new Highlight() { Val = HighlightColorValues.Yellow };
                //Languages languages199 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties155.Append(runFonts202);
                //runProperties155.Append(fontSize201);
                //runProperties155.Append(fontSizeComplexScript175);
                //runProperties155.Append(highlight43);
                //runProperties155.Append(languages199);
                //Text text154 = new Text();
                //text154.Text = "/s";

                //run155.Append(runProperties155);
                //run155.Append(text154);

                //Run run156 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties156 = new RunProperties();
                //RunFonts runFonts203 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize202 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript176 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages200 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties156.Append(runFonts203);
                //runProperties156.Append(fontSize202);
                //runProperties156.Append(fontSizeComplexScript176);
                //runProperties156.Append(languages200);
                //Text text155 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text155.Text = " (ETF";

                //run156.Append(runProperties156);
                //run156.Append(text155);

                //Run run157 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties157 = new RunProperties();
                //RunFonts runFonts204 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize203 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript177 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight44 = new Highlight() { Val = HighlightColorValues.Yellow };
                //Languages languages201 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties157.Append(runFonts204);
                //runProperties157.Append(fontSize203);
                //runProperties157.Append(fontSizeComplexScript177);
                //runProperties157.Append(highlight44);
                //runProperties157.Append(languages201);
                //Text text156 = new Text();
                //text156.Text = "s";

                //run157.Append(runProperties157);
                //run157.Append(text156);

                //Run run158 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties158 = new RunProperties();
                //RunFonts runFonts205 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize204 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript178 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages202 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties158.Append(runFonts205);
                //runProperties158.Append(fontSize204);
                //runProperties158.Append(fontSizeComplexScript178);
                //runProperties158.Append(languages202);
                //Text text157 = new Text();
                //text157.Text = ") provide";

                //run158.Append(runProperties158);
                //run158.Append(text157);

                //Run run159 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties159 = new RunProperties();
                //RunFonts runFonts206 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize205 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript179 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight45 = new Highlight() { Val = HighlightColorValues.Yellow };
                //Languages languages203 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties159.Append(runFonts206);
                //runProperties159.Append(fontSize205);
                //runProperties159.Append(fontSizeComplexScript179);
                //runProperties159.Append(highlight45);
                //runProperties159.Append(languages203);
                //Text text158 = new Text();
                //text158.Text = "/s";

                //run159.Append(runProperties159);
                //run159.Append(text158);

                //Run run160 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties160 = new RunProperties();
                //RunFonts runFonts207 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize206 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript180 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages204 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties160.Append(runFonts207);
                //runProperties160.Append(fontSize206);
                //runProperties160.Append(fontSizeComplexScript180);
                //runProperties160.Append(languages204);
                //Text text159 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text159.Text = " low cost exposure to ";

                //run160.Append(runProperties160);
                //run160.Append(text159);

                //Run run161 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties161 = new RunProperties();
                //RunFonts runFonts208 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize207 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript181 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight46 = new Highlight() { Val = HighlightColorValues.Yellow };
                //Languages languages205 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties161.Append(runFonts208);
                //runProperties161.Append(fontSize207);
                //runProperties161.Append(fontSizeComplexScript181);
                //runProperties161.Append(highlight46);
                //runProperties161.Append(languages205);
                //Text text160 = new Text();
                //text160.Text = "shares / property / fixed interest";

                //run161.Append(runProperties161);
                //run161.Append(text160);

                //Run run162 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties162 = new RunProperties();
                //RunFonts runFonts209 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize208 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript182 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages206 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties162.Append(runFonts209);
                //runProperties162.Append(fontSize208);
                //runProperties162.Append(fontSizeComplexScript182);
                //runProperties162.Append(languages206);
                //Text text161 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text161.Text = ". ";

                //run162.Append(runProperties162);
                //run162.Append(text161);

                //Run run163 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties163 = new RunProperties();
                //RunFonts runFonts210 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize209 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript183 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight47 = new Highlight() { Val = HighlightColorValues.Yellow };
                //Languages languages207 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties163.Append(runFonts210);
                //runProperties163.Append(fontSize209);
                //runProperties163.Append(fontSizeComplexScript183);
                //runProperties163.Append(highlight47);
                //runProperties163.Append(languages207);
                //Text text162 = new Text();
                //text162.Text = "They/It";

                //run163.Append(runProperties163);
                //run163.Append(text162);

                //Run run164 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties164 = new RunProperties();
                //RunFonts runFonts211 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize210 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript184 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages208 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties164.Append(runFonts211);
                //runProperties164.Append(fontSize210);
                //runProperties164.Append(fontSizeComplexScript184);
                //runProperties164.Append(languages208);
                //Text text163 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text163.Text = " also provide";

                //run164.Append(runProperties164);
                //run164.Append(text163);

                //Run run165 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties165 = new RunProperties();
                //RunFonts runFonts212 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize211 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript185 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight48 = new Highlight() { Val = HighlightColorValues.Yellow };
                //Languages languages209 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties165.Append(runFonts212);
                //runProperties165.Append(fontSize211);
                //runProperties165.Append(fontSizeComplexScript185);
                //runProperties165.Append(highlight48);
                //runProperties165.Append(languages209);
                //Text text164 = new Text();
                //text164.Text = "/s";

                //run165.Append(runProperties165);
                //run165.Append(text164);

                //Run run166 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties166 = new RunProperties();
                //RunFonts runFonts213 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                //FontSize fontSize212 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript186 = new FontSizeComplexScript() { Val = "18" };
                //Languages languages210 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties166.Append(runFonts213);
                //runProperties166.Append(fontSize212);
                //runProperties166.Append(fontSizeComplexScript186);
                //runProperties166.Append(languages210);
                //Text text165 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                //text165.Text = " the flexibility of investing in tradeable securities but with broad market diversification which minimises the risk of underperformance.";

                //run166.Append(runProperties166);
                //run166.Append(text165);

                //paragraph48.Append(paragraphProperties48);
                //paragraph48.Append(run153);
                //paragraph48.Append(run154);
                //paragraph48.Append(run155);
                //paragraph48.Append(run156);
                //paragraph48.Append(run157);
                //paragraph48.Append(run158);
                //paragraph48.Append(run159);
                //paragraph48.Append(run160);
                //paragraph48.Append(run161);
                //paragraph48.Append(run162);
                //paragraph48.Append(run163);
                //paragraph48.Append(run164);
                //paragraph48.Append(run165);
                //paragraph48.Append(run166);

                Paragraph paragraph49 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties49 = new ParagraphProperties();

                NumberingProperties numberingProperties22 = new NumberingProperties();
                NumberingLevelReference numberingLevelReference22 = new NumberingLevelReference() { Val = 0 };
                NumberingId numberingId22 = new NumberingId() { Val = 1 };

                numberingProperties22.Append(numberingLevelReference22);
                numberingProperties22.Append(numberingId22);
                SuppressAutoHyphens suppressAutoHyphens49 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines49 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification32 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties48 = new ParagraphMarkRunProperties();
                RunFonts runFonts214 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize213 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript187 = new FontSizeComplexScript() { Val = "18" };
                Languages languages211 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties48.Append(runFonts214);
                paragraphMarkRunProperties48.Append(fontSize213);
                paragraphMarkRunProperties48.Append(fontSizeComplexScript187);
                paragraphMarkRunProperties48.Append(languages211);

                paragraphProperties49.Append(numberingProperties22);
                paragraphProperties49.Append(suppressAutoHyphens49);
                paragraphProperties49.Append(spacingBetweenLines49);
                paragraphProperties49.Append(justification32);
                paragraphProperties49.Append(paragraphMarkRunProperties48);

                Run run167 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties167 = new RunProperties();
                RunFonts runFonts215 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize214 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript188 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight49 = new Highlight() { Val = HighlightColorValues.Cyan };
                Languages languages212 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties167.Append(runFonts215);
                runProperties167.Append(fontSize214);
                runProperties167.Append(fontSizeComplexScript188);
                runProperties167.Append(highlight49);
                runProperties167.Append(languages212);
                Text text166 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text166.Text = " [If regular rebalance is recommended]";

                run167.Append(runProperties167);
                run167.Append(text166);

                Run run168 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties168 = new RunProperties();
                RunFonts runFonts216 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize215 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript189 = new FontSizeComplexScript() { Val = "18" };
                Languages languages213 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties168.Append(runFonts216);
                runProperties168.Append(fontSize215);
                runProperties168.Append(fontSizeComplexScript189);
                runProperties168.Append(languages213);
                Text text167 = new Text();
                text167.Text = "Rebalancing your portfolio on a regular basis ensures it remains invested in line with your risk profile.";

                run168.Append(runProperties168);
                run168.Append(text167);

                paragraph49.Append(paragraphProperties49);
                paragraph49.Append(run167);
                paragraph49.Append(run168);



               
                //tableCell9.Append(paragraph28);
                //tableCell9.Append(paragraph29);
                //tableCell9.Append(paragraph30);
                //tableCell9.Append(paragraph31);
                //tableCell9.Append(paragraph32);
                //tableCell9.Append(paragraph33);
                //tableCell9.Append(paragraph34);
                //tableCell9.Append(paragraph35);
                //tableCell9.Append(paragraph36);
                //tableCell9.Append(paragraph37);
                //tableCell9.Append(paragraph38);
                //tableCell9.Append(paragraph39);
                //tableCell9.Append(paragraph40);
                //tableCell9.Append(paragraph41);
                //tableCell9.Append(paragraph42);
                //tableCell9.Append(paragraph43);
                //tableCell9.Append(paragraph44);
                //tableCell9.Append(paragraph45);
                //tableCell9.Append(paragraph46);
                //tableCell9.Append(paragraph47);
                //tableCell9.Append(paragraph48);
                tableCell9.Append(paragraph49);
                //tableCell9.Append(paragraph50);

                tableRow5.Append(tableRowProperties3);
                tableRow5.Append(tableCell8);
                tableRow5.Append(tableCell9);

                table4.Append(tableProperties4);
                table4.Append(tableGrid4);
                table4.Append(tableRow5);

                Paragraph paragraph51 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties51 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens51 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines51 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties50 = new ParagraphMarkRunProperties();
                RunFonts runFonts219 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize218 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript192 = new FontSizeComplexScript() { Val = "20" };
                Languages languages216 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties50.Append(runFonts219);
                paragraphMarkRunProperties50.Append(fontSize218);
                paragraphMarkRunProperties50.Append(fontSizeComplexScript192);
                paragraphMarkRunProperties50.Append(languages216);

                paragraphProperties51.Append(suppressAutoHyphens51);
                paragraphProperties51.Append(spacingBetweenLines51);
                paragraphProperties51.Append(paragraphMarkRunProperties50);

                paragraph51.Append(paragraphProperties51);

                Table table5 = new Table();

                TableProperties tableProperties5 = new TableProperties();
                TableWidth tableWidth5 = new TableWidth() { Width = "0", Type = TableWidthUnitValues.Auto };
                TableLayout tableLayout4 = new TableLayout() { Type = TableLayoutValues.Fixed };
                TableLook tableLook5 = new TableLook() { Val = "0000", FirstRow = false, LastRow = false, FirstColumn = false, LastColumn = false, NoHorizontalBand = false, NoVerticalBand = false };

                tableProperties5.Append(tableWidth5);
                tableProperties5.Append(tableLayout4);
                tableProperties5.Append(tableLook5);

                TableGrid tableGrid5 = new TableGrid();
                GridColumn gridColumn8 = new GridColumn() { Width = "1810" };
                GridColumn gridColumn9 = new GridColumn() { Width = "7796" };

                tableGrid5.Append(gridColumn8);
                tableGrid5.Append(gridColumn9);

                TableRow tableRow6 = new TableRow() { RsidTableRowMarkRevision = "00482D19", RsidTableRowAddition = "001A4A50", RsidTableRowProperties = "00A85FEB" };

                TableCell tableCell10 = new TableCell();

                TableCellProperties tableCellProperties10 = new TableCellProperties();
                TableCellWidth tableCellWidth10 = new TableCellWidth() { Width = "1810", Type = TableWidthUnitValues.Dxa };
                Shading shading6 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "auto" };

                tableCellProperties10.Append(tableCellWidth10);
                tableCellProperties10.Append(shading6);

                Paragraph paragraph52 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties52 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens52 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines52 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties51 = new ParagraphMarkRunProperties();
                RunFonts runFonts220 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                FontSize fontSize219 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript193 = new FontSizeComplexScript() { Val = "18" };
                Languages languages217 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };
                Justification justification = new Justification() { Val = JustificationValues.Left };

                paragraphMarkRunProperties51.Append(runFonts220);
                paragraphMarkRunProperties51.Append(fontSize219);
                paragraphMarkRunProperties51.Append(fontSizeComplexScript193);
                paragraphMarkRunProperties51.Append(languages217);
                paragraphProperties52.Append(justification);
                paragraphProperties52.Append(suppressAutoHyphens52);
                paragraphProperties52.Append(spacingBetweenLines52);
                paragraphProperties52.Append(paragraphMarkRunProperties51);

                Run run170 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties170 = new RunProperties();
                RunFonts runFonts221 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Bold bold8 = new Bold();
                Color color62 = new Color() { Val = "393939" };
                FontSize fontSize220 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript194 = new FontSizeComplexScript() { Val = "18" };
                Languages languages218 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

                runProperties170.Append(runFonts221);
                runProperties170.Append(bold8);
                runProperties170.Append(color62);
                runProperties170.Append(fontSize220);
                runProperties170.Append(fontSizeComplexScript194);
                runProperties170.Append(languages218);
                Text text169 = new Text();
                text169.Text = "Things you";

                run170.Append(runProperties170);
                run170.Append(text169);

                Run run171 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties171 = new RunProperties();
                RunFonts runFonts222 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Bold bold9 = new Bold();
                Color color63 = new Color() { Val = "393939" };
                FontSize fontSize221 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript195 = new FontSizeComplexScript() { Val = "18" };
                Languages languages219 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

                runProperties171.Append(runFonts222);
                runProperties171.Append(bold9);
                runProperties171.Append(color63);
                runProperties171.Append(fontSize221);
                runProperties171.Append(fontSizeComplexScript195);
                runProperties171.Append(languages219);
                Break break2 = new Break();
                Text text170 = new Text();
                text170.Text = "should know";

                run171.Append(runProperties171);
                run171.Append(break2);
                run171.Append(text170);

                paragraph52.Append(paragraphProperties52);
                paragraph52.Append(run170);
                paragraph52.Append(run171);

                tableCell10.Append(tableCellProperties10);
                tableCell10.Append(paragraph52);

                TableCell tableCell11 = new TableCell();

                TableCellProperties tableCellProperties11 = new TableCellProperties();
                TableCellWidth tableCellWidth11 = new TableCellWidth() { Width = "7796", Type = TableWidthUnitValues.Dxa };
                Shading shading7 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "auto" };

                tableCellProperties11.Append(tableCellWidth11);
                tableCellProperties11.Append(shading7);
                tableCell11.Append(tableCellProperties11);

               
                if (totalSum < ((decimal)0.25 * productSum))
                {
                    Paragraph paragraph55 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties55 = new ParagraphProperties();




                    ParagraphStyleId paragraphStyleId = new ParagraphStyleId() { Val = "ListParagraph" };
                    NumberingProperties numberingProperties26 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference26 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId26 = new NumberingId() { Val = 1 }; ;

                    numberingProperties26.Append(numberingLevelReference26);
                    numberingProperties26.Append(numberingId26);
                    SuppressAutoHyphens suppressAutoHyphens55 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines55 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification36 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties54 = new ParagraphMarkRunProperties();
                    RunFonts runFonts229 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize228 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript202 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages226 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties54.Append(runFonts229);
                    paragraphMarkRunProperties54.Append(fontSize228);
                    paragraphMarkRunProperties54.Append(fontSizeComplexScript202);
                    paragraphMarkRunProperties54.Append(languages226);

                    paragraphProperties55.Append(paragraphStyleId);
                    paragraphProperties55.Append(numberingProperties26);
                    paragraphProperties55.Append(suppressAutoHyphens55);
                    paragraphProperties55.Append(spacingBetweenLines55);
                    paragraphProperties55.Append(justification36);
                    paragraphProperties55.Append(paragraphMarkRunProperties54);

                    Run run178 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties178 = new RunProperties();
                    RunFonts runFonts232 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize231 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript205 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages229 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties178.Append(runFonts232);
                    runProperties178.Append(fontSize231);
                    runProperties178.Append(fontSizeComplexScript205);
                    runProperties178.Append(languages229);
                    Text text177 = new Text();
                    text177.Text = "Returns from active investing are reliant on investment manager skill. Investment managers can change over time and this may require a rebalance or redemption.";

                    run178.Append(runProperties178);
                    run178.Append(text177);

                    paragraph55.Append(paragraphProperties55);
                    paragraph55.Append(run178);


                    Paragraph paragraph56 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties56 = new ParagraphProperties();

                    NumberingProperties numberingProperties27 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference27 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId27 = new NumberingId() { Val = 1 }; ;

                    numberingProperties27.Append(numberingLevelReference27);
                    numberingProperties27.Append(numberingId27);
                    SuppressAutoHyphens suppressAutoHyphens56 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines56 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification37 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties55 = new ParagraphMarkRunProperties();
                    RunFonts runFonts233 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize232 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript206 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages230 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties55.Append(runFonts233);
                    paragraphMarkRunProperties55.Append(fontSize232);
                    paragraphMarkRunProperties55.Append(fontSizeComplexScript206);
                    paragraphMarkRunProperties55.Append(languages230);

                    paragraphProperties56.Append(numberingProperties27);
                    paragraphProperties56.Append(suppressAutoHyphens56);
                    paragraphProperties56.Append(spacingBetweenLines56);
                    paragraphProperties56.Append(justification37);
                    paragraphProperties56.Append(paragraphMarkRunProperties55);



                    Run run180 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties180 = new RunProperties();
                    RunFonts runFonts235 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize234 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript208 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages232 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties180.Append(runFonts235);
                    runProperties180.Append(fontSize234);
                    runProperties180.Append(fontSizeComplexScript208);
                    runProperties180.Append(languages232);
                    Text text179 = new Text();
                    text179.Text = "Active strategies can underperform the market, sometimes significantly, if an investment managerâ€™s style is out of favour or they make a decision that is proven to be wrong.";

                    run180.Append(runProperties180);
                    run180.Append(text179);

                    paragraph56.Append(paragraphProperties56);
                    paragraph56.Append(run180);

                    Paragraph paragraph57 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties57 = new ParagraphProperties();

                    NumberingProperties numberingProperties28 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference28 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId28 = new NumberingId() { Val = 1 }; ;

                    numberingProperties28.Append(numberingLevelReference28);
                    numberingProperties28.Append(numberingId28);
                    SuppressAutoHyphens suppressAutoHyphens57 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines57 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification38 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties56 = new ParagraphMarkRunProperties();
                    RunFonts runFonts236 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize235 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript209 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages233 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties56.Append(runFonts236);
                    paragraphMarkRunProperties56.Append(fontSize235);
                    paragraphMarkRunProperties56.Append(fontSizeComplexScript209);
                    paragraphMarkRunProperties56.Append(languages233);

                    paragraphProperties57.Append(numberingProperties28);
                    paragraphProperties57.Append(suppressAutoHyphens57);
                    paragraphProperties57.Append(spacingBetweenLines57);
                    paragraphProperties57.Append(justification38);
                    paragraphProperties57.Append(paragraphMarkRunProperties56);

                    Run run183 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties183 = new RunProperties();
                    RunFonts runFonts239 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize238 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript212 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages236 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties183.Append(runFonts239);
                    runProperties183.Append(fontSize238);
                    runProperties183.Append(fontSizeComplexScript212);
                    runProperties183.Append(languages236);
                    Text text182 = new Text();
                    text182.Text = "Not all active strategies have the same level of active risk â€“ one active strategy may be riskier than another.";

                    run183.Append(runProperties183);
                    run183.Append(text182);

                    paragraph57.Append(paragraphProperties57);

                    paragraph57.Append(run183);
                    tableCell11.Append(paragraph55);
                    tableCell11.Append(paragraph56);
                    tableCell11.Append(paragraph57);

                }

                if (totalSum > ((decimal)0.75 * productSum))
                {
                    Paragraph paragraph58 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties58 = new ParagraphProperties();

                    NumberingProperties numberingProperties29 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference29 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId29 = new NumberingId() { Val = 1 }; ;

                    numberingProperties29.Append(numberingLevelReference29);
                    numberingProperties29.Append(numberingId29);
                    SuppressAutoHyphens suppressAutoHyphens58 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines58 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification39 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties57 = new ParagraphMarkRunProperties();
                    RunFonts runFonts240 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize239 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript213 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages237 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties57.Append(runFonts240);
                    paragraphMarkRunProperties57.Append(fontSize239);
                    paragraphMarkRunProperties57.Append(fontSizeComplexScript213);
                    paragraphMarkRunProperties57.Append(languages237);

                    paragraphProperties58.Append(numberingProperties29);
                    paragraphProperties58.Append(suppressAutoHyphens58);
                    paragraphProperties58.Append(spacingBetweenLines58);
                    paragraphProperties58.Append(justification39);
                    paragraphProperties58.Append(paragraphMarkRunProperties57);

                    Run run185 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties185 = new RunProperties();
                    RunFonts runFonts242 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize241 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript215 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages239 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties185.Append(runFonts242);
                    runProperties185.Append(fontSize241);
                    runProperties185.Append(fontSizeComplexScript215);
                    runProperties185.Append(languages239);
                    Text text184 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text184.Text = "Passive strategies only seek to match, not ";

                    run185.Append(runProperties185);
                    run185.Append(text184);

                    Run run186 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties186 = new RunProperties();
                    RunFonts runFonts243 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize242 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript216 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages240 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties186.Append(runFonts243);
                    runProperties186.Append(fontSize242);
                    runProperties186.Append(fontSizeComplexScript216);
                    runProperties186.Append(languages240);
                    LastRenderedPageBreak lastRenderedPageBreak3 = new LastRenderedPageBreak();
                    Text text185 = new Text();
                    text185.Text = "outperform an underlying benchmark or index. Passive investing employs a constant strategy, irrespective of market valuations.";

                    run186.Append(runProperties186);
                    run186.Append(lastRenderedPageBreak3);
                    run186.Append(text185);

                    paragraph58.Append(paragraphProperties58);
                    paragraph58.Append(run185);
                    paragraph58.Append(run186);

                    Paragraph paragraph59 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties59 = new ParagraphProperties();

                    NumberingProperties numberingProperties30 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference30 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId30 = new NumberingId() { Val = 1 }; ;

                    numberingProperties30.Append(numberingLevelReference30);
                    numberingProperties30.Append(numberingId30);
                    SuppressAutoHyphens suppressAutoHyphens59 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines59 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification40 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties58 = new ParagraphMarkRunProperties();
                    RunFonts runFonts244 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize243 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript217 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages241 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties58.Append(runFonts244);
                    paragraphMarkRunProperties58.Append(fontSize243);
                    paragraphMarkRunProperties58.Append(fontSizeComplexScript217);
                    paragraphMarkRunProperties58.Append(languages241);

                    paragraphProperties59.Append(numberingProperties30);
                    paragraphProperties59.Append(suppressAutoHyphens59);
                    paragraphProperties59.Append(spacingBetweenLines59);
                    paragraphProperties59.Append(justification40);
                    paragraphProperties59.Append(paragraphMarkRunProperties58);

                    Run run188 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties188 = new RunProperties();
                    RunFonts runFonts246 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize245 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript219 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages243 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties188.Append(runFonts246);
                    runProperties188.Append(fontSize245);
                    runProperties188.Append(fontSizeComplexScript219);
                    runProperties188.Append(languages243);
                    Text text187 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text187.Text = "Rather than investing in securities directly, some passive strategies gain market exposure through derivatives or swaps. In these instances, counterparty risk is introduced and this should be considered. ";

                    run188.Append(runProperties188);
                    run188.Append(text187);

                    paragraph59.Append(paragraphProperties59);
                    paragraph59.Append(run188);

                    tableCell11.Append(paragraph58);
                    tableCell11.Append(paragraph59);
                }

                if (isDirectShare == true || hasEquityInvestment == true)
                {

                    Paragraph paragraph60 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties60 = new ParagraphProperties();

                    //  ParagraphStyleId paragraphStyleId = new ParagraphStyleId() { Val = "ListParagraph" };
                    NumberingProperties numberingProperties31 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference31 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId31 = new NumberingId() { Val = 1 }; ;

                    //NumberingProperties numberingProperties31 = new NumberingProperties();
                    //NumberingLevelReference numberingLevelReference31 = new NumberingLevelReference() { Val = 0 };
                    //NumberingId numberingId31 = new NumberingId() { Val = 1 };;

                    numberingProperties31.Append(numberingLevelReference31);
                    numberingProperties31.Append(numberingId31);
                    SuppressAutoHyphens suppressAutoHyphens60 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines60 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification41 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties59 = new ParagraphMarkRunProperties();
                    RunFonts runFonts247 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Arial" };
                    FontSize fontSize246 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript220 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages244 = new Languages() { Val = "en-AU", EastAsia = "ar-SA" };

                    paragraphMarkRunProperties59.Append(runFonts247);
                    paragraphMarkRunProperties59.Append(fontSize246);
                    paragraphMarkRunProperties59.Append(fontSizeComplexScript220);
                    paragraphMarkRunProperties59.Append(languages244);

                    // paragraphProperties60.Append(paragraphStyleId);
                    paragraphProperties60.Append(numberingProperties31);
                    paragraphProperties60.Append(suppressAutoHyphens60);
                    paragraphProperties60.Append(spacingBetweenLines60);
                    paragraphProperties60.Append(justification41);
                    paragraphProperties60.Append(paragraphMarkRunProperties59);

                    Run run190 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties190 = new RunProperties();
                    RunFonts runFonts249 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Arial" };
                    FontSize fontSize248 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript222 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages246 = new Languages() { Val = "en-AU", EastAsia = "ar-SA" };

                    runProperties190.Append(runFonts249);
                    runProperties190.Append(fontSize248);
                    runProperties190.Append(fontSizeComplexScript222);
                    runProperties190.Append(languages246);
                    Text text189 = new Text();
                    text189.Text = "While equity investing offers the potential for higher returns relative to other investments, you must consider the risk of capital loss against the risk of not meeting your investment objectives if investing in other asset classes.";

                    run190.Append(runProperties190);
                    run190.Append(text189);

                    paragraph60.Append(paragraphProperties60);
                    paragraph60.Append(run190);

                    tableCell11.Append(paragraph60);

                }

                if (isDirectShare == true)
                {
                    Paragraph paragraph61 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties61 = new ParagraphProperties();

                    NumberingProperties numberingProperties32 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference32 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId32 = new NumberingId() { Val = 1 }; ;

                    numberingProperties32.Append(numberingLevelReference32);
                    numberingProperties32.Append(numberingId32);
                    SuppressAutoHyphens suppressAutoHyphens61 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines61 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification42 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties60 = new ParagraphMarkRunProperties();
                    RunFonts runFonts250 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Arial" };
                    FontSize fontSize249 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript223 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages247 = new Languages() { Val = "en-AU", EastAsia = "ar-SA" };

                    paragraphMarkRunProperties60.Append(runFonts250);
                    paragraphMarkRunProperties60.Append(fontSize249);
                    paragraphMarkRunProperties60.Append(fontSizeComplexScript223);
                    paragraphMarkRunProperties60.Append(languages247);

                    paragraphProperties61.Append(numberingProperties32);
                    paragraphProperties61.Append(suppressAutoHyphens61);
                    paragraphProperties61.Append(spacingBetweenLines61);
                    paragraphProperties61.Append(justification42);
                    paragraphProperties61.Append(paragraphMarkRunProperties60);



                    Run run194 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties194 = new RunProperties();
                    RunFonts runFonts254 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Arial" };
                    FontSize fontSize253 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript227 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages251 = new Languages() { Val = "en-AU", EastAsia = "ar-SA" };

                    runProperties194.Append(runFonts254);
                    runProperties194.Append(fontSize253);
                    runProperties194.Append(fontSizeComplexScript227);
                    runProperties194.Append(languages251);
                    Text text193 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text193.Text = "Share prices can be volatile - prices can rise and fall rapidly and clients must accept that the value of the shares may fluctuate considerably over time.";

                    run194.Append(runProperties194);
                    run194.Append(text193);

                    paragraph61.Append(paragraphProperties61);
                    paragraph61.Append(run194);

                    Paragraph paragraph62 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties62 = new ParagraphProperties();

                    NumberingProperties numberingProperties33 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference33 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId33 = new NumberingId() { Val = 1 }; ;

                    numberingProperties33.Append(numberingLevelReference33);
                    numberingProperties33.Append(numberingId33);
                    SuppressAutoHyphens suppressAutoHyphens62 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines62 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification43 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties61 = new ParagraphMarkRunProperties();
                    RunFonts runFonts255 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize254 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript228 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages252 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties61.Append(runFonts255);
                    paragraphMarkRunProperties61.Append(fontSize254);
                    paragraphMarkRunProperties61.Append(fontSizeComplexScript228);
                    paragraphMarkRunProperties61.Append(languages252);

                    paragraphProperties62.Append(numberingProperties33);
                    paragraphProperties62.Append(suppressAutoHyphens62);
                    paragraphProperties62.Append(spacingBetweenLines62);
                    paragraphProperties62.Append(justification43);
                    paragraphProperties62.Append(paragraphMarkRunProperties61);



                    Run run198 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties198 = new RunProperties();
                    RunFonts runFonts259 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize258 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript232 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages256 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties198.Append(runFonts259);
                    runProperties198.Append(fontSize258);
                    runProperties198.Append(fontSizeComplexScript232);
                    runProperties198.Append(languages256);
                    Text text197 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text197.Text = "Capital growth and dividends are by no means certain. During the global financial crisis many companies, especially those that paid high dividends, not only went down in value but were also forced to cut dividends to restore their balance sheets.";

                    run198.Append(runProperties198);
                    run198.Append(text197);

                    paragraph62.Append(paragraphProperties62);
                    paragraph62.Append(run198);

                    tableCell11.Append(paragraph61);
                    tableCell11.Append(paragraph62);
                }

                if (isDirectShare == true || hasEquityInvestment == true)
                {
                    Paragraph paragraph63 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties63 = new ParagraphProperties();

                    NumberingProperties numberingProperties34 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference34 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId34 = new NumberingId() { Val = 1 }; ;

                    numberingProperties34.Append(numberingLevelReference34);
                    numberingProperties34.Append(numberingId34);
                    SuppressAutoHyphens suppressAutoHyphens63 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines63 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification44 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties62 = new ParagraphMarkRunProperties();
                    RunFonts runFonts260 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize259 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript233 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages257 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties62.Append(runFonts260);
                    paragraphMarkRunProperties62.Append(fontSize259);
                    paragraphMarkRunProperties62.Append(fontSizeComplexScript233);
                    paragraphMarkRunProperties62.Append(languages257);

                    paragraphProperties63.Append(numberingProperties34);
                    paragraphProperties63.Append(suppressAutoHyphens63);
                    paragraphProperties63.Append(spacingBetweenLines63);
                    paragraphProperties63.Append(justification44);
                    paragraphProperties63.Append(paragraphMarkRunProperties62);



                    Run run200 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties200 = new RunProperties();
                    RunFonts runFonts262 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize261 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript235 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages259 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties200.Append(runFonts262);
                    runProperties200.Append(fontSize261);
                    runProperties200.Append(fontSizeComplexScript235);
                    runProperties200.Append(languages259);
                    Text text199 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text199.Text = "Not all equity strategies have the same risks â€“ one equity strategy may be riskier than another. ";

                    run200.Append(runProperties200);
                    run200.Append(text199);

                    paragraph63.Append(paragraphProperties63);

                    paragraph63.Append(run200);

                    tableCell11.Append(paragraph63);

                }


                if (onlyETF == true)
                {
                    Paragraph paragraph64 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties64 = new ParagraphProperties();

                    NumberingProperties numberingProperties35 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference35 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId35 = new NumberingId() { Val = 1 }; ;

                    numberingProperties35.Append(numberingLevelReference35);
                    numberingProperties35.Append(numberingId35);
                    SuppressAutoHyphens suppressAutoHyphens64 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines64 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification45 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties63 = new ParagraphMarkRunProperties();
                    RunFonts runFonts263 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize262 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript236 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages260 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties63.Append(runFonts263);
                    paragraphMarkRunProperties63.Append(fontSize262);
                    paragraphMarkRunProperties63.Append(fontSizeComplexScript236);
                    paragraphMarkRunProperties63.Append(languages260);

                    paragraphProperties64.Append(numberingProperties35);
                    paragraphProperties64.Append(suppressAutoHyphens64);
                    paragraphProperties64.Append(spacingBetweenLines64);
                    paragraphProperties64.Append(justification45);
                    paragraphProperties64.Append(paragraphMarkRunProperties63);



                    Run run202 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties202 = new RunProperties();
                    RunFonts runFonts265 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize264 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript238 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages262 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties202.Append(runFonts265);
                    runProperties202.Append(fontSize264);
                    runProperties202.Append(fontSizeComplexScript238);
                    runProperties202.Append(languages262);
                    Text text201 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text201.Text = "Most ETF strategies only seek to match, not outperform, an underlying index.";

                    run202.Append(runProperties202);
                    run202.Append(text201);

                    paragraph64.Append(paragraphProperties64);
                    paragraph64.Append(run202);

                    tableCell11.Append(paragraph64);
                }

                if (isDirectProperty == true)
                {
                    Paragraph paragraph65 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties65 = new ParagraphProperties();

                    NumberingProperties numberingProperties36 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference36 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId36 = new NumberingId() { Val = 1 }; ;

                    numberingProperties36.Append(numberingLevelReference36);
                    numberingProperties36.Append(numberingId36);
                    Shading shading8 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF" };
                    SuppressAutoHyphens suppressAutoHyphens65 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines65 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    ContextualSpacing contextualSpacing3 = new ContextualSpacing();
                    Justification justification46 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties64 = new ParagraphMarkRunProperties();
                    RunFonts runFonts266 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Arial" };
                    FontSize fontSize265 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript239 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages263 = new Languages() { Val = "en-GB", EastAsia = "en-GB" };

                    paragraphMarkRunProperties64.Append(runFonts266);
                    paragraphMarkRunProperties64.Append(fontSize265);
                    paragraphMarkRunProperties64.Append(fontSizeComplexScript239);
                    paragraphMarkRunProperties64.Append(languages263);

                    paragraphProperties65.Append(numberingProperties36);
                    paragraphProperties65.Append(shading8);
                    paragraphProperties65.Append(suppressAutoHyphens65);
                    paragraphProperties65.Append(spacingBetweenLines65);
                    paragraphProperties65.Append(contextualSpacing3);
                    paragraphProperties65.Append(justification46);
                    paragraphProperties65.Append(paragraphMarkRunProperties64);



                    Run run204 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties204 = new RunProperties();
                    RunFonts runFonts268 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Times New Roman", ComplexScript = "Arial" };
                    FontSize fontSize267 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript241 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages265 = new Languages() { Val = "en-AU", EastAsia = "ar-SA" };

                    runProperties204.Append(runFonts268);
                    runProperties204.Append(fontSize267);
                    runProperties204.Append(fontSizeComplexScript241);
                    runProperties204.Append(languages265);
                    Text text203 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text203.Text = "Investing in direct property should always be considered an illiquid investment.";

                    run204.Append(runProperties204);
                    run204.Append(text203);

                    paragraph65.Append(paragraphProperties65);
                    paragraph65.Append(run204);

                    tableCell11.Append(paragraph65);
                }

                Paragraph paragraph66 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties66 = new ParagraphProperties();

                NumberingProperties numberingProperties37 = new NumberingProperties();
                NumberingLevelReference numberingLevelReference37 = new NumberingLevelReference() { Val = 0 };
                NumberingId numberingId37 = new NumberingId() { Val = 1 }; ;

                numberingProperties37.Append(numberingLevelReference37);
                numberingProperties37.Append(numberingId37);
                SuppressAutoHyphens suppressAutoHyphens66 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines66 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification47 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties65 = new ParagraphMarkRunProperties();
                RunFonts runFonts269 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Helvetica" };
                FontSize fontSize268 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript242 = new FontSizeComplexScript() { Val = "18" };
                Languages languages266 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties65.Append(runFonts269);
                paragraphMarkRunProperties65.Append(fontSize268);
                paragraphMarkRunProperties65.Append(fontSizeComplexScript242);
                paragraphMarkRunProperties65.Append(languages266);

                paragraphProperties66.Append(numberingProperties37);
                paragraphProperties66.Append(suppressAutoHyphens66);
                paragraphProperties66.Append(spacingBetweenLines66);
                paragraphProperties66.Append(justification47);
                paragraphProperties66.Append(paragraphMarkRunProperties65);

                Run run205 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties205 = new RunProperties();
                RunFonts runFonts270 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize269 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript243 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight67 = new Highlight() { Val = HighlightColorValues.Cyan };
                Languages languages267 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties205.Append(runFonts270);
                runProperties205.Append(fontSize269);
                runProperties205.Append(fontSizeComplexScript243);
                runProperties205.Append(highlight67);
                runProperties205.Append(languages267);
                Text text204 = new Text();
                text204.Text = "[If frozen fund]";

                run205.Append(runProperties205);
                run205.Append(text204);

                Run run206 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties206 = new RunProperties();
                RunFonts runFonts271 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize270 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript244 = new FontSizeComplexScript() { Val = "18" };
                Languages languages268 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties206.Append(runFonts271);
                runProperties206.Append(fontSize270);
                runProperties206.Append(fontSizeComplexScript244);
                runProperties206.Append(languages268);
                Text text205 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text205.Text = " Your existing portfolio has exposure to ";

                run206.Append(runProperties206);
                run206.Append(text205);

                Run run207 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties207 = new RunProperties();
                RunFonts runFonts272 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize271 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript245 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight68 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages269 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties207.Append(runFonts272);
                runProperties207.Append(fontSize271);
                runProperties207.Append(fontSizeComplexScript245);
                runProperties207.Append(highlight68);
                runProperties207.Append(languages269);
                Text text206 = new Text();
                text206.Text = "name of frozen fund/s";

                run207.Append(runProperties207);
                run207.Append(text206);

                Run run208 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties208 = new RunProperties();
                RunFonts runFonts273 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize272 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript246 = new FontSizeComplexScript() { Val = "18" };
                Languages languages270 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties208.Append(runFonts273);
                runProperties208.Append(fontSize272);
                runProperties208.Append(fontSizeComplexScript246);
                runProperties208.Append(languages270);
                Text text207 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text207.Text = " which ";

                run208.Append(runProperties208);
                run208.Append(text207);

                Run run209 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties209 = new RunProperties();
                RunFonts runFonts274 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize273 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript247 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight69 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages271 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties209.Append(runFonts274);
                runProperties209.Append(fontSize273);
                runProperties209.Append(fontSizeComplexScript247);
                runProperties209.Append(highlight69);
                runProperties209.Append(languages271);
                Text text208 = new Text();
                text208.Text = "is/are";

                run209.Append(runProperties209);
                run209.Append(text208);

                Run run210 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties210 = new RunProperties();
                RunFonts runFonts275 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize274 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript248 = new FontSizeComplexScript() { Val = "18" };
                Languages languages272 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties210.Append(runFonts275);
                runProperties210.Append(fontSize274);
                runProperties210.Append(fontSizeComplexScript248);
                runProperties210.Append(languages272);
                Text text209 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text209.Text = " currently frozen for ";

                run210.Append(runProperties210);
                run210.Append(text209);

                Run run211 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties211 = new RunProperties();
                RunFonts runFonts276 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize275 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript249 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight70 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages273 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties211.Append(runFonts276);
                runProperties211.Append(fontSize275);
                runProperties211.Append(fontSizeComplexScript249);
                runProperties211.Append(highlight70);
                runProperties211.Append(languages273);
                Text text210 = new Text();
                text210.Text = "redemption/s";

                run211.Append(runProperties211);
                run211.Append(text210);

                Run run212 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties212 = new RunProperties();
                RunFonts runFonts277 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize276 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript250 = new FontSizeComplexScript() { Val = "18" };
                Languages languages274 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties212.Append(runFonts277);
                runProperties212.Append(fontSize276);
                runProperties212.Append(fontSizeComplexScript250);
                runProperties212.Append(languages274);
                Text text211 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text211.Text = " and therefore would need to be retained. ";

                run212.Append(runProperties212);
                run212.Append(text211);

                Run run213 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties213 = new RunProperties();
                RunFonts runFonts278 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize277 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript251 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight71 = new Highlight() { Val = HighlightColorValues.Cyan };
                Languages languages275 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties213.Append(runFonts278);
                runProperties213.Append(fontSize277);
                runProperties213.Append(fontSizeComplexScript251);
                runProperties213.Append(highlight71);
                runProperties213.Append(languages275);
                Text text212 = new Text();
                text212.Text = "[If Adviser has NOT specified outcome]";

                run213.Append(runProperties213);
                run213.Append(text212);

                Run run214 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties214 = new RunProperties();
                RunFonts runFonts279 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize278 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript252 = new FontSizeComplexScript() { Val = "18" };
                Languages languages276 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties214.Append(runFonts279);
                runProperties214.Append(fontSize278);
                runProperties214.Append(fontSizeComplexScript252);
                runProperties214.Append(languages276);
                Text text213 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text213.Text = " Once ";

                run214.Append(runProperties214);
                run214.Append(text213);

                Run run215 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties215 = new RunProperties();
                RunFonts runFonts280 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Helvetica" };
                FontSize fontSize279 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript253 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight72 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages277 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties215.Append(runFonts280);
                runProperties215.Append(fontSize279);
                runProperties215.Append(fontSizeComplexScript253);
                runProperties215.Append(highlight72);
                runProperties215.Append(languages277);
                Text text214 = new Text();
                text214.Text = "this/these fund/s is/are";

                run215.Append(runProperties215);
                run215.Append(text214);

                Run run216 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties216 = new RunProperties();
                RunFonts runFonts281 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Helvetica" };
                FontSize fontSize280 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript254 = new FontSizeComplexScript() { Val = "18" };
                Languages languages278 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties216.Append(runFonts281);
                runProperties216.Append(fontSize280);
                runProperties216.Append(fontSizeComplexScript254);
                runProperties216.Append(languages278);
                Text text215 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text215.Text = " ";

                run216.Append(runProperties216);
                run216.Append(text215);

                Run run217 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties217 = new RunProperties();
                RunFonts runFonts282 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize281 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript255 = new FontSizeComplexScript() { Val = "18" };
                Languages languages279 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties217.Append(runFonts282);
                runProperties217.Append(fontSize281);
                runProperties217.Append(fontSizeComplexScript255);
                runProperties217.Append(languages279);
                Text text216 = new Text();
                text216.Text = "open for withdrawals, we will review your situation and may recommend you exit the investmen";

                run217.Append(runProperties217);
                run217.Append(text216);

                Run run218 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties218 = new RunProperties();
                RunFonts runFonts283 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize282 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript256 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight73 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages280 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties218.Append(runFonts283);
                runProperties218.Append(fontSize282);
                runProperties218.Append(fontSizeComplexScript256);
                runProperties218.Append(highlight73);
                runProperties218.Append(languages280);
                Text text217 = new Text();
                text217.Text = "t/s";

                run218.Append(runProperties218);
                run218.Append(text217);

                Run run219 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties219 = new RunProperties();
                RunFonts runFonts284 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize283 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript257 = new FontSizeComplexScript() { Val = "18" };
                Languages languages281 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties219.Append(runFonts284);
                runProperties219.Append(fontSize283);
                runProperties219.Append(fontSizeComplexScript257);
                runProperties219.Append(languages281);
                Text text218 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text218.Text = ", provided the sale price is suitable at the time offers are made to unit holders. ";

                run219.Append(runProperties219);
                run219.Append(text218);

                Run run220 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties220 = new RunProperties();
                RunFonts runFonts285 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize284 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript258 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight74 = new Highlight() { Val = HighlightColorValues.Cyan };
                Languages languages282 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties220.Append(runFonts285);
                runProperties220.Append(fontSize284);
                runProperties220.Append(fontSizeComplexScript258);
                runProperties220.Append(highlight74);
                runProperties220.Append(languages282);
                Text text219 = new Text();
                text219.Text = "[If Adviser HAS specified outcome]";

                run220.Append(runProperties220);
                run220.Append(text219);

                Run run221 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties221 = new RunProperties();
                RunFonts runFonts286 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize285 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript259 = new FontSizeComplexScript() { Val = "18" };
                Languages languages283 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties221.Append(runFonts286);
                runProperties221.Append(fontSize285);
                runProperties221.Append(fontSizeComplexScript259);
                runProperties221.Append(languages283);
                Text text220 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text220.Text = " ";

                run221.Append(runProperties221);
                run221.Append(text220);

                Run run222 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties222 = new RunProperties();
                RunFonts runFonts287 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Helvetica" };
                FontSize fontSize286 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript260 = new FontSizeComplexScript() { Val = "18" };
                Languages languages284 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties222.Append(runFonts287);
                runProperties222.Append(fontSize286);
                runProperties222.Append(fontSizeComplexScript260);
                runProperties222.Append(languages284);
                Text text221 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text221.Text = "Once ";

                run222.Append(runProperties222);
                run222.Append(text221);

                Run run223 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties223 = new RunProperties();
                RunFonts runFonts288 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Helvetica" };
                FontSize fontSize287 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript261 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight75 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages285 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties223.Append(runFonts288);
                runProperties223.Append(fontSize287);
                runProperties223.Append(fontSizeComplexScript261);
                runProperties223.Append(highlight75);
                runProperties223.Append(languages285);
                Text text222 = new Text();
                text222.Text = "this/these fund/s is/are";

                run223.Append(runProperties223);
                run223.Append(text222);

                Run run224 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties224 = new RunProperties();
                RunFonts runFonts289 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Helvetica" };
                FontSize fontSize288 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript262 = new FontSizeComplexScript() { Val = "18" };
                Languages languages286 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties224.Append(runFonts289);
                runProperties224.Append(fontSize288);
                runProperties224.Append(fontSizeComplexScript262);
                runProperties224.Append(languages286);
                Text text223 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text223.Text = " open for withdrawals, we recommend you redeem ";

                run224.Append(runProperties224);
                run224.Append(text223);

                Run run225 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties225 = new RunProperties();
                RunFonts runFonts290 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Helvetica" };
                FontSize fontSize289 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript263 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight76 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages287 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties225.Append(runFonts290);
                runProperties225.Append(fontSize289);
                runProperties225.Append(fontSizeComplexScript263);
                runProperties225.Append(highlight76);
                runProperties225.Append(languages287);
                Text text224 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text224.Text = "this/these fund/s ";

                run225.Append(runProperties225);
                run225.Append(text224);

                Run run226 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties226 = new RunProperties();
                RunFonts runFonts291 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Helvetica" };
                FontSize fontSize290 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript264 = new FontSizeComplexScript() { Val = "18" };
                Languages languages288 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties226.Append(runFonts291);
                runProperties226.Append(fontSize290);
                runProperties226.Append(fontSizeComplexScript264);
                runProperties226.Append(languages288);
                Text text225 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text225.Text = "and ";

                run226.Append(runProperties226);
                run226.Append(text225);

                Run run227 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties227 = new RunProperties();
                RunFonts runFonts292 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Helvetica" };
                FontSize fontSize291 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript265 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight77 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages289 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties227.Append(runFonts292);
                runProperties227.Append(fontSize291);
                runProperties227.Append(fontSizeComplexScript265);
                runProperties227.Append(highlight77);
                runProperties227.Append(languages289);
                Text text226 = new Text();
                text226.Text = "invest the proceeds in xxxx";

                run227.Append(runProperties227);
                run227.Append(text226);

                Run run228 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties228 = new RunProperties();
                RunFonts runFonts293 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Helvetica" };
                FontSize fontSize292 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript266 = new FontSizeComplexScript() { Val = "18" };
                Languages languages290 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties228.Append(runFonts293);
                runProperties228.Append(fontSize292);
                runProperties228.Append(fontSizeComplexScript266);
                runProperties228.Append(languages290);
                Text text227 = new Text();
                text227.Text = ", provided the sale price is suitable at the time offers are made to unit holders.";

                run228.Append(runProperties228);
                run228.Append(text227);

                paragraph66.Append(paragraphProperties66);
                paragraph66.Append(run205);
                paragraph66.Append(run206);
                paragraph66.Append(run207);
                paragraph66.Append(run208);
                paragraph66.Append(run209);
                paragraph66.Append(run210);
                paragraph66.Append(run211);
                paragraph66.Append(run212);
                paragraph66.Append(run213);
                paragraph66.Append(run214);
                paragraph66.Append(run215);
                paragraph66.Append(run216);
                paragraph66.Append(run217);
                paragraph66.Append(run218);
                paragraph66.Append(run219);
                paragraph66.Append(run220);
                paragraph66.Append(run221);
                paragraph66.Append(run222);
                paragraph66.Append(run223);
                paragraph66.Append(run224);
                paragraph66.Append(run225);
                paragraph66.Append(run226);
                paragraph66.Append(run227);
                paragraph66.Append(run228);

                tableCell11.Append(paragraph66);


                if (pf.SubType == "Voyage")
                {
                    Paragraph paragraph67 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties67 = new ParagraphProperties();

                    NumberingProperties numberingProperties38 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference38 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId38 = new NumberingId() { Val = 1 }; ;

                    numberingProperties38.Append(numberingLevelReference38);
                    numberingProperties38.Append(numberingId38);

                    Tabs tabs7 = new Tabs();
                    TabStop tabStop7 = new TabStop() { Val = TabStopValues.Left, Position = 0 };

                    tabs7.Append(tabStop7);
                    SuppressAutoHyphens suppressAutoHyphens67 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines67 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification48 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties66 = new ParagraphMarkRunProperties();
                    RunFonts runFonts294 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize293 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript267 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages291 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties66.Append(runFonts294);
                    paragraphMarkRunProperties66.Append(fontSize293);
                    paragraphMarkRunProperties66.Append(fontSizeComplexScript267);
                    paragraphMarkRunProperties66.Append(languages291);

                    paragraphProperties67.Append(numberingProperties38);
                    paragraphProperties67.Append(tabs7);
                    paragraphProperties67.Append(suppressAutoHyphens67);
                    paragraphProperties67.Append(spacingBetweenLines67);
                    paragraphProperties67.Append(justification48);
                    paragraphProperties67.Append(paragraphMarkRunProperties66);



                    Run run230 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties230 = new RunProperties();
                    RunFonts runFonts296 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize295 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript269 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages293 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties230.Append(runFonts296);
                    runProperties230.Append(fontSize295);
                    runProperties230.Append(fontSizeComplexScript269);
                    runProperties230.Append(languages293);
                    Text text229 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text229.Text = "All transactions within Voyage need to be performed by your adviser. If you require a transaction and your adviser is not available, a delay may result.";

                    run230.Append(runProperties230);
                    run230.Append(text229);

                    paragraph67.Append(paragraphProperties67);
                    paragraph67.Append(run230);

                    Paragraph paragraph68 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties68 = new ParagraphProperties();

                    NumberingProperties numberingProperties39 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference39 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId39 = new NumberingId() { Val = 1 }; ;

                    numberingProperties39.Append(numberingLevelReference39);
                    numberingProperties39.Append(numberingId39);

                    Tabs tabs8 = new Tabs();
                    TabStop tabStop8 = new TabStop() { Val = TabStopValues.Left, Position = 0 };

                    tabs8.Append(tabStop8);
                    SuppressAutoHyphens suppressAutoHyphens68 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines68 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification49 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties67 = new ParagraphMarkRunProperties();
                    RunFonts runFonts297 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize296 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript270 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages294 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties67.Append(runFonts297);
                    paragraphMarkRunProperties67.Append(fontSize296);
                    paragraphMarkRunProperties67.Append(fontSizeComplexScript270);
                    paragraphMarkRunProperties67.Append(languages294);

                    paragraphProperties68.Append(numberingProperties39);
                    paragraphProperties68.Append(tabs8);
                    paragraphProperties68.Append(suppressAutoHyphens68);
                    paragraphProperties68.Append(spacingBetweenLines68);
                    paragraphProperties68.Append(justification49);
                    paragraphProperties68.Append(paragraphMarkRunProperties67);



                    Run run232 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties232 = new RunProperties();
                    RunFonts runFonts299 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize298 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript272 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages296 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties232.Append(runFonts299);
                    runProperties232.Append(fontSize298);
                    runProperties232.Append(fontSizeComplexScript272);
                    runProperties232.Append(languages296);
                    Text text231 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text231.Text = "Your investment portfolio is required to hold a minimum amount of cash. This amount varies and is generally a percentage of your portfolio value (Between $300 and up to $10,000).";

                    run232.Append(runProperties232);
                    run232.Append(text231);

                    paragraph68.Append(paragraphProperties68);
                    paragraph68.Append(run232);

                    tableCell11.Append(paragraph67);
                    tableCell11.Append(paragraph68);
                }

                if (pf.SubType == "GrowWrap")
                {
                    Paragraph paragraph69 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties69 = new ParagraphProperties();

                    NumberingProperties numberingProperties40 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference40 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId40 = new NumberingId() { Val = 1 }; ;

                    numberingProperties40.Append(numberingLevelReference40);
                    numberingProperties40.Append(numberingId40);

                    Tabs tabs9 = new Tabs();
                    TabStop tabStop9 = new TabStop() { Val = TabStopValues.Left, Position = 0 };

                    tabs9.Append(tabStop9);
                    SuppressAutoHyphens suppressAutoHyphens69 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines69 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification50 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties68 = new ParagraphMarkRunProperties();
                    RunFonts runFonts300 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize299 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript273 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages297 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties68.Append(runFonts300);
                    paragraphMarkRunProperties68.Append(fontSize299);
                    paragraphMarkRunProperties68.Append(fontSizeComplexScript273);
                    paragraphMarkRunProperties68.Append(languages297);

                    paragraphProperties69.Append(numberingProperties40);
                    paragraphProperties69.Append(tabs9);
                    paragraphProperties69.Append(suppressAutoHyphens69);
                    paragraphProperties69.Append(spacingBetweenLines69);
                    paragraphProperties69.Append(justification50);
                    paragraphProperties69.Append(paragraphMarkRunProperties68);

                    Run run234 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties234 = new RunProperties();
                    RunFonts runFonts302 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize301 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript275 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages299 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties234.Append(runFonts302);
                    runProperties234.Append(fontSize301);
                    runProperties234.Append(fontSizeComplexScript275);
                    runProperties234.Append(languages299);
                    Text text233 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text233.Text = "All transactions within Grow Wrap need to be performed by your Adviser. If you do not have an adviser, you accept responsibility to manage your account. Grow Wrap will accept written instructions to place transactions on your account however there may be delays in processing these instructions resulting in material effects to your investment.";

                    run234.Append(runProperties234);
                    run234.Append(text233);

                    paragraph69.Append(paragraphProperties69);
                    paragraph69.Append(run234);

                    tableCell11.Append(paragraph69);
                }


                if (hasGWInvestment == true)
                {
                    Paragraph paragraph70 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties70 = new ParagraphProperties();

                    NumberingProperties numberingProperties41 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference41 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId41 = new NumberingId() { Val = 1 }; ;

                    numberingProperties41.Append(numberingLevelReference41);
                    numberingProperties41.Append(numberingId41);

                    Tabs tabs10 = new Tabs();
                    TabStop tabStop10 = new TabStop() { Val = TabStopValues.Left, Position = 0 };

                    tabs10.Append(tabStop10);
                    SuppressAutoHyphens suppressAutoHyphens70 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines70 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification51 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties69 = new ParagraphMarkRunProperties();
                    RunFonts runFonts303 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize302 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript276 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages300 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties69.Append(runFonts303);
                    paragraphMarkRunProperties69.Append(fontSize302);
                    paragraphMarkRunProperties69.Append(fontSizeComplexScript276);
                    paragraphMarkRunProperties69.Append(languages300);

                    paragraphProperties70.Append(numberingProperties41);
                    paragraphProperties70.Append(tabs10);
                    paragraphProperties70.Append(suppressAutoHyphens70);
                    paragraphProperties70.Append(spacingBetweenLines70);
                    paragraphProperties70.Append(justification51);
                    paragraphProperties70.Append(paragraphMarkRunProperties69);



                    Run run236 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties236 = new RunProperties();
                    RunFonts runFonts305 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize304 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript278 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages302 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties236.Append(runFonts305);
                    runProperties236.Append(fontSize304);
                    runProperties236.Append(fontSizeComplexScript278);
                    runProperties236.Append(languages302);
                    Text text235 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text235.Text = "If the cash account in your portfolio falls below $2,500, you may be asked to top the account up or sell some investments to replenish the balance to at least $2,500. ";

                    run236.Append(runProperties236);
                    run236.Append(text235);

                    Run run237 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties237 = new RunProperties();
                    RunFonts runFonts306 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize305 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript279 = new FontSizeComplexScript() { Val = "18" };
                    Highlight highlight82 = new Highlight() { Val = HighlightColorValues.Cyan };
                    Languages languages303 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties237.Append(runFonts306);
                    runProperties237.Append(fontSize305);
                    runProperties237.Append(fontSizeComplexScript279);
                    runProperties237.Append(highlight82);
                    runProperties237.Append(languages303);
                    Text text236 = new Text();
                    text236.Text = "[Please check the PDS if minimum is correct]";

                    run237.Append(runProperties237);
                    run237.Append(text236);

                    paragraph70.Append(paragraphProperties70);
                    paragraph70.Append(run236);
                    paragraph70.Append(run237);

                    tableCell11.Append(paragraph70);
                }

                if (hasGWSP == true)
                {
                    Paragraph paragraph71 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties71 = new ParagraphProperties();

                    NumberingProperties numberingProperties42 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference42 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId42 = new NumberingId() { Val = 1 }; ;

                    numberingProperties42.Append(numberingLevelReference42);
                    numberingProperties42.Append(numberingId42);

                    Tabs tabs11 = new Tabs();
                    TabStop tabStop11 = new TabStop() { Val = TabStopValues.Left, Position = 0 };

                    tabs11.Append(tabStop11);
                    SuppressAutoHyphens suppressAutoHyphens71 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines71 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification52 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties70 = new ParagraphMarkRunProperties();
                    RunFonts runFonts307 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize306 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript280 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages304 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties70.Append(runFonts307);
                    paragraphMarkRunProperties70.Append(fontSize306);
                    paragraphMarkRunProperties70.Append(fontSizeComplexScript280);
                    paragraphMarkRunProperties70.Append(languages304);

                    paragraphProperties71.Append(numberingProperties42);
                    paragraphProperties71.Append(tabs11);
                    paragraphProperties71.Append(suppressAutoHyphens71);
                    paragraphProperties71.Append(spacingBetweenLines71);
                    paragraphProperties71.Append(justification52);
                    paragraphProperties71.Append(paragraphMarkRunProperties70);

                    Run run239 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties239 = new RunProperties();
                    RunFonts runFonts309 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize308 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript282 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages306 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties239.Append(runFonts309);
                    runProperties239.Append(fontSize308);
                    runProperties239.Append(fontSizeComplexScript282);
                    runProperties239.Append(languages306);
                    Text text238 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text238.Text = "If the cash account in your portfolio falls below $2,500, you may be asked to top the account up ";

                    run239.Append(runProperties239);
                    run239.Append(text238);

                    Run run240 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties240 = new RunProperties();
                    RunFonts runFonts310 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize309 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript283 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages307 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties240.Append(runFonts310);
                    runProperties240.Append(fontSize309);
                    runProperties240.Append(fontSizeComplexScript283);
                    runProperties240.Append(languages307);
                    LastRenderedPageBreak lastRenderedPageBreak4 = new LastRenderedPageBreak();
                    Text text239 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text239.Text = "or sell some investments to replenish the balance to at least $2,500. ";

                    run240.Append(runProperties240);
                    run240.Append(lastRenderedPageBreak4);
                    run240.Append(text239);

                    Run run241 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties241 = new RunProperties();
                    RunFonts runFonts311 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize310 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript284 = new FontSizeComplexScript() { Val = "18" };
                    Highlight highlight84 = new Highlight() { Val = HighlightColorValues.Cyan };
                    Languages languages308 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties241.Append(runFonts311);
                    runProperties241.Append(fontSize310);
                    runProperties241.Append(fontSizeComplexScript284);
                    runProperties241.Append(highlight84);
                    runProperties241.Append(languages308);
                    Text text240 = new Text();
                    text240.Text = "[Please check the PDS if minimum is correct]";

                    run241.Append(runProperties241);
                    run241.Append(text240);

                    paragraph71.Append(paragraphProperties71);

                    paragraph71.Append(run239);
                    paragraph71.Append(run240);
                    paragraph71.Append(run241);

                    tableCell11.Append(paragraph71);
                }

                if (pf.SubType == "GrowWrap")
                {
                    Paragraph paragraph72 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties72 = new ParagraphProperties();

                    NumberingProperties numberingProperties43 = new NumberingProperties();
                    NumberingLevelReference numberingLevelReference43 = new NumberingLevelReference() { Val = 0 };
                    NumberingId numberingId43 = new NumberingId() { Val = 1 }; ;

                    numberingProperties43.Append(numberingLevelReference43);
                    numberingProperties43.Append(numberingId43);

                    Tabs tabs12 = new Tabs();
                    TabStop tabStop12 = new TabStop() { Val = TabStopValues.Left, Position = 0 };

                    tabs12.Append(tabStop12);
                    SuppressAutoHyphens suppressAutoHyphens72 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines72 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification53 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties71 = new ParagraphMarkRunProperties();
                    RunFonts runFonts312 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize311 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript285 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages309 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties71.Append(runFonts312);
                    paragraphMarkRunProperties71.Append(fontSize311);
                    paragraphMarkRunProperties71.Append(fontSizeComplexScript285);
                    paragraphMarkRunProperties71.Append(languages309);

                    paragraphProperties72.Append(numberingProperties43);
                    paragraphProperties72.Append(tabs12);
                    paragraphProperties72.Append(suppressAutoHyphens72);
                    paragraphProperties72.Append(spacingBetweenLines72);
                    paragraphProperties72.Append(justification53);
                    paragraphProperties72.Append(paragraphMarkRunProperties71);


                    Run run243 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties243 = new RunProperties();
                    RunFonts runFonts314 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize313 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript287 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages311 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties243.Append(runFonts314);
                    runProperties243.Append(fontSize313);
                    runProperties243.Append(fontSizeComplexScript287);
                    runProperties243.Append(languages311);
                    Text text242 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text242.Text = "The Cash Account is used for all transactions, including fees which are deducted from this account. It is important to regularly review your cash account to check that it continues to hold sufficient funds. ";

                    run243.Append(runProperties243);
                    run243.Append(text242);

                    Run run244 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties244 = new RunProperties();
                    RunFonts runFonts315 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize314 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript288 = new FontSizeComplexScript() { Val = "18" };
                    Highlight highlight86 = new Highlight() { Val = HighlightColorValues.Cyan };
                    Languages languages312 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties244.Append(runFonts315);
                    runProperties244.Append(fontSize314);
                    runProperties244.Append(fontSizeComplexScript288);
                    runProperties244.Append(highlight86);
                    runProperties244.Append(languages312);
                    Text text243 = new Text();
                    text243.Text = "[If applicable]";

                    run244.Append(runProperties244);
                    run244.Append(text243);

                    Run run245 = new Run() { RsidRunProperties = "00482D19" };

                    RunProperties runProperties245 = new RunProperties();
                    RunFonts runFonts316 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                    FontSize fontSize315 = new FontSize() { Val = "18" };
                    FontSizeComplexScript fontSizeComplexScript289 = new FontSizeComplexScript() { Val = "18" };
                    Languages languages313 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    runProperties245.Append(runFonts316);
                    runProperties245.Append(fontSize315);
                    runProperties245.Append(fontSizeComplexScript289);
                    runProperties245.Append(languages313);
                    Text text244 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                    text244.Text = " We will review your cash reserve at each annual review to determine if it needs to be topped.";

                    run245.Append(runProperties245);
                    run245.Append(text244);

                    paragraph72.Append(paragraphProperties72);
                    paragraph72.Append(run243);
                    paragraph72.Append(run244);
                    paragraph72.Append(run245);

                    tableCell11.Append(paragraph72);
                }

                Paragraph paragraph73 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties73 = new ParagraphProperties();

                NumberingProperties numberingProperties44 = new NumberingProperties();
                NumberingLevelReference numberingLevelReference44 = new NumberingLevelReference() { Val = 0 };
                NumberingId numberingId44 = new NumberingId() { Val = 1 }; ;

                numberingProperties44.Append(numberingLevelReference44);
                numberingProperties44.Append(numberingId44);

                Tabs tabs13 = new Tabs();
                TabStop tabStop13 = new TabStop() { Val = TabStopValues.Left, Position = 0 };

                tabs13.Append(tabStop13);
                SuppressAutoHyphens suppressAutoHyphens73 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines73 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification54 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties72 = new ParagraphMarkRunProperties();
                RunFonts runFonts317 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                FontSize fontSize316 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript290 = new FontSizeComplexScript() { Val = "18" };
                Languages languages314 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties72.Append(runFonts317);
                paragraphMarkRunProperties72.Append(fontSize316);
                paragraphMarkRunProperties72.Append(fontSizeComplexScript290);
                paragraphMarkRunProperties72.Append(languages314);

                paragraphProperties73.Append(numberingProperties44);
                paragraphProperties73.Append(tabs13);
                paragraphProperties73.Append(suppressAutoHyphens73);
                paragraphProperties73.Append(spacingBetweenLines73);
                paragraphProperties73.Append(justification54);
                paragraphProperties73.Append(paragraphMarkRunProperties72);

                Run run246 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties246 = new RunProperties();
                RunFonts runFonts318 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                FontSize fontSize317 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript291 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight87 = new Highlight() { Val = HighlightColorValues.Cyan };
                Languages languages315 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties246.Append(runFonts318);
                runProperties246.Append(fontSize317);
                runProperties246.Append(fontSizeComplexScript291);
                runProperties246.Append(highlight87);
                runProperties246.Append(languages315);
                Text text245 = new Text();
                text245.Text = "[If cash funds within portfolio are used to fund pension payments/investment draw downs/ insurance premiums/ adviser fees]";

                run246.Append(runProperties246);
                run246.Append(text245);

                Run run247 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties247 = new RunProperties();
                RunFonts runFonts319 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                FontSize fontSize318 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript292 = new FontSizeComplexScript() { Val = "18" };
                Languages languages316 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties247.Append(runFonts319);
                runProperties247.Append(fontSize318);
                runProperties247.Append(fontSizeComplexScript292);
                runProperties247.Append(languages316);
                Text text246 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text246.Text = " It is important to regularly review your cash reserve to check that it continues to hold sufficient funds. ";

                run247.Append(runProperties247);
                run247.Append(text246);

                Run run248 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties248 = new RunProperties();
                RunFonts runFonts320 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                FontSize fontSize319 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript293 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight88 = new Highlight() { Val = HighlightColorValues.Cyan };
                Languages languages317 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties248.Append(runFonts320);
                runProperties248.Append(fontSize319);
                runProperties248.Append(fontSizeComplexScript293);
                runProperties248.Append(highlight88);
                runProperties248.Append(languages317);
                Text text247 = new Text();
                text247.Text = "[If client is signed up for ongoing service]";

                run248.Append(runProperties248);
                run248.Append(text247);

                Run run249 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties249 = new RunProperties();
                RunFonts runFonts321 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                FontSize fontSize320 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript294 = new FontSizeComplexScript() { Val = "18" };
                Languages languages318 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties249.Append(runFonts321);
                runProperties249.Append(fontSize320);
                runProperties249.Append(fontSizeComplexScript294);
                runProperties249.Append(languages318);
                Text text248 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text248.Text = " We will review your cash reserve at each annual review to determine if it needs to be topped up.";

                run249.Append(runProperties249);
                run249.Append(text248);

                paragraph73.Append(paragraphProperties73);
                paragraph73.Append(run246);
                paragraph73.Append(run247);
                paragraph73.Append(run248);
                paragraph73.Append(run249);

                Paragraph paragraph74 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties74 = new ParagraphProperties();

                NumberingProperties numberingProperties45 = new NumberingProperties();
                NumberingLevelReference numberingLevelReference45 = new NumberingLevelReference() { Val = 0 };
                NumberingId numberingId45 = new NumberingId() { Val = 1 }; ;

                numberingProperties45.Append(numberingLevelReference45);
                numberingProperties45.Append(numberingId45);

                Tabs tabs14 = new Tabs();
                TabStop tabStop14 = new TabStop() { Val = TabStopValues.Left, Position = 0 };

                tabs14.Append(tabStop14);
                SuppressAutoHyphens suppressAutoHyphens74 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines74 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification55 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties73 = new ParagraphMarkRunProperties();
                RunFonts runFonts322 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                FontSize fontSize321 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript295 = new FontSizeComplexScript() { Val = "18" };
                Languages languages319 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties73.Append(runFonts322);
                paragraphMarkRunProperties73.Append(fontSize321);
                paragraphMarkRunProperties73.Append(fontSizeComplexScript295);
                paragraphMarkRunProperties73.Append(languages319);

                paragraphProperties74.Append(numberingProperties45);
                paragraphProperties74.Append(tabs14);
                paragraphProperties74.Append(suppressAutoHyphens74);
                paragraphProperties74.Append(spacingBetweenLines74);
                paragraphProperties74.Append(justification55);
                paragraphProperties74.Append(paragraphMarkRunProperties73);

                Run run250 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties250 = new RunProperties();
                RunFonts runFonts323 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                FontSize fontSize322 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript296 = new FontSizeComplexScript() { Val = "18" };
                Languages languages320 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties250.Append(runFonts323);
                runProperties250.Append(fontSize322);
                runProperties250.Append(fontSizeComplexScript296);
                runProperties250.Append(languages320);
                Text text249 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text249.Text = "Cash ";

                run250.Append(runProperties250);
                run250.Append(text249);

                Run run251 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties251 = new RunProperties();
                RunFonts runFonts324 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                FontSize fontSize323 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript297 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight89 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages321 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties251.Append(runFonts324);
                runProperties251.Append(fontSize323);
                runProperties251.Append(fontSizeComplexScript297);
                runProperties251.Append(highlight89);
                runProperties251.Append(languages321);
                Text text250 = new Text();
                text250.Text = "and term deposit/fixed interest";

                run251.Append(runProperties251);
                run251.Append(text250);

                Run run252 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties252 = new RunProperties();
                RunFonts runFonts325 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                FontSize fontSize324 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript298 = new FontSizeComplexScript() { Val = "18" };
                Languages languages322 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties252.Append(runFonts325);
                runProperties252.Append(fontSize324);
                runProperties252.Append(fontSizeComplexScript298);
                runProperties252.Append(languages322);
                Text text251 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text251.Text = " investments are generally stable however they do not provide any opportunity for long-term capital growth.";

                run252.Append(runProperties252);
                run252.Append(text251);

                paragraph74.Append(paragraphProperties74);
                paragraph74.Append(run250);
                paragraph74.Append(run251);
                paragraph74.Append(run252);

                Paragraph paragraph75 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties75 = new ParagraphProperties();

                NumberingProperties numberingProperties46 = new NumberingProperties();
                NumberingLevelReference numberingLevelReference46 = new NumberingLevelReference() { Val = 0 };
                NumberingId numberingId46 = new NumberingId() { Val = 1 }; ;

                numberingProperties46.Append(numberingLevelReference46);
                numberingProperties46.Append(numberingId46);

                Tabs tabs15 = new Tabs();
                TabStop tabStop15 = new TabStop() { Val = TabStopValues.Left, Position = 0 };

                tabs15.Append(tabStop15);
                SuppressAutoHyphens suppressAutoHyphens75 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines75 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification56 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties74 = new ParagraphMarkRunProperties();
                RunFonts runFonts326 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                FontSize fontSize325 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript299 = new FontSizeComplexScript() { Val = "18" };
                Languages languages323 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties74.Append(runFonts326);
                paragraphMarkRunProperties74.Append(fontSize325);
                paragraphMarkRunProperties74.Append(fontSizeComplexScript299);
                paragraphMarkRunProperties74.Append(languages323);

                paragraphProperties75.Append(numberingProperties46);
                paragraphProperties75.Append(tabs15);
                paragraphProperties75.Append(suppressAutoHyphens75);
                paragraphProperties75.Append(spacingBetweenLines75);
                paragraphProperties75.Append(justification56);
                paragraphProperties75.Append(paragraphMarkRunProperties74);

                Run run253 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties253 = new RunProperties();
                RunFonts runFonts327 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                FontSize fontSize326 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript300 = new FontSizeComplexScript() { Val = "18" };
                Languages languages324 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties253.Append(runFonts327);
                runProperties253.Append(fontSize326);
                runProperties253.Append(fontSizeComplexScript300);
                runProperties253.Append(languages324);
                Text text252 = new Text();
                text252.Text = "Investing provides potential for long-term capital growth however it can also create volatility, which could result in losses. The performance of your investments is not guaranteed and it is important to understand that your expectations for investment return may not be met.";

                run253.Append(runProperties253);
                run253.Append(text252);

                paragraph75.Append(paragraphProperties75);
                paragraph75.Append(run253);

                tableCell11.Append(paragraph73);
                tableCell11.Append(paragraph74);
                tableCell11.Append(paragraph75);

                //TODO: based on wealthsolver name
                Paragraph paragraph76 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties76 = new ParagraphProperties();

                NumberingProperties numberingProperties47 = new NumberingProperties();
                NumberingLevelReference numberingLevelReference47 = new NumberingLevelReference() { Val = 0 };
                NumberingId numberingId47 = new NumberingId() { Val = 1 }; ;

                numberingProperties47.Append(numberingLevelReference47);
                numberingProperties47.Append(numberingId47);

                Tabs tabs16 = new Tabs();
                TabStop tabStop16 = new TabStop() { Val = TabStopValues.Left, Position = 0 };

                tabs16.Append(tabStop16);
                SuppressAutoHyphens suppressAutoHyphens76 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines76 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification57 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties75 = new ParagraphMarkRunProperties();
                RunFonts runFonts328 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                FontSize fontSize327 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript301 = new FontSizeComplexScript() { Val = "18" };
                Languages languages325 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties75.Append(runFonts328);
                paragraphMarkRunProperties75.Append(fontSize327);
                paragraphMarkRunProperties75.Append(fontSizeComplexScript301);
                paragraphMarkRunProperties75.Append(languages325);

                paragraphProperties76.Append(numberingProperties47);
                paragraphProperties76.Append(tabs16);
                paragraphProperties76.Append(suppressAutoHyphens76);
                paragraphProperties76.Append(spacingBetweenLines76);
                paragraphProperties76.Append(justification57);
                paragraphProperties76.Append(paragraphMarkRunProperties75);

                Run run254 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties254 = new RunProperties();
                RunFonts runFonts329 = new RunFonts() { Ascii = "Arial", HighAnsi = "Arial", EastAsia = "Calibri", ComplexScript = "Arial" };
                FontSize fontSize328 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript302 = new FontSizeComplexScript() { Val = "18" };
                Languages languages326 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties254.Append(runFonts329);
                runProperties254.Append(fontSize328);
                runProperties254.Append(fontSizeComplexScript302);
                runProperties254.Append(languages326);
                Text text253 = new Text();
                text253.Text = "â€Œ";

                run254.Append(runProperties254);
                run254.Append(text253);

                //Run run255 = new Run() { RsidRunProperties = "00482D19" };

                //RunProperties runProperties255 = new RunProperties();
                //RunFonts runFonts330 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                //FontSize fontSize329 = new FontSize() { Val = "18" };
                //FontSizeComplexScript fontSizeComplexScript303 = new FontSizeComplexScript() { Val = "18" };
                //Highlight highlight90 = new Highlight() { Val = HighlightColorValues.Cyan };
                //Languages languages327 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                //runProperties255.Append(runFonts330);
                //runProperties255.Append(fontSize329);
                //runProperties255.Append(fontSizeComplexScript303);
                //runProperties255.Append(highlight90);
                //runProperties255.Append(languages327);
                //Text text254 = new Text();
                //text254.Text = "[If term deposit in recommended portfolio]";

                //run255.Append(runProperties255);
                //run255.Append(text254);

                Run run256 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties256 = new RunProperties();
                RunFonts runFonts331 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
                FontSize fontSize330 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript304 = new FontSizeComplexScript() { Val = "18" };
                Languages languages328 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties256.Append(runFonts331);
                runProperties256.Append(fontSize330);
                runProperties256.Append(fontSizeComplexScript304);
                runProperties256.Append(languages328);
                Text text255 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text255.Text = "Term deposits must be held until maturity to achieve the quoted interest rate. Restrictions, penalties and fees may apply if your funds are withdrawn early from the term deposit. ";

                run256.Append(runProperties256);
                run256.Append(text255);

                Run run257 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties257 = new RunProperties();
                RunFonts runFonts332 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize331 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript305 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight91 = new Highlight() { Val = HighlightColorValues.Cyan };
                Languages languages329 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties257.Append(runFonts332);
                runProperties257.Append(fontSize331);
                runProperties257.Append(fontSizeComplexScript305);
                runProperties257.Append(highlight91);
                runProperties257.Append(languages329);
                Text text256 = new Text();
                text256.Text = "[If existing term deposit]";

                run257.Append(runProperties257);
                run257.Append(text256);

                Run run258 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties258 = new RunProperties();
                RunFonts runFonts333 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize332 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript306 = new FontSizeComplexScript() { Val = "18" };
                Languages languages330 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties258.Append(runFonts333);
                runProperties258.Append(fontSize332);
                runProperties258.Append(fontSizeComplexScript306);
                runProperties258.Append(languages330);
                Text text257 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text257.Text = " Therefore it is recommended that you maintain your current ";

                run258.Append(runProperties258);
                run258.Append(text257);

                Run run259 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties259 = new RunProperties();
                RunFonts runFonts334 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize333 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript307 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight92 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages331 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties259.Append(runFonts334);
                runProperties259.Append(fontSize333);
                runProperties259.Append(fontSizeComplexScript307);
                runProperties259.Append(highlight92);
                runProperties259.Append(languages331);
                Text text258 = new Text();
                text258.Text = "Colonial";

                run259.Append(runProperties259);
                run259.Append(text258);

                Run run260 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties260 = new RunProperties();
                RunFonts runFonts335 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize334 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript308 = new FontSizeComplexScript() { Val = "18" };
                Languages languages332 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties260.Append(runFonts335);
                runProperties260.Append(fontSize334);
                runProperties260.Append(fontSizeComplexScript308);
                runProperties260.Append(languages332);
                Text text259 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text259.Text = " term deposit until maturity, ";

                run260.Append(runProperties260);
                run260.Append(text259);

                Run run261 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties261 = new RunProperties();
                RunFonts runFonts336 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize335 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript309 = new FontSizeComplexScript() { Val = "18" };
                Highlight highlight93 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages333 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties261.Append(runFonts336);
                runProperties261.Append(fontSize335);
                runProperties261.Append(fontSizeComplexScript309);
                runProperties261.Append(highlight93);
                runProperties261.Append(languages333);
                Text text260 = new Text();
                text260.Text = "which will be reinvested as per our model portfolio for â€˜Balancedâ€™ investors at this time.";

                run261.Append(runProperties261);
                run261.Append(text260);

                paragraph76.Append(paragraphProperties76);
                paragraph76.Append(run254);
              //  paragraph76.Append(run255);
                paragraph76.Append(run256);
                paragraph76.Append(run257);
                paragraph76.Append(run258);
                paragraph76.Append(run259);
                paragraph76.Append(run260);
                paragraph76.Append(run261);

            

                ////tableCell11.Append(tableCellProperties11);
                ////tableCell11.Append(paragraph53);
                ////tableCell11.Append(paragraph54);
                ////tableCell11.Append(paragraph55);
                ////tableCell11.Append(paragraph56);
                ////tableCell11.Append(paragraph57);
                ////tableCell11.Append(paragraph58);
                ////tableCell11.Append(paragraph59);
                ////tableCell11.Append(paragraph60);
                ////tableCell11.Append(paragraph61);
                ////tableCell11.Append(paragraph62);
                ////tableCell11.Append(paragraph63);
                ////tableCell11.Append(paragraph64);
                ////tableCell11.Append(paragraph65);
                ////tableCell11.Append(paragraph66);
                //tableCell11.Append(paragraph67);
                //tableCell11.Append(paragraph68);
                //tableCell11.Append(paragraph69);
                //tableCell11.Append(paragraph70);
                //tableCell11.Append(paragraph71);
                //tableCell11.Append(paragraph72);
                //tableCell11.Append(paragraph73);
                //tableCell11.Append(paragraph74);
                //tableCell11.Append(paragraph75);
                tableCell11.Append(paragraph76);
                //tableCell11.Append(paragraph77);

                tableRow6.Append(tableCell10);
                tableRow6.Append(tableCell11);

                table5.Append(tableProperties5);
                table5.Append(tableGrid5);
                table5.Append(tableRow6);

                Paragraph paragraph78 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties78 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens78 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines78 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties77 = new ParagraphMarkRunProperties();
                RunFonts runFonts339 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color66 = new Color() { Val = "000000" };
                FontSize fontSize338 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript312 = new FontSizeComplexScript() { Val = "20" };
                Languages languages336 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties77.Append(runFonts339);
                paragraphMarkRunProperties77.Append(color66);
                paragraphMarkRunProperties77.Append(fontSize338);
                paragraphMarkRunProperties77.Append(fontSizeComplexScript312);
                paragraphMarkRunProperties77.Append(languages336);

                paragraphProperties78.Append(suppressAutoHyphens78);
                paragraphProperties78.Append(spacingBetweenLines78);
                paragraphProperties78.Append(paragraphMarkRunProperties77);

                paragraph78.Append(paragraphProperties78);

                Table table6 = new Table();

                TableProperties tableProperties6 = new TableProperties();
                TableWidth tableWidth6 = new TableWidth() { Width = "0", Type = TableWidthUnitValues.Auto };
                TableLayout tableLayout5 = new TableLayout() { Type = TableLayoutValues.Fixed };
                TableLook tableLook6 = new TableLook() { Val = "0000", FirstRow = false, LastRow = false, FirstColumn = false, LastColumn = false, NoHorizontalBand = false, NoVerticalBand = false };

                tableProperties6.Append(tableWidth6);
                tableProperties6.Append(tableLayout5);
                tableProperties6.Append(tableLook6);

                TableGrid tableGrid6 = new TableGrid();
                GridColumn gridColumn10 = new GridColumn() { Width = "1810" };
                GridColumn gridColumn11 = new GridColumn() { Width = "7796" };

                tableGrid6.Append(gridColumn10);
                tableGrid6.Append(gridColumn11);

                TableRow tableRow7 = new TableRow() { RsidTableRowMarkRevision = "00482D19", RsidTableRowAddition = "001A4A50", RsidTableRowProperties = "00A85FEB" };

                TableCell tableCell12 = new TableCell();

                TableCellProperties tableCellProperties12 = new TableCellProperties();
                TableCellWidth tableCellWidth12 = new TableCellWidth() { Width = "1810", Type = TableWidthUnitValues.Dxa };
                Shading shading9 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "auto" };

                tableCellProperties12.Append(tableCellWidth12);
                tableCellProperties12.Append(shading9);

                Paragraph paragraph79 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties79 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens79 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines79 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties78 = new ParagraphMarkRunProperties();
                RunFonts runFonts340 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize339 = new FontSize() { Val = "18" };
                Languages languages337 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties78.Append(runFonts340);
                paragraphMarkRunProperties78.Append(fontSize339);
                paragraphMarkRunProperties78.Append(languages337);

                paragraphProperties79.Append(suppressAutoHyphens79);
                paragraphProperties79.Append(spacingBetweenLines79);
                paragraphProperties79.Append(paragraphMarkRunProperties78);

                Run run263 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties263 = new RunProperties();
                RunFonts runFonts341 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Bold bold14 = new Bold();
                Color color67 = new Color() { Val = "393939" };
                FontSize fontSize340 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript313 = new FontSizeComplexScript() { Val = "18" };
                Languages languages338 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

                runProperties263.Append(runFonts341);
                runProperties263.Append(bold14);
                runProperties263.Append(color67);
                runProperties263.Append(fontSize340);
                runProperties263.Append(fontSizeComplexScript313);
                runProperties263.Append(languages338);
                Text text262 = new Text();
                text262.Text = "More";

                run263.Append(runProperties263);
                run263.Append(text262);

                Run run264 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties264 = new RunProperties();
                RunFonts runFonts342 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Bold bold15 = new Bold();
                Color color68 = new Color() { Val = "393939" };
                FontSize fontSize341 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript314 = new FontSizeComplexScript() { Val = "18" };
                Languages languages339 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

                runProperties264.Append(runFonts342);
                runProperties264.Append(bold15);
                runProperties264.Append(color68);
                runProperties264.Append(fontSize341);
                runProperties264.Append(fontSizeComplexScript314);
                runProperties264.Append(languages339);
                Break break3 = new Break();
                Text text263 = new Text();
                text263.Text = "Information";

                run264.Append(runProperties264);
                run264.Append(break3);
                run264.Append(text263);

                paragraph79.Append(paragraphProperties79);
                paragraph79.Append(run263);
                paragraph79.Append(run264);

                tableCell12.Append(tableCellProperties12);
                tableCell12.Append(paragraph79);

                TableCell tableCell13 = new TableCell();

                TableCellProperties tableCellProperties13 = new TableCellProperties();
                TableCellWidth tableCellWidth13 = new TableCellWidth() { Width = "7796", Type = TableWidthUnitValues.Dxa };
                Shading shading10 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "auto" };

                tableCellProperties13.Append(tableCellWidth13);
                tableCellProperties13.Append(shading10);

                Paragraph paragraph80 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties80 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens80 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines80 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties79 = new ParagraphMarkRunProperties();
                RunFonts runFonts343 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Times New Roman" };
                FontSize fontSize342 = new FontSize() { Val = "18" };
                Languages languages340 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties79.Append(runFonts343);
                paragraphMarkRunProperties79.Append(fontSize342);
                paragraphMarkRunProperties79.Append(languages340);

                paragraphProperties80.Append(suppressAutoHyphens80);
                paragraphProperties80.Append(spacingBetweenLines80);
                paragraphProperties80.Append(paragraphMarkRunProperties79);

                Run run265 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties265 = new RunProperties();
                RunFonts runFonts344 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Times New Roman" };
                FontSize fontSize343 = new FontSize() { Val = "18" };
                Languages languages341 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties265.Append(runFonts344);
                runProperties265.Append(fontSize343);
                runProperties265.Append(languages341);
                Text text264 = new Text();
                text264.Text = "Please read the following Product Disclosure Statement (PDS):";

                run265.Append(runProperties265);
                run265.Append(text264);

                paragraph80.Append(paragraphProperties80);
                paragraph80.Append(run265);

                Paragraph paragraph81 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties81 = new ParagraphProperties();

                NumberingProperties numberingProperties49 = new NumberingProperties();
                NumberingLevelReference numberingLevelReference49 = new NumberingLevelReference() { Val = 0 };
                NumberingId numberingId49 = new NumberingId() { Val = 1 };

                numberingProperties49.Append(numberingLevelReference49);
                numberingProperties49.Append(numberingId49);

                Tabs tabs18 = new Tabs();
                TabStop tabStop18 = new TabStop() { Val = TabStopValues.Left, Position = 0 };

                tabs18.Append(tabStop18);
                SuppressAutoHyphens suppressAutoHyphens81 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines81 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties80 = new ParagraphMarkRunProperties();
                RunFonts runFonts345 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color69 = new Color() { Val = "FF0000" };
                FontSize fontSize344 = new FontSize() { Val = "18" };
                Languages languages342 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties80.Append(runFonts345);
                paragraphMarkRunProperties80.Append(color69);
                paragraphMarkRunProperties80.Append(fontSize344);
                paragraphMarkRunProperties80.Append(languages342);

                paragraphProperties81.Append(numberingProperties49);
                paragraphProperties81.Append(tabs18);
                paragraphProperties81.Append(suppressAutoHyphens81);
                paragraphProperties81.Append(spacingBetweenLines81);
                paragraphProperties81.Append(paragraphMarkRunProperties80);

                Run run266 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties266 = new RunProperties();
                RunFonts runFonts346 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color70 = new Color() { Val = "FF0000" };
                FontSize fontSize345 = new FontSize() { Val = "18" };
                Languages languages343 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties266.Append(runFonts346);
                runProperties266.Append(color70);
                runProperties266.Append(fontSize345);
                runProperties266.Append(languages343);
                Text text265 = new Text();
                text265.Text = "Ensure main PDS of the recommended/existing platform is included.";

                run266.Append(runProperties266);
                run266.Append(text265);

                paragraph81.Append(paragraphProperties81);
                paragraph81.Append(run266);

                Paragraph paragraph82 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties82 = new ParagraphProperties();

                NumberingProperties numberingProperties50 = new NumberingProperties();
                NumberingLevelReference numberingLevelReference50 = new NumberingLevelReference() { Val = 0 };
                NumberingId numberingId50 = new NumberingId() { Val = 1 };

                numberingProperties50.Append(numberingLevelReference50);
                numberingProperties50.Append(numberingId50);

                Tabs tabs19 = new Tabs();
                TabStop tabStop19 = new TabStop() { Val = TabStopValues.Left, Position = 0 };

                tabs19.Append(tabStop19);
                SuppressAutoHyphens suppressAutoHyphens82 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines82 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties81 = new ParagraphMarkRunProperties();
                RunFonts runFonts347 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color71 = new Color() { Val = "FF0000" };
                FontSize fontSize346 = new FontSize() { Val = "18" };
                Languages languages344 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties81.Append(runFonts347);
                paragraphMarkRunProperties81.Append(color71);
                paragraphMarkRunProperties81.Append(fontSize346);
                paragraphMarkRunProperties81.Append(languages344);

                paragraphProperties82.Append(numberingProperties50);
                paragraphProperties82.Append(tabs19);
                paragraphProperties82.Append(suppressAutoHyphens82);
                paragraphProperties82.Append(spacingBetweenLines82);
                paragraphProperties82.Append(paragraphMarkRunProperties81);

                Run run267 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties267 = new RunProperties();
                RunFonts runFonts348 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color72 = new Color() { Val = "FF0000" };
                FontSize fontSize347 = new FontSize() { Val = "18" };
                Languages languages345 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties267.Append(runFonts348);
                runProperties267.Append(color72);
                runProperties267.Append(fontSize347);
                runProperties267.Append(languages345);
                Text text266 = new Text();
                text266.Text = "Include all supplementary PDSâ€™ as well.";

                run267.Append(runProperties267);
                run267.Append(text266);

                paragraph82.Append(paragraphProperties82);
                paragraph82.Append(run267);

                Paragraph paragraph83 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties83 = new ParagraphProperties();

                NumberingProperties numberingProperties51 = new NumberingProperties();
                NumberingLevelReference numberingLevelReference51 = new NumberingLevelReference() { Val = 0 };
                NumberingId numberingId51 = new NumberingId() { Val = 1 };

                numberingProperties51.Append(numberingLevelReference51);
                numberingProperties51.Append(numberingId51);

                Tabs tabs20 = new Tabs();
                TabStop tabStop20 = new TabStop() { Val = TabStopValues.Left, Position = 0 };

                tabs20.Append(tabStop20);
                SuppressAutoHyphens suppressAutoHyphens83 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines83 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties82 = new ParagraphMarkRunProperties();
                RunFonts runFonts349 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color73 = new Color() { Val = "FF0000" };
                FontSize fontSize348 = new FontSize() { Val = "18" };
                Languages languages346 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties82.Append(runFonts349);
                paragraphMarkRunProperties82.Append(color73);
                paragraphMarkRunProperties82.Append(fontSize348);
                paragraphMarkRunProperties82.Append(languages346);

                paragraphProperties83.Append(numberingProperties51);
                paragraphProperties83.Append(tabs20);
                paragraphProperties83.Append(suppressAutoHyphens83);
                paragraphProperties83.Append(spacingBetweenLines83);
                paragraphProperties83.Append(paragraphMarkRunProperties82);

                Run run268 = new Run() { RsidRunProperties = "00482D19" };

                RunProperties runProperties268 = new RunProperties();
                RunFonts runFonts350 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color74 = new Color() { Val = "FF0000" };
                FontSize fontSize349 = new FontSize() { Val = "18" };
                Languages languages347 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties268.Append(runFonts350);
                runProperties268.Append(color74);
                runProperties268.Append(fontSize349);
                runProperties268.Append(languages347);
                Text text267 = new Text();
                text267.Text = "Include all PDS of individual managed funds and ETFs for wrap accounts     Voyage/Portfolio One/CFS FirstWrap/BT SuperWrap)";

                run268.Append(runProperties268);
                run268.Append(text267);

                paragraph83.Append(paragraphProperties83);
                paragraph83.Append(run268);

                tableCell13.Append(tableCellProperties13);
                tableCell13.Append(paragraph80);
                tableCell13.Append(paragraph81);
                tableCell13.Append(paragraph82);
                tableCell13.Append(paragraph83);

                tableRow7.Append(tableCell12);
                tableRow7.Append(tableCell13);

                table6.Append(tableProperties6);
                table6.Append(tableGrid6);
                table6.Append(tableRow7);

                Paragraph paragraph84 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties84 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens84 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines84 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties83 = new ParagraphMarkRunProperties();
                RunFonts runFonts351 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize350 = new FontSize() { Val = "2" };
                FontSizeComplexScript fontSizeComplexScript315 = new FontSizeComplexScript() { Val = "2" };
                Highlight highlight94 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages348 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties83.Append(runFonts351);
                paragraphMarkRunProperties83.Append(fontSize350);
                paragraphMarkRunProperties83.Append(fontSizeComplexScript315);
                paragraphMarkRunProperties83.Append(highlight94);
                paragraphMarkRunProperties83.Append(languages348);

                paragraphProperties84.Append(suppressAutoHyphens84);
                paragraphProperties84.Append(spacingBetweenLines84);
                paragraphProperties84.Append(paragraphMarkRunProperties83);

                paragraph84.Append(paragraphProperties84);

                Paragraph paragraph85 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties85 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens85 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines85 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties84 = new ParagraphMarkRunProperties();
                RunFonts runFonts352 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize351 = new FontSize() { Val = "2" };
                FontSizeComplexScript fontSizeComplexScript316 = new FontSizeComplexScript() { Val = "2" };
                Highlight highlight95 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages349 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties84.Append(runFonts352);
                paragraphMarkRunProperties84.Append(fontSize351);
                paragraphMarkRunProperties84.Append(fontSizeComplexScript316);
                paragraphMarkRunProperties84.Append(highlight95);
                paragraphMarkRunProperties84.Append(languages349);

                paragraphProperties85.Append(suppressAutoHyphens85);
                paragraphProperties85.Append(spacingBetweenLines85);
                paragraphProperties85.Append(paragraphMarkRunProperties84);

                paragraph85.Append(paragraphProperties85);

                Paragraph paragraph86 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties86 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens86 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines86 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties85 = new ParagraphMarkRunProperties();
                RunFonts runFonts353 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize352 = new FontSize() { Val = "2" };
                FontSizeComplexScript fontSizeComplexScript317 = new FontSizeComplexScript() { Val = "2" };
                Highlight highlight96 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages350 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties85.Append(runFonts353);
                paragraphMarkRunProperties85.Append(fontSize352);
                paragraphMarkRunProperties85.Append(fontSizeComplexScript317);
                paragraphMarkRunProperties85.Append(highlight96);
                paragraphMarkRunProperties85.Append(languages350);

                paragraphProperties86.Append(suppressAutoHyphens86);
                paragraphProperties86.Append(spacingBetweenLines86);
                paragraphProperties86.Append(paragraphMarkRunProperties85);

                paragraph86.Append(paragraphProperties86);

                Paragraph paragraph87 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties87 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens87 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines87 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties86 = new ParagraphMarkRunProperties();
                RunFonts runFonts354 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize353 = new FontSize() { Val = "2" };
                FontSizeComplexScript fontSizeComplexScript318 = new FontSizeComplexScript() { Val = "2" };
                Highlight highlight97 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages351 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties86.Append(runFonts354);
                paragraphMarkRunProperties86.Append(fontSize353);
                paragraphMarkRunProperties86.Append(fontSizeComplexScript318);
                paragraphMarkRunProperties86.Append(highlight97);
                paragraphMarkRunProperties86.Append(languages351);

                paragraphProperties87.Append(suppressAutoHyphens87);
                paragraphProperties87.Append(spacingBetweenLines87);
                paragraphProperties87.Append(paragraphMarkRunProperties86);

                paragraph87.Append(paragraphProperties87);

                Paragraph paragraph88 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties88 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens88 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines88 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties87 = new ParagraphMarkRunProperties();
                RunFonts runFonts355 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize354 = new FontSize() { Val = "2" };
                FontSizeComplexScript fontSizeComplexScript319 = new FontSizeComplexScript() { Val = "2" };
                Highlight highlight98 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages352 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties87.Append(runFonts355);
                paragraphMarkRunProperties87.Append(fontSize354);
                paragraphMarkRunProperties87.Append(fontSizeComplexScript319);
                paragraphMarkRunProperties87.Append(highlight98);
                paragraphMarkRunProperties87.Append(languages352);

                paragraphProperties88.Append(suppressAutoHyphens88);
                paragraphProperties88.Append(spacingBetweenLines88);
                paragraphProperties88.Append(paragraphMarkRunProperties87);

                paragraph88.Append(paragraphProperties88);

                Paragraph paragraph89 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties89 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens89 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines89 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties88 = new ParagraphMarkRunProperties();
                RunFonts runFonts356 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize355 = new FontSize() { Val = "2" };
                FontSizeComplexScript fontSizeComplexScript320 = new FontSizeComplexScript() { Val = "2" };
                Highlight highlight99 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages353 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties88.Append(runFonts356);
                paragraphMarkRunProperties88.Append(fontSize355);
                paragraphMarkRunProperties88.Append(fontSizeComplexScript320);
                paragraphMarkRunProperties88.Append(highlight99);
                paragraphMarkRunProperties88.Append(languages353);

                paragraphProperties89.Append(suppressAutoHyphens89);
                paragraphProperties89.Append(spacingBetweenLines89);
                paragraphProperties89.Append(paragraphMarkRunProperties88);

                paragraph89.Append(paragraphProperties89);

                Paragraph paragraph90 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties90 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens90 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines90 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties89 = new ParagraphMarkRunProperties();
                RunFonts runFonts357 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize356 = new FontSize() { Val = "2" };
                FontSizeComplexScript fontSizeComplexScript321 = new FontSizeComplexScript() { Val = "2" };
                Highlight highlight100 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages354 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties89.Append(runFonts357);
                paragraphMarkRunProperties89.Append(fontSize356);
                paragraphMarkRunProperties89.Append(fontSizeComplexScript321);
                paragraphMarkRunProperties89.Append(highlight100);
                paragraphMarkRunProperties89.Append(languages354);

                paragraphProperties90.Append(suppressAutoHyphens90);
                paragraphProperties90.Append(spacingBetweenLines90);
                paragraphProperties90.Append(paragraphMarkRunProperties89);

                paragraph90.Append(paragraphProperties90);

                Paragraph paragraph91 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties91 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens91 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines91 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties90 = new ParagraphMarkRunProperties();
                RunFonts runFonts358 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize357 = new FontSize() { Val = "2" };
                FontSizeComplexScript fontSizeComplexScript322 = new FontSizeComplexScript() { Val = "2" };
                Highlight highlight101 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages355 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties90.Append(runFonts358);
                paragraphMarkRunProperties90.Append(fontSize357);
                paragraphMarkRunProperties90.Append(fontSizeComplexScript322);
                paragraphMarkRunProperties90.Append(highlight101);
                paragraphMarkRunProperties90.Append(languages355);

                paragraphProperties91.Append(suppressAutoHyphens91);
                paragraphProperties91.Append(spacingBetweenLines91);
                paragraphProperties91.Append(paragraphMarkRunProperties90);

                paragraph91.Append(paragraphProperties91);

                Paragraph paragraph92 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties92 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens92 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines92 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties91 = new ParagraphMarkRunProperties();
                RunFonts runFonts359 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize358 = new FontSize() { Val = "2" };
                FontSizeComplexScript fontSizeComplexScript323 = new FontSizeComplexScript() { Val = "2" };
                Highlight highlight102 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages356 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties91.Append(runFonts359);
                paragraphMarkRunProperties91.Append(fontSize358);
                paragraphMarkRunProperties91.Append(fontSizeComplexScript323);
                paragraphMarkRunProperties91.Append(highlight102);
                paragraphMarkRunProperties91.Append(languages356);

                paragraphProperties92.Append(suppressAutoHyphens92);
                paragraphProperties92.Append(spacingBetweenLines92);
                paragraphProperties92.Append(paragraphMarkRunProperties91);

                paragraph92.Append(paragraphProperties92);

                Paragraph paragraph93 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties93 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens93 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines93 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties92 = new ParagraphMarkRunProperties();
                RunFonts runFonts360 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize359 = new FontSize() { Val = "2" };
                FontSizeComplexScript fontSizeComplexScript324 = new FontSizeComplexScript() { Val = "2" };
                Highlight highlight103 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages357 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties92.Append(runFonts360);
                paragraphMarkRunProperties92.Append(fontSize359);
                paragraphMarkRunProperties92.Append(fontSizeComplexScript324);
                paragraphMarkRunProperties92.Append(highlight103);
                paragraphMarkRunProperties92.Append(languages357);

                paragraphProperties93.Append(suppressAutoHyphens93);
                paragraphProperties93.Append(spacingBetweenLines93);
                paragraphProperties93.Append(paragraphMarkRunProperties92);

                paragraph93.Append(paragraphProperties93);

                Paragraph paragraph94 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties94 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens94 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines94 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties93 = new ParagraphMarkRunProperties();
                RunFonts runFonts361 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize360 = new FontSize() { Val = "2" };
                FontSizeComplexScript fontSizeComplexScript325 = new FontSizeComplexScript() { Val = "2" };
                Highlight highlight104 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages358 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties93.Append(runFonts361);
                paragraphMarkRunProperties93.Append(fontSize360);
                paragraphMarkRunProperties93.Append(fontSizeComplexScript325);
                paragraphMarkRunProperties93.Append(highlight104);
                paragraphMarkRunProperties93.Append(languages358);

                paragraphProperties94.Append(suppressAutoHyphens94);
                paragraphProperties94.Append(spacingBetweenLines94);
                paragraphProperties94.Append(paragraphMarkRunProperties93);

                paragraph94.Append(paragraphProperties94);

                Paragraph paragraph95 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties95 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens95 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines95 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties94 = new ParagraphMarkRunProperties();
                RunFonts runFonts362 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize361 = new FontSize() { Val = "2" };
                FontSizeComplexScript fontSizeComplexScript326 = new FontSizeComplexScript() { Val = "2" };
                Highlight highlight105 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages359 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties94.Append(runFonts362);
                paragraphMarkRunProperties94.Append(fontSize361);
                paragraphMarkRunProperties94.Append(fontSizeComplexScript326);
                paragraphMarkRunProperties94.Append(highlight105);
                paragraphMarkRunProperties94.Append(languages359);

                paragraphProperties95.Append(suppressAutoHyphens95);
                paragraphProperties95.Append(spacingBetweenLines95);
                paragraphProperties95.Append(paragraphMarkRunProperties94);

                paragraph95.Append(paragraphProperties95);

                Paragraph paragraph96 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties96 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens96 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines96 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties95 = new ParagraphMarkRunProperties();
                RunFonts runFonts363 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize362 = new FontSize() { Val = "2" };
                FontSizeComplexScript fontSizeComplexScript327 = new FontSizeComplexScript() { Val = "2" };
                Highlight highlight106 = new Highlight() { Val = HighlightColorValues.Yellow };
                Languages languages360 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties95.Append(runFonts363);
                paragraphMarkRunProperties95.Append(fontSize362);
                paragraphMarkRunProperties95.Append(fontSizeComplexScript327);
                paragraphMarkRunProperties95.Append(highlight106);
                paragraphMarkRunProperties95.Append(languages360);

                paragraphProperties96.Append(suppressAutoHyphens96);
                paragraphProperties96.Append(spacingBetweenLines96);
                paragraphProperties96.Append(paragraphMarkRunProperties95);

                paragraph96.Append(paragraphProperties96);

                Paragraph paragraph97 = new Paragraph() { RsidParagraphMarkRevision = "007A42A6", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "001A4A50", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties97 = new ParagraphProperties();

                ParagraphMarkRunProperties paragraphMarkRunProperties96 = new ParagraphMarkRunProperties();
                RunFonts runFonts364 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color75 = new Color() { Val = "000000" };
                Languages languages361 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties96.Append(runFonts364);
                paragraphMarkRunProperties96.Append(color75);
                paragraphMarkRunProperties96.Append(languages361);

                paragraphProperties97.Append(paragraphMarkRunProperties96);

                Run run269 = new Run() { RsidRunProperties = "007A42A6" };

                RunProperties runProperties269 = new RunProperties();
                RunFonts runFonts365 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color76 = new Color() { Val = "000000" };
                Languages languages362 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties269.Append(runFonts365);
                runProperties269.Append(color76);
                runProperties269.Append(languages362);
                Break break4 = new Break() { Type = BreakValues.Page };

                run269.Append(runProperties269);
                run269.Append(break4);

                paragraph97.Append(paragraphProperties97);
                paragraph97.Append(run269);
                Paragraph paragraph98 = new Paragraph() { RsidParagraphAddition = "00607119", RsidRunAdditionDefault = "00607119" };

                SectionProperties sectionProperties1 = new SectionProperties() { RsidR = "00607119" };
                PageSize pageSize1 = new PageSize() { Width = (UInt32Value)12240U, Height = (UInt32Value)15840U };
                PageMargin pageMargin1 = new PageMargin() { Top = 1440, Right = (UInt32Value)1440U, Bottom = 1440, Left = (UInt32Value)1440U, Header = (UInt32Value)720U, Footer = (UInt32Value)720U, Gutter = (UInt32Value)0U };
                Columns columns1 = new Columns() { Space = "720" };
                DocGrid docGrid1 = new DocGrid() { LinePitch = 360 };

                sectionProperties1.Append(pageSize1);
                sectionProperties1.Append(pageMargin1);
                sectionProperties1.Append(columns1);
                sectionProperties1.Append(docGrid1);


                body1.Append(paragraph2);
                body1.Append(table2);
                body1.Append(paragraph19);
                body1.Append(paragraph20);
                body1.Append(table3);
                body1.Append(paragraph23);
                body1.Append(paragraph24);
                body1.Append(paragraph25);
                body1.Append(paragraph26);
                body1.Append(table4);
                body1.Append(paragraph51);
                body1.Append(table5);
                body1.Append(paragraph78);
                body1.Append(table6);
                body1.Append(paragraph84);
                body1.Append(paragraph85);
                body1.Append(paragraph86);
                body1.Append(paragraph87);
                body1.Append(paragraph88);
                body1.Append(paragraph89);
                body1.Append(paragraph90);
                body1.Append(paragraph91);
                body1.Append(paragraph92);
                body1.Append(paragraph93);
                body1.Append(paragraph94);
                body1.Append(paragraph95);
                body1.Append(paragraph96);
                body1.Append(paragraph97);
                body1.Append(paragraph98);
                body1.Append(sectionProperties1);
            }
        }

        //end

        public void add(Paragraph body)
        {
            AlternateContentChoice alternateContentChoice1 = new AlternateContentChoice() { Requires = "wps" };

            W.Drawing drawing1 = new W.Drawing();

            Wp.Anchor anchor1 = new Wp.Anchor() { DistanceFromTop = (UInt32Value)0U, DistanceFromBottom = (UInt32Value)0U, DistanceFromLeft = (UInt32Value)114935U, DistanceFromRight = (UInt32Value)114935U, SimplePos = false, RelativeHeight = (UInt32Value)251676672U, BehindDoc = true, Locked = false, LayoutInCell = true, AllowOverlap = true, EditId = "3A313D92", AnchorId = "5438FE6E" };
            Wp.SimplePosition simplePosition1 = new Wp.SimplePosition() { X = 0L, Y = 0L };

            Wp.HorizontalPosition horizontalPosition1 = new Wp.HorizontalPosition() { RelativeFrom = Wp.HorizontalRelativePositionValues.Column };
            Wp.PositionOffset positionOffset1 = new Wp.PositionOffset();
            positionOffset1.Text = "6030595";

            horizontalPosition1.Append(positionOffset1);

            Wp.VerticalPosition verticalPosition1 = new Wp.VerticalPosition() { RelativeFrom = Wp.VerticalRelativePositionValues.Paragraph };
            Wp.PositionOffset positionOffset2 = new Wp.PositionOffset();
            positionOffset2.Text = "97155";

            verticalPosition1.Append(positionOffset2);
            Wp.Extent extent1 = new Wp.Extent() { Cx = 35560L, Cy = 13970L };
            Wp.EffectExtent effectExtent1 = new Wp.EffectExtent() { LeftEdge = 8255L, TopEdge = 5715L, RightEdge = 3810L, BottomEdge = 8890L };
            Wp.WrapNone wrapNone1 = new Wp.WrapNone();
            Wp.DocProperties docProperties1 = new Wp.DocProperties() { Id = (UInt32Value)92U, Name = "Text Box 92" };

            Wp.NonVisualGraphicFrameDrawingProperties nonVisualGraphicFrameDrawingProperties1 = new Wp.NonVisualGraphicFrameDrawingProperties();

            A.GraphicFrameLocks graphicFrameLocks1 = new A.GraphicFrameLocks();
            graphicFrameLocks1.AddNamespaceDeclaration("a", "http://schemas.openxmlformats.org/drawingml/2006/main");

            nonVisualGraphicFrameDrawingProperties1.Append(graphicFrameLocks1);

            A.Graphic graphic1 = new A.Graphic();
            graphic1.AddNamespaceDeclaration("a", "http://schemas.openxmlformats.org/drawingml/2006/main");

            A.GraphicData graphicData1 = new A.GraphicData() { Uri = "http://schemas.microsoft.com/office/word/2010/wordprocessingShape" };

            Wps.WordprocessingShape wordprocessingShape1 = new Wps.WordprocessingShape();

            Wps.NonVisualDrawingShapeProperties nonVisualDrawingShapeProperties1 = new Wps.NonVisualDrawingShapeProperties() { TextBox = true };
            A.ShapeLocks shapeLocks1 = new A.ShapeLocks() { NoChangeArrowheads = true };

            nonVisualDrawingShapeProperties1.Append(shapeLocks1);

            Wps.ShapeProperties shapeProperties1 = new Wps.ShapeProperties() { BlackWhiteMode = A.BlackWhiteModeValues.Auto };

            A.Transform2D transform2D1 = new A.Transform2D();
            A.Offset offset1 = new A.Offset() { X = 0L, Y = 0L };
            A.Extents extents1 = new A.Extents() { Cx = 35560L, Cy = 13970L };

            transform2D1.Append(offset1);
            transform2D1.Append(extents1);

            A.PresetGeometry presetGeometry1 = new A.PresetGeometry() { Preset = A.ShapeTypeValues.Rectangle };
            A.AdjustValueList adjustValueList1 = new A.AdjustValueList();

            presetGeometry1.Append(adjustValueList1);

            A.SolidFill solidFill1 = new A.SolidFill();

            A.RgbColorModelHex rgbColorModelHex1 = new A.RgbColorModelHex() { Val = "FFFFFF" };
            A.Alpha alpha1 = new A.Alpha() { Val = 0 };

            rgbColorModelHex1.Append(alpha1);

            solidFill1.Append(rgbColorModelHex1);

            A.Outline outline1 = new A.Outline();
            A.NoFill noFill1 = new A.NoFill();

            outline1.Append(noFill1);

            A.ShapePropertiesExtensionList shapePropertiesExtensionList1 = new A.ShapePropertiesExtensionList();

            A.ShapePropertiesExtension shapePropertiesExtension1 = new A.ShapePropertiesExtension() { Uri = "{91240B29-F687-4F45-9708-019B960494DF}" };

            A14.HiddenLineProperties hiddenLineProperties1 = new A14.HiddenLineProperties() { Width = 9525 };
            hiddenLineProperties1.AddNamespaceDeclaration("a14", "http://schemas.microsoft.com/office/drawing/2010/main");

            A.SolidFill solidFill2 = new A.SolidFill();
            A.RgbColorModelHex rgbColorModelHex2 = new A.RgbColorModelHex() { Val = "000000" };

            solidFill2.Append(rgbColorModelHex2);
            A.Miter miter1 = new A.Miter() { Limit = 800000 };
            A.HeadEnd headEnd1 = new A.HeadEnd();
            A.TailEnd tailEnd1 = new A.TailEnd();

            hiddenLineProperties1.Append(solidFill2);
            hiddenLineProperties1.Append(miter1);
            hiddenLineProperties1.Append(headEnd1);
            hiddenLineProperties1.Append(tailEnd1);

            shapePropertiesExtension1.Append(hiddenLineProperties1);

            shapePropertiesExtensionList1.Append(shapePropertiesExtension1);

            shapeProperties1.Append(transform2D1);
            shapeProperties1.Append(presetGeometry1);
            shapeProperties1.Append(solidFill1);
            shapeProperties1.Append(outline1);
            shapeProperties1.Append(shapePropertiesExtensionList1);

            Wps.TextBoxInfo2 textBoxInfo21 = new Wps.TextBoxInfo2();

            W.TextBoxContent textBoxContent1 = new W.TextBoxContent();

            W.Paragraph paragraph1 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "04CE03A0", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties1 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId1 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties1 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts1 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold1 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript1 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties1.Append(runFonts1);
            paragraphMarkRunProperties1.Append(bold1);
            paragraphMarkRunProperties1.Append(fontSizeComplexScript1);

            paragraphProperties1.Append(paragraphStyleId1);
            paragraphProperties1.Append(paragraphMarkRunProperties1);

            W.Run run1 = new W.Run();

            W.RunProperties runProperties1 = new W.RunProperties();
            W.RunFonts runFonts2 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold2 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript2 = new W.FontSizeComplexScript() { Val = "20" };

            runProperties1.Append(runFonts2);
            runProperties1.Append(bold2);
            runProperties1.Append(fontSizeComplexScript2);
            W.Text text1 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text1.Text = " ";

            run1.Append(runProperties1);
            run1.Append(text1);

            paragraph1.Append(paragraphProperties1);
            paragraph1.Append(run1);

            W.Paragraph paragraph2 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "6E6DB8AF", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties2 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId2 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties2 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts3 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold3 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript3 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties2.Append(runFonts3);
            paragraphMarkRunProperties2.Append(bold3);
            paragraphMarkRunProperties2.Append(fontSizeComplexScript3);

            paragraphProperties2.Append(paragraphStyleId2);
            paragraphProperties2.Append(paragraphMarkRunProperties2);

            W.Run run2 = new W.Run();

            W.RunProperties runProperties2 = new W.RunProperties();
            W.RunFonts runFonts4 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold4 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript4 = new W.FontSizeComplexScript() { Val = "20" };

            runProperties2.Append(runFonts4);
            runProperties2.Append(bold4);
            runProperties2.Append(fontSizeComplexScript4);
            W.Text text2 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text2.Text = " ";

            run2.Append(runProperties2);
            run2.Append(text2);

            paragraph2.Append(paragraphProperties2);
            paragraph2.Append(run2);

            W.Paragraph paragraph3 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "02530E2F", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties3 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId3 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties3 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts5 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold5 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript5 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties3.Append(runFonts5);
            paragraphMarkRunProperties3.Append(bold5);
            paragraphMarkRunProperties3.Append(fontSizeComplexScript5);

            paragraphProperties3.Append(paragraphStyleId3);
            paragraphProperties3.Append(paragraphMarkRunProperties3);

            W.Run run3 = new W.Run();

            W.RunProperties runProperties3 = new W.RunProperties();
            W.RunFonts runFonts6 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold6 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript6 = new W.FontSizeComplexScript() { Val = "20" };

            runProperties3.Append(runFonts6);
            runProperties3.Append(bold6);
            runProperties3.Append(fontSizeComplexScript6);
            W.Text text3 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text3.Text = " ";

            run3.Append(runProperties3);
            run3.Append(text3);

            paragraph3.Append(paragraphProperties3);
            paragraph3.Append(run3);

            W.Paragraph paragraph4 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "4753D73F", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties4 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId4 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties4 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts7 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold7 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript7 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties4.Append(runFonts7);
            paragraphMarkRunProperties4.Append(bold7);
            paragraphMarkRunProperties4.Append(fontSizeComplexScript7);

            paragraphProperties4.Append(paragraphStyleId4);
            paragraphProperties4.Append(paragraphMarkRunProperties4);

            paragraph4.Append(paragraphProperties4);

            W.Paragraph paragraph5 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "7675723D", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties5 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId5 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties5 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts8 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold8 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript8 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties5.Append(runFonts8);
            paragraphMarkRunProperties5.Append(bold8);
            paragraphMarkRunProperties5.Append(fontSizeComplexScript8);

            paragraphProperties5.Append(paragraphStyleId5);
            paragraphProperties5.Append(paragraphMarkRunProperties5);

            W.Run run4 = new W.Run();

            W.RunProperties runProperties4 = new W.RunProperties();
            W.RunFonts runFonts9 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold9 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript9 = new W.FontSizeComplexScript() { Val = "20" };

            runProperties4.Append(runFonts9);
            runProperties4.Append(bold9);
            runProperties4.Append(fontSizeComplexScript9);
            W.Text text4 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text4.Text = " ";

            run4.Append(runProperties4);
            run4.Append(text4);

            paragraph5.Append(paragraphProperties5);
            paragraph5.Append(run4);

            W.Paragraph paragraph6 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "12AC83A7", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties6 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId6 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties6 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts10 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold10 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript10 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties6.Append(runFonts10);
            paragraphMarkRunProperties6.Append(bold10);
            paragraphMarkRunProperties6.Append(fontSizeComplexScript10);

            paragraphProperties6.Append(paragraphStyleId6);
            paragraphProperties6.Append(paragraphMarkRunProperties6);

            W.Run run5 = new W.Run();

            W.RunProperties runProperties5 = new W.RunProperties();
            W.RunFonts runFonts11 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold11 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript11 = new W.FontSizeComplexScript() { Val = "20" };

            runProperties5.Append(runFonts11);
            runProperties5.Append(bold11);
            runProperties5.Append(fontSizeComplexScript11);
            W.Text text5 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text5.Text = " ";

            run5.Append(runProperties5);
            run5.Append(text5);

            paragraph6.Append(paragraphProperties6);
            paragraph6.Append(run5);

            W.Paragraph paragraph7 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "7F4349F2", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties7 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId7 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties7 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts12 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold12 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript12 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties7.Append(runFonts12);
            paragraphMarkRunProperties7.Append(bold12);
            paragraphMarkRunProperties7.Append(fontSizeComplexScript12);

            paragraphProperties7.Append(paragraphStyleId7);
            paragraphProperties7.Append(paragraphMarkRunProperties7);

            W.Run run6 = new W.Run();

            W.RunProperties runProperties6 = new W.RunProperties();
            W.RunFonts runFonts13 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold13 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript13 = new W.FontSizeComplexScript() { Val = "20" };

            runProperties6.Append(runFonts13);
            runProperties6.Append(bold13);
            runProperties6.Append(fontSizeComplexScript13);
            W.Text text6 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text6.Text = " ";

            run6.Append(runProperties6);
            run6.Append(text6);

            paragraph7.Append(paragraphProperties7);
            paragraph7.Append(run6);

            W.Paragraph paragraph8 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "5378D687", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties8 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId8 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties8 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts14 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold14 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript14 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties8.Append(runFonts14);
            paragraphMarkRunProperties8.Append(bold14);
            paragraphMarkRunProperties8.Append(fontSizeComplexScript14);

            paragraphProperties8.Append(paragraphStyleId8);
            paragraphProperties8.Append(paragraphMarkRunProperties8);

            W.Run run7 = new W.Run();

            W.RunProperties runProperties7 = new W.RunProperties();
            W.RunFonts runFonts15 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold15 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript15 = new W.FontSizeComplexScript() { Val = "20" };

            runProperties7.Append(runFonts15);
            runProperties7.Append(bold15);
            runProperties7.Append(fontSizeComplexScript15);
            W.Text text7 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text7.Text = " ";

            run7.Append(runProperties7);
            run7.Append(text7);

            paragraph8.Append(paragraphProperties8);
            paragraph8.Append(run7);

            W.Paragraph paragraph9 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "5DCADE92", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties9 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId9 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties9 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts16 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold16 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript16 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties9.Append(runFonts16);
            paragraphMarkRunProperties9.Append(bold16);
            paragraphMarkRunProperties9.Append(fontSizeComplexScript16);

            paragraphProperties9.Append(paragraphStyleId9);
            paragraphProperties9.Append(paragraphMarkRunProperties9);

            W.Run run8 = new W.Run();

            W.RunProperties runProperties8 = new W.RunProperties();
            W.RunFonts runFonts17 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold17 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript17 = new W.FontSizeComplexScript() { Val = "20" };

            runProperties8.Append(runFonts17);
            runProperties8.Append(bold17);
            runProperties8.Append(fontSizeComplexScript17);
            W.Text text8 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text8.Text = " ";

            run8.Append(runProperties8);
            run8.Append(text8);

            paragraph9.Append(paragraphProperties9);
            paragraph9.Append(run8);

            W.Paragraph paragraph10 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "4AC96599", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties10 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId10 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties10 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts18 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold18 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript18 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties10.Append(runFonts18);
            paragraphMarkRunProperties10.Append(bold18);
            paragraphMarkRunProperties10.Append(fontSizeComplexScript18);

            paragraphProperties10.Append(paragraphStyleId10);
            paragraphProperties10.Append(paragraphMarkRunProperties10);

            W.Run run9 = new W.Run();

            W.RunProperties runProperties9 = new W.RunProperties();
            W.RunFonts runFonts19 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold19 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript19 = new W.FontSizeComplexScript() { Val = "20" };

            runProperties9.Append(runFonts19);
            runProperties9.Append(bold19);
            runProperties9.Append(fontSizeComplexScript19);
            W.Text text9 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text9.Text = " ";

            run9.Append(runProperties9);
            run9.Append(text9);

            paragraph10.Append(paragraphProperties10);
            paragraph10.Append(run9);

            W.Paragraph paragraph11 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "2B4B8144", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties11 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId11 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties11 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts20 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold20 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript20 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties11.Append(runFonts20);
            paragraphMarkRunProperties11.Append(bold20);
            paragraphMarkRunProperties11.Append(fontSizeComplexScript20);

            paragraphProperties11.Append(paragraphStyleId11);
            paragraphProperties11.Append(paragraphMarkRunProperties11);

            W.Run run10 = new W.Run();

            W.RunProperties runProperties10 = new W.RunProperties();
            W.RunFonts runFonts21 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold21 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript21 = new W.FontSizeComplexScript() { Val = "20" };

            runProperties10.Append(runFonts21);
            runProperties10.Append(bold21);
            runProperties10.Append(fontSizeComplexScript21);
            W.Text text10 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text10.Text = " ";

            run10.Append(runProperties10);
            run10.Append(text10);

            paragraph11.Append(paragraphProperties11);
            paragraph11.Append(run10);

            W.Paragraph paragraph12 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "0AAAC9A6", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties12 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId12 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties12 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts22 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold22 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript22 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties12.Append(runFonts22);
            paragraphMarkRunProperties12.Append(bold22);
            paragraphMarkRunProperties12.Append(fontSizeComplexScript22);

            paragraphProperties12.Append(paragraphStyleId12);
            paragraphProperties12.Append(paragraphMarkRunProperties12);

            W.Run run11 = new W.Run();

            W.RunProperties runProperties11 = new W.RunProperties();
            W.RunFonts runFonts23 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold23 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript23 = new W.FontSizeComplexScript() { Val = "20" };

            runProperties11.Append(runFonts23);
            runProperties11.Append(bold23);
            runProperties11.Append(fontSizeComplexScript23);
            W.Text text11 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text11.Text = " ";

            run11.Append(runProperties11);
            run11.Append(text11);

            paragraph12.Append(paragraphProperties12);
            paragraph12.Append(run11);

            W.Paragraph paragraph13 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "5506A4C5", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties13 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId13 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties13 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts24 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold24 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript24 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties13.Append(runFonts24);
            paragraphMarkRunProperties13.Append(bold24);
            paragraphMarkRunProperties13.Append(fontSizeComplexScript24);

            paragraphProperties13.Append(paragraphStyleId13);
            paragraphProperties13.Append(paragraphMarkRunProperties13);

            W.Run run12 = new W.Run();

            W.RunProperties runProperties12 = new W.RunProperties();
            W.RunFonts runFonts25 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold25 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript25 = new W.FontSizeComplexScript() { Val = "20" };

            runProperties12.Append(runFonts25);
            runProperties12.Append(bold25);
            runProperties12.Append(fontSizeComplexScript25);
            W.Text text12 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text12.Text = " ";

            run12.Append(runProperties12);
            run12.Append(text12);

            paragraph13.Append(paragraphProperties13);
            paragraph13.Append(run12);

            W.Paragraph paragraph14 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "7AEBEDA2", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties14 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId14 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties14 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts26 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold26 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript26 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties14.Append(runFonts26);
            paragraphMarkRunProperties14.Append(bold26);
            paragraphMarkRunProperties14.Append(fontSizeComplexScript26);

            paragraphProperties14.Append(paragraphStyleId14);
            paragraphProperties14.Append(paragraphMarkRunProperties14);

            W.Run run13 = new W.Run();

            W.RunProperties runProperties13 = new W.RunProperties();
            W.RunFonts runFonts27 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold27 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript27 = new W.FontSizeComplexScript() { Val = "20" };

            runProperties13.Append(runFonts27);
            runProperties13.Append(bold27);
            runProperties13.Append(fontSizeComplexScript27);
            W.Text text13 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text13.Text = " ";

            run13.Append(runProperties13);
            run13.Append(text13);

            paragraph14.Append(paragraphProperties14);
            paragraph14.Append(run13);

            W.Paragraph paragraph15 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "48085869", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties15 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId15 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties15 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts28 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold28 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript28 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties15.Append(runFonts28);
            paragraphMarkRunProperties15.Append(bold28);
            paragraphMarkRunProperties15.Append(fontSizeComplexScript28);

            paragraphProperties15.Append(paragraphStyleId15);
            paragraphProperties15.Append(paragraphMarkRunProperties15);

            paragraph15.Append(paragraphProperties15);

            W.Paragraph paragraph16 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "03349807", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties16 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId16 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties16 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts29 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold29 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript29 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties16.Append(runFonts29);
            paragraphMarkRunProperties16.Append(bold29);
            paragraphMarkRunProperties16.Append(fontSizeComplexScript29);

            paragraphProperties16.Append(paragraphStyleId16);
            paragraphProperties16.Append(paragraphMarkRunProperties16);

            W.Run run14 = new W.Run();

            W.RunProperties runProperties14 = new W.RunProperties();
            W.RunFonts runFonts30 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold30 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript30 = new W.FontSizeComplexScript() { Val = "20" };

            runProperties14.Append(runFonts30);
            runProperties14.Append(bold30);
            runProperties14.Append(fontSizeComplexScript30);
            W.Text text14 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text14.Text = " ";

            run14.Append(runProperties14);
            run14.Append(text14);

            paragraph16.Append(paragraphProperties16);
            paragraph16.Append(run14);

            W.Paragraph paragraph17 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "13B8FCE4", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties17 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId17 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties17 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts31 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold31 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript31 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties17.Append(runFonts31);
            paragraphMarkRunProperties17.Append(bold31);
            paragraphMarkRunProperties17.Append(fontSizeComplexScript31);

            paragraphProperties17.Append(paragraphStyleId17);
            paragraphProperties17.Append(paragraphMarkRunProperties17);

            paragraph17.Append(paragraphProperties17);

            W.Paragraph paragraph18 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "3ACA8116", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties18 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId18 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties18 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts32 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold32 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript32 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties18.Append(runFonts32);
            paragraphMarkRunProperties18.Append(bold32);
            paragraphMarkRunProperties18.Append(fontSizeComplexScript32);

            paragraphProperties18.Append(paragraphStyleId18);
            paragraphProperties18.Append(paragraphMarkRunProperties18);

            W.Run run15 = new W.Run();

            W.RunProperties runProperties15 = new W.RunProperties();
            W.RunFonts runFonts33 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold33 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript33 = new W.FontSizeComplexScript() { Val = "20" };

            runProperties15.Append(runFonts33);
            runProperties15.Append(bold33);
            runProperties15.Append(fontSizeComplexScript33);
            W.Text text15 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text15.Text = " ";

            run15.Append(runProperties15);
            run15.Append(text15);

            paragraph18.Append(paragraphProperties18);
            paragraph18.Append(run15);

            W.Paragraph paragraph19 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "05C6F3B3", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties19 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId19 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties19 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts34 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold34 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript34 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties19.Append(runFonts34);
            paragraphMarkRunProperties19.Append(bold34);
            paragraphMarkRunProperties19.Append(fontSizeComplexScript34);

            paragraphProperties19.Append(paragraphStyleId19);
            paragraphProperties19.Append(paragraphMarkRunProperties19);

            W.Run run16 = new W.Run();

            W.RunProperties runProperties16 = new W.RunProperties();
            W.RunFonts runFonts35 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold35 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript35 = new W.FontSizeComplexScript() { Val = "20" };

            runProperties16.Append(runFonts35);
            runProperties16.Append(bold35);
            runProperties16.Append(fontSizeComplexScript35);
            W.Text text16 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text16.Text = " ";

            run16.Append(runProperties16);
            run16.Append(text16);

            paragraph19.Append(paragraphProperties19);
            paragraph19.Append(run16);

            W.Paragraph paragraph20 = new W.Paragraph() { RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "3C7FD12D", TextId = "77777777" };

            W.ParagraphProperties paragraphProperties20 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId20 = new W.ParagraphStyleId() { Val = "BodyText" };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties20 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts36 = new W.RunFonts() { ComplexScript = "Calibri" };
            W.Bold bold36 = new W.Bold();
            W.FontSizeComplexScript fontSizeComplexScript36 = new W.FontSizeComplexScript() { Val = "20" };

            paragraphMarkRunProperties20.Append(runFonts36);
            paragraphMarkRunProperties20.Append(bold36);
            paragraphMarkRunProperties20.Append(fontSizeComplexScript36);

            paragraphProperties20.Append(paragraphStyleId20);
            paragraphProperties20.Append(paragraphMarkRunProperties20);

            paragraph20.Append(paragraphProperties20);

            textBoxContent1.Append(paragraph1);
            textBoxContent1.Append(paragraph2);
            textBoxContent1.Append(paragraph3);
            textBoxContent1.Append(paragraph4);
            textBoxContent1.Append(paragraph5);
            textBoxContent1.Append(paragraph6);
            textBoxContent1.Append(paragraph7);
            textBoxContent1.Append(paragraph8);
            textBoxContent1.Append(paragraph9);
            textBoxContent1.Append(paragraph10);
            textBoxContent1.Append(paragraph11);
            textBoxContent1.Append(paragraph12);
            textBoxContent1.Append(paragraph13);
            textBoxContent1.Append(paragraph14);
            textBoxContent1.Append(paragraph15);
            textBoxContent1.Append(paragraph16);
            textBoxContent1.Append(paragraph17);
            textBoxContent1.Append(paragraph18);
            textBoxContent1.Append(paragraph19);
            textBoxContent1.Append(paragraph20);

            textBoxInfo21.Append(textBoxContent1);

            Wps.TextBodyProperties textBodyProperties1 = new Wps.TextBodyProperties() { Rotation = 0, Vertical = A.TextVerticalValues.Horizontal, Wrap = A.TextWrappingValues.Square, LeftInset = 0, TopInset = 0, RightInset = 0, BottomInset = 0, Anchor = A.TextAnchoringTypeValues.Top, AnchorCenter = false, UpRight = true };
            A.NoAutoFit noAutoFit1 = new A.NoAutoFit();

            textBodyProperties1.Append(noAutoFit1);

            wordprocessingShape1.Append(nonVisualDrawingShapeProperties1);
            wordprocessingShape1.Append(shapeProperties1);
            wordprocessingShape1.Append(textBoxInfo21);
            wordprocessingShape1.Append(textBodyProperties1);

            graphicData1.Append(wordprocessingShape1);

            graphic1.Append(graphicData1);

            Wp14.RelativeWidth relativeWidth1 = new Wp14.RelativeWidth() { ObjectId = Wp14.SizeRelativeHorizontallyValues.Page };
            Wp14.PercentageWidth percentageWidth1 = new Wp14.PercentageWidth();
            percentageWidth1.Text = "0";

            relativeWidth1.Append(percentageWidth1);

            Wp14.RelativeHeight relativeHeight1 = new Wp14.RelativeHeight() { RelativeFrom = Wp14.SizeRelativeVerticallyValues.Page };
            Wp14.PercentageHeight percentageHeight1 = new Wp14.PercentageHeight();
            percentageHeight1.Text = "0";

            relativeHeight1.Append(percentageHeight1);

            anchor1.Append(simplePosition1);
            anchor1.Append(horizontalPosition1);
            anchor1.Append(verticalPosition1);
            anchor1.Append(extent1);
            anchor1.Append(effectExtent1);
            anchor1.Append(wrapNone1);
            anchor1.Append(docProperties1);
            anchor1.Append(nonVisualGraphicFrameDrawingProperties1);
            anchor1.Append(graphic1);
            anchor1.Append(relativeWidth1);
            anchor1.Append(relativeHeight1);

            drawing1.Append(anchor1);

            //alternateContentChoice1.Append(drawing1);
            //body.Append(alternateContentChoice1);
            //body.Append(drawing1);
            Run run = new Run();
            run.AppendChild(drawing1);

            body.Append(run);

        }

        public void GenerateBody(Body body)
        {
            Table table1 = new Table();

            TableProperties tableProperties1 = new TableProperties();
            TableWidth tableWidth1 = new TableWidth() { Width = "11319", Type = TableWidthUnitValues.Dxa };
            TableIndentation tableIndentation1 = new TableIndentation() { Width = -1310, Type = TableWidthUnitValues.Dxa };
          //  TableLayout tableLayout1 = new TableLayout() { Type = TableLayoutValues.Fixed };
            TableLook tableLook1 = new TableLook() { Val = "0000", FirstRow = false, LastRow = false, FirstColumn = false, LastColumn = false, NoHorizontalBand = false, NoVerticalBand = false };

            tableProperties1.Append(tableWidth1);
            tableProperties1.Append(tableIndentation1);
          //  tableProperties1.Append(tableLayout1);
            tableProperties1.Append(tableLook1);

            TableGrid tableGrid1 = new TableGrid();
            GridColumn gridColumn1 = new GridColumn() { Width = "10448" };
            GridColumn gridColumn2 = new GridColumn() { Width = "871" };

            tableGrid1.Append(gridColumn1);
            tableGrid1.Append(gridColumn2);

            TableRow tableRow1 = new TableRow() { RsidTableRowMarkRevision = "00682DA0", RsidTableRowAddition = "00682DA0", RsidTableRowProperties = "00682DA0", ParagraphId = "70C1D861", TextId = "77777777" };

            TableRowProperties tableRowProperties1 = new TableRowProperties();
            TableRowHeight tableRowHeight1 = new TableRowHeight() { Val = (UInt32Value)4933U, HeightType = HeightRuleValues.Exact };

            tableRowProperties1.Append(tableRowHeight1);

            TableCell tableCell1 = new TableCell();

            TableCellProperties tableCellProperties1 = new TableCellProperties();
            TableCellWidth tableCellWidth1 = new TableCellWidth() { Width = "10448", Type = TableWidthUnitValues.Dxa };
            Shading shading1 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "F58426" };
            TableCellVerticalAlignment tableCellVerticalAlignment1 = new TableCellVerticalAlignment() { Val = TableVerticalAlignmentValues.Bottom };

            tableCellProperties1.Append(tableCellWidth1);
            tableCellProperties1.Append(shading1);
            tableCellProperties1.Append(tableCellVerticalAlignment1);

            Paragraph paragraph1 = new Paragraph() { RsidParagraphMarkRevision = "00682DA0", RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "28145B75", TextId = "77777777" };

            ParagraphProperties paragraphProperties1 = new ParagraphProperties();
            SuppressAutoHyphens suppressAutoHyphens1 = new SuppressAutoHyphens();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() { After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };
            Indentation indentation1 = new Indentation() { Left = "1168" };

            ParagraphMarkRunProperties paragraphMarkRunProperties1 = new ParagraphMarkRunProperties();
            RunFonts runFonts1 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
            Color color1 = new Color() { Val = "FFFFFF" };
            FontSize fontSize1 = new FontSize() { Val = "60" };
            FontSizeComplexScript fontSizeComplexScript1 = new FontSizeComplexScript() { Val = "60" };
            Languages languages1 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

            paragraphMarkRunProperties1.Append(runFonts1);
            paragraphMarkRunProperties1.Append(color1);
            paragraphMarkRunProperties1.Append(fontSize1);
            paragraphMarkRunProperties1.Append(fontSizeComplexScript1);
            paragraphMarkRunProperties1.Append(languages1);

            paragraphProperties1.Append(suppressAutoHyphens1);
            paragraphProperties1.Append(spacingBetweenLines1);
            paragraphProperties1.Append(indentation1);
            paragraphProperties1.Append(paragraphMarkRunProperties1);

            Run run1 = new Run() { RsidRunProperties = "00682DA0" };

            RunProperties runProperties1 = new RunProperties();
            RunFonts runFonts2 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
            Color color2 = new Color() { Val = "FFFFFF" };
            FontSize fontSize2 = new FontSize() { Val = "60" };
            FontSizeComplexScript fontSizeComplexScript2 = new FontSizeComplexScript() { Val = "60" };
            Languages languages2 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

            runProperties1.Append(runFonts2);
            runProperties1.Append(color2);
            runProperties1.Append(fontSize2);
            runProperties1.Append(fontSizeComplexScript2);
            runProperties1.Append(languages2);
            Text text1 = new Text();
            text1.Text = "Investment recommendations";

            run1.Append(runProperties1);
            run1.Append(text1);

            paragraph1.Append(paragraphProperties1);
            paragraph1.Append(run1);

            //Paragraph paragraph2 = new Paragraph() { RsidParagraphMarkRevision = "00682DA0", RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "30056DAC", TextId = "77777777" };

            //ParagraphProperties paragraphProperties2 = new ParagraphProperties();
            //SuppressAutoHyphens suppressAutoHyphens2 = new SuppressAutoHyphens();
            //SpacingBetweenLines spacingBetweenLines2 = new SpacingBetweenLines() { After = "200", Line = "240", LineRule = LineSpacingRuleValues.Auto };
            //Indentation indentation2 = new Indentation() { Left = "1168" };

            //ParagraphMarkRunProperties paragraphMarkRunProperties2 = new ParagraphMarkRunProperties();
            //RunFonts runFonts3 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
            //Color color3 = new Color() { Val = "000000" };
            //FontSize fontSize3 = new FontSize() { Val = "18" };
            //FontSizeComplexScript fontSizeComplexScript3 = new FontSizeComplexScript() { Val = "20" };
            //Languages languages3 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

            //paragraphMarkRunProperties2.Append(runFonts3);
            //paragraphMarkRunProperties2.Append(color3);
            //paragraphMarkRunProperties2.Append(fontSize3);
            //paragraphMarkRunProperties2.Append(fontSizeComplexScript3);
            //paragraphMarkRunProperties2.Append(languages3);

            //paragraphProperties2.Append(suppressAutoHyphens2);
            //paragraphProperties2.Append(spacingBetweenLines2);
            //paragraphProperties2.Append(indentation2);
            //paragraphProperties2.Append(paragraphMarkRunProperties2);

            //Run run2 = new Run() { RsidRunProperties = "00682DA0" };

            //RunProperties runProperties2 = new RunProperties();
            //RunFonts runFonts4 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
            //Color color4 = new Color() { Val = "FFFFFF" };
            //FontSize fontSize4 = new FontSize() { Val = "60" };
            //FontSizeComplexScript fontSizeComplexScript4 = new FontSizeComplexScript() { Val = "60" };
            //Languages languages4 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

            //runProperties2.Append(runFonts4);
            //runProperties2.Append(color4);
            //runProperties2.Append(fontSize4);
            //runProperties2.Append(fontSizeComplexScript4);
            //runProperties2.Append(languages4);
            //Text text2 = new Text();
            //text2.Text = "recommendations";

            //run2.Append(runProperties2);
            //run2.Append(text2);

            //paragraph2.Append(paragraphProperties2);
            //paragraph2.Append(run2);

            tableCell1.Append(tableCellProperties1);
            tableCell1.Append(paragraph1);
            //tableCell1.Append(paragraph2);

            TableCell tableCell2 = new TableCell();

            TableCellProperties tableCellProperties2 = new TableCellProperties();
            TableCellWidth tableCellWidth2 = new TableCellWidth() { Width = "871", Type = TableWidthUnitValues.Dxa };
            Shading shading2 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "F58426" };

            tableCellProperties2.Append(tableCellWidth2);
            tableCellProperties2.Append(shading2);

            Paragraph paragraph3 = new Paragraph() { RsidParagraphMarkRevision = "00682DA0", RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "5B4D34FA", TextId = "77777777" };

            ParagraphProperties paragraphProperties3 = new ParagraphProperties();
            SuppressAutoHyphens suppressAutoHyphens3 = new SuppressAutoHyphens();
            SnapToGrid snapToGrid1 = new SnapToGrid() { Val = false };
            SpacingBetweenLines spacingBetweenLines3 = new SpacingBetweenLines() { After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };

            ParagraphMarkRunProperties paragraphMarkRunProperties3 = new ParagraphMarkRunProperties();
            RunFonts runFonts5 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
            Color color5 = new Color() { Val = "000000" };
            FontSize fontSize5 = new FontSize() { Val = "18" };
            FontSizeComplexScript fontSizeComplexScript5 = new FontSizeComplexScript() { Val = "20" };
            Languages languages5 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

            paragraphMarkRunProperties3.Append(runFonts5);
            paragraphMarkRunProperties3.Append(color5);
            paragraphMarkRunProperties3.Append(fontSize5);
            paragraphMarkRunProperties3.Append(fontSizeComplexScript5);
            paragraphMarkRunProperties3.Append(languages5);

            paragraphProperties3.Append(suppressAutoHyphens3);
            paragraphProperties3.Append(snapToGrid1);
            paragraphProperties3.Append(spacingBetweenLines3);
            paragraphProperties3.Append(paragraphMarkRunProperties3);

            paragraph3.Append(paragraphProperties3);

            tableCell2.Append(tableCellProperties2);
            tableCell2.Append(paragraph3);
            BookmarkStart bookmarkStart1 = new BookmarkStart() { Name = "_GoBack", Id = "0" };
            BookmarkEnd bookmarkEnd1 = new BookmarkEnd() { Id = "0" };

            tableRow1.Append(tableRowProperties1);
            tableRow1.Append(tableCell1);
            tableRow1.Append(tableCell2);
            tableRow1.Append(bookmarkStart1);
            tableRow1.Append(bookmarkEnd1);

            TableRow tableRow2 = new TableRow() { RsidTableRowMarkRevision = "00682DA0", RsidTableRowAddition = "00682DA0", RsidTableRowProperties = "00682DA0", ParagraphId = "3AE95C2D", TextId = "77777777" };

            TableRowProperties tableRowProperties2 = new TableRowProperties();
            TableRowHeight tableRowHeight2 = new TableRowHeight() { Val = (UInt32Value)312U, HeightType = HeightRuleValues.Exact };

            tableRowProperties2.Append(tableRowHeight2);

            TableCell tableCell3 = new TableCell();

            TableCellProperties tableCellProperties3 = new TableCellProperties();
            TableCellWidth tableCellWidth3 = new TableCellWidth() { Width = "10448", Type = TableWidthUnitValues.Dxa };
            Shading shading3 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "5F6062" };

            tableCellProperties3.Append(tableCellWidth3);
            tableCellProperties3.Append(shading3);

            Paragraph paragraph4 = new Paragraph() { RsidParagraphMarkRevision = "00682DA0", RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "57970676", TextId = "77777777" };

            ParagraphProperties paragraphProperties4 = new ParagraphProperties();
            SuppressAutoHyphens suppressAutoHyphens4 = new SuppressAutoHyphens();
            SnapToGrid snapToGrid2 = new SnapToGrid() { Val = false };
            SpacingBetweenLines spacingBetweenLines4 = new SpacingBetweenLines() { After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };

            ParagraphMarkRunProperties paragraphMarkRunProperties4 = new ParagraphMarkRunProperties();
            RunFonts runFonts6 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
            Color color6 = new Color() { Val = "000000" };
            FontSize fontSize6 = new FontSize() { Val = "18" };
            FontSizeComplexScript fontSizeComplexScript6 = new FontSizeComplexScript() { Val = "20" };
            Languages languages6 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

            paragraphMarkRunProperties4.Append(runFonts6);
            paragraphMarkRunProperties4.Append(color6);
            paragraphMarkRunProperties4.Append(fontSize6);
            paragraphMarkRunProperties4.Append(fontSizeComplexScript6);
            paragraphMarkRunProperties4.Append(languages6);

            paragraphProperties4.Append(suppressAutoHyphens4);
            paragraphProperties4.Append(snapToGrid2);
            paragraphProperties4.Append(spacingBetweenLines4);
            paragraphProperties4.Append(paragraphMarkRunProperties4);

            paragraph4.Append(paragraphProperties4);

            tableCell3.Append(tableCellProperties3);
            tableCell3.Append(paragraph4);

            TableCell tableCell4 = new TableCell();

            TableCellProperties tableCellProperties4 = new TableCellProperties();
            TableCellWidth tableCellWidth4 = new TableCellWidth() { Width = "871", Type = TableWidthUnitValues.Dxa };
            Shading shading4 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "F58426" };

            tableCellProperties4.Append(tableCellWidth4);
            tableCellProperties4.Append(shading4);

            Paragraph paragraph5 = new Paragraph() { RsidParagraphMarkRevision = "00682DA0", RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "57DFB535", TextId = "77777777" };

            ParagraphProperties paragraphProperties5 = new ParagraphProperties();
            SuppressAutoHyphens suppressAutoHyphens5 = new SuppressAutoHyphens();
            SnapToGrid snapToGrid3 = new SnapToGrid() { Val = false };
            SpacingBetweenLines spacingBetweenLines5 = new SpacingBetweenLines() { After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };

            ParagraphMarkRunProperties paragraphMarkRunProperties5 = new ParagraphMarkRunProperties();
            RunFonts runFonts7 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
            Color color7 = new Color() { Val = "000000" };
            FontSize fontSize7 = new FontSize() { Val = "18" };
            FontSizeComplexScript fontSizeComplexScript7 = new FontSizeComplexScript() { Val = "20" };
            Languages languages7 = new Languages() { Val = "en-AU", EastAsia = "en-AU" };

            paragraphMarkRunProperties5.Append(runFonts7);
            paragraphMarkRunProperties5.Append(color7);
            paragraphMarkRunProperties5.Append(fontSize7);
            paragraphMarkRunProperties5.Append(fontSizeComplexScript7);
            paragraphMarkRunProperties5.Append(languages7);

            paragraphProperties5.Append(suppressAutoHyphens5);
            paragraphProperties5.Append(snapToGrid3);
            paragraphProperties5.Append(spacingBetweenLines5);
            paragraphProperties5.Append(paragraphMarkRunProperties5);

            paragraph5.Append(paragraphProperties5);

            tableCell4.Append(tableCellProperties4);
            tableCell4.Append(paragraph5);

            tableRow2.Append(tableRowProperties2);
            tableRow2.Append(tableCell3);
            tableRow2.Append(tableCell4);

            table1.Append(tableProperties1);
            table1.Append(tableGrid1);
            table1.Append(tableRow1);
            table1.Append(tableRow2);
            body.Append(table1);
        }

        private void AddPara1(Body body)
        {

            Paragraph paragraph1 = new Paragraph() { RsidParagraphMarkRevision = "00682DA0", RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "7DADCC70", TextId = "77777777" };

            ParagraphProperties paragraphProperties1 = new ParagraphProperties();
            SuppressAutoHyphens suppressAutoHyphens1 = new SuppressAutoHyphens();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() { After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };
            Indentation indentation1 = new Indentation() { Left = "-112", Right = "162" };
            Justification justification1 = new Justification() { Val = JustificationValues.Both };

            ParagraphMarkRunProperties paragraphMarkRunProperties1 = new ParagraphMarkRunProperties();
            RunFonts runFonts1 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
            Color color1 = new Color() { Val = "9FA1A4" };
            FontSizeComplexScript fontSizeComplexScript1 = new FontSizeComplexScript() { Val = "18" };
            Languages languages1 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

            paragraphMarkRunProperties1.Append(runFonts1);
            paragraphMarkRunProperties1.Append(color1);
            paragraphMarkRunProperties1.Append(fontSizeComplexScript1);
            paragraphMarkRunProperties1.Append(languages1);

            paragraphProperties1.Append(suppressAutoHyphens1);
            paragraphProperties1.Append(spacingBetweenLines1);
            paragraphProperties1.Append(indentation1);
            paragraphProperties1.Append(justification1);
            paragraphProperties1.Append(paragraphMarkRunProperties1);

            Run run1 = new Run() { RsidRunProperties = "00682DA0" };

            RunProperties runProperties1 = new RunProperties();
            RunFonts runFonts2 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
            Color color2 = new Color() { Val = "9FA1A4" };
            FontSizeComplexScript fontSizeComplexScript2 = new FontSizeComplexScript() { Val = "22" };
            Languages languages2 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

            runProperties1.Append(runFonts2);
            runProperties1.Append(color2);
            runProperties1.Append(fontSizeComplexScript2);
            runProperties1.Append(languages2);
            Text text1 = new Text() { Space = SpaceProcessingModeValues.Preserve };
            text1.Text = "We use a dedicated research team and software to consider the suitability and appropriateness of products and strategies for your personal circumstances. ";

            run1.Append(runProperties1);
            run1.Append(text1);

            paragraph1.Append(paragraphProperties1);
            paragraph1.Append(run1);
            body.Append(paragraph1);
        }
        private void AddPara2(Body body)
        {
            Paragraph paragraph1 = new Paragraph() { RsidParagraphMarkRevision = "00682DA0", RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "12F282DF", TextId = "77777777" };

            ParagraphProperties paragraphProperties1 = new ParagraphProperties();
            SuppressAutoHyphens suppressAutoHyphens1 = new SuppressAutoHyphens();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() { After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };
            Indentation indentation1 = new Indentation() { Left = "-112", Right = "162" };
            Justification justification1 = new Justification() { Val = JustificationValues.Both };

            ParagraphMarkRunProperties paragraphMarkRunProperties1 = new ParagraphMarkRunProperties();
            RunFonts runFonts1 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
            Color color1 = new Color() { Val = "9FA1A4" };
            FontSizeComplexScript fontSizeComplexScript1 = new FontSizeComplexScript() { Val = "18" };
            Languages languages1 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

            paragraphMarkRunProperties1.Append(runFonts1);
            paragraphMarkRunProperties1.Append(color1);
            paragraphMarkRunProperties1.Append(fontSizeComplexScript1);
            paragraphMarkRunProperties1.Append(languages1);

            paragraphProperties1.Append(suppressAutoHyphens1);
            paragraphProperties1.Append(spacingBetweenLines1);
            paragraphProperties1.Append(indentation1);
            paragraphProperties1.Append(justification1);
            paragraphProperties1.Append(paragraphMarkRunProperties1);

            Run run1 = new Run() { RsidRunProperties = "00682DA0" };

            RunProperties runProperties1 = new RunProperties();
            RunFonts runFonts2 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Segoe UI Light" };
            Color color2 = new Color() { Val = "9FA1A4" };
            FontSizeComplexScript fontSizeComplexScript2 = new FontSizeComplexScript() { Val = "18" };
            Languages languages2 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

            runProperties1.Append(runFonts2);
            runProperties1.Append(color2);
            runProperties1.Append(fontSizeComplexScript2);
            runProperties1.Append(languages2);
            Text text1 = new Text();
            text1.Text = "Our research includes an analysis of a fundâ€™s asset allocation, strength and resources of underlying investment managers.";

            run1.Append(runProperties1);
            run1.Append(text1);

            paragraph1.Append(paragraphProperties1);
            paragraph1.Append(run1);
            body.Append(paragraph1);
        }

        private static void AlterTableType(List<Table> t, List<Paragraph> p, WordprocessingDocument document)
        {
          



            foreach (Table table in t)
            {
                var tableProp = table.Descendants<TableProperties>().ToList().FirstOrDefault();
                if (tableProp != null)
                {
                    TableCellMarginDefault tableCellMarginDefault1 = new TableCellMarginDefault();
                    TopMargin topMargin1 = new TopMargin() { Width = "15", Type = TableWidthUnitValues.Dxa };
                    TableCellLeftMargin tableCellLeftMargin1 = new TableCellLeftMargin() { Width = 85, Type = TableWidthValues.Dxa };
                    BottomMargin bottomMargin1 = new BottomMargin() { Width = "15", Type = TableWidthUnitValues.Dxa };
                    TableCellRightMargin tableCellRightMargin1 = new TableCellRightMargin() { Width = 85, Type = TableWidthValues.Dxa };
                    //TableLayout tl = new TableLayout() { Type = TableLayoutValues.Fixed };
                    //tableProp.Append(tl);

                    tableCellMarginDefault1.Append(topMargin1);
                    tableCellMarginDefault1.Append(tableCellLeftMargin1);
                    tableCellMarginDefault1.Append(bottomMargin1);
                    tableCellMarginDefault1.Append(tableCellRightMargin1);

                    var tableMarg = tableProp.Descendants<TableCellMarginDefault>().ToList().FirstOrDefault();
                    if(tableMarg != null)
                    {
                        tableProp.ReplaceChild<TableCellMarginDefault>(tableCellMarginDefault1, tableMarg);
                    }
                    else
                    {
                        
                        tableProp.Append(tableCellMarginDefault1);
                    }
                }
                else
                {
                    TableProperties tableProperties1 = new TableProperties();
                    TableCellMarginDefault tableCellMarginDefault1 = new TableCellMarginDefault();
                    TopMargin topMargin1 = new TopMargin() { Width = "15", Type = TableWidthUnitValues.Dxa };
                    TableCellLeftMargin tableCellLeftMargin1 = new TableCellLeftMargin() { Width = 85, Type = TableWidthValues.Dxa };
                    BottomMargin bottomMargin1 = new BottomMargin() { Width = "15", Type = TableWidthUnitValues.Dxa };
                    TableCellRightMargin tableCellRightMargin1 = new TableCellRightMargin() { Width = 85, Type = TableWidthValues.Dxa };
                    //TableLayout tl = new TableLayout() { Type = TableLayoutValues.Fixed };

                    tableCellMarginDefault1.Append(topMargin1);
                    tableCellMarginDefault1.Append(tableCellLeftMargin1);
                    tableCellMarginDefault1.Append(bottomMargin1);
                    tableCellMarginDefault1.Append(tableCellRightMargin1);
                    tableProperties1.Append(tableCellMarginDefault1);
                   // tableProperties1.Append(tl);
                }


                foreach (TableRow row in table.Descendants<TableRow>())
                {

                    var subRun = row.Descendants<Paragraph>().ToList();
                    foreach (Paragraph run in subRun)
                    {
                        var subRnProp = run.Descendants<ParagraphProperties>().ToList().FirstOrDefault();
                       // SpacingBetweenLines spacing = new SpacingBetweenLines() { LineRule = LineSpacingRuleValues.Auto, Before = "6", After = "6" };
                        SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() { After = "120", Before = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                        if (subRnProp != null)
                        {
                            var space = subRnProp.Descendants<SpacingBetweenLines>().FirstOrDefault();
                            if (space != null)
                            {
                                subRnProp.ReplaceChild<SpacingBetweenLines>(spacingBetweenLines1, space);
                            }
                            else
                            {
                                subRnProp.AppendChild<SpacingBetweenLines>(spacingBetweenLines1);
                                //run.AppendChild<RunProperties>(subRnProp);
                            }

                           
                        }
                        else
                        {
                            var tmpSubRunProp = new ParagraphProperties();
                            tmpSubRunProp.AppendChild<SpacingBetweenLines>(spacingBetweenLines1);
                            run.AppendChild<ParagraphProperties>(tmpSubRunProp);
                        }




                    }



                    var tableRowProp = row.Descendants<TableRowProperties>().ToList().FirstOrDefault();
                    if(tableRowProp != null)
                    {
                        TableRowHeight tableRowHeight1 = new TableRowHeight() { Val = (UInt32Value)312U };
                        var tableP = tableRowProp.Descendants<TableRowHeight>().ToList().FirstOrDefault();
                        if (tableP != null)
                        {
                            tableRowProp.ReplaceChild<TableRowHeight>(tableRowHeight1, tableP);
                        }
                        else
                        {

                            tableRowProp.Append(tableRowHeight1);
                        }
                    }
                    else
                    {
                        TableRowProperties trp = new TableRowProperties();
                       // CantSplit split = new CantSplit();
                        TableRowHeight tableRowHeight1 = new TableRowHeight() { Val = (UInt32Value)312U };
                       // trp.Append(split);
                        trp.Append(tableRowHeight1);
                        row.AppendChild(trp);
                    }
                }
            }



            foreach (Paragraph para in p)
            {


                ParagraphProperties spacingProp = para.Descendants<ParagraphProperties>().ToList().FirstOrDefault();
                SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() { Before = "120", After = "120", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification1 = new Justification() { Val = JustificationValues.Both };

                ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
              
     

                if (spacingProp != null)
                {
                    var sp = spacingProp.Descendants<SpacingBetweenLines>().FirstOrDefault();
                    if(sp == null)
                    {
                        spacingProp.Append((SpacingBetweenLines)spacingBetweenLines1.CloneNode(true));
                    }

                    var js = spacingProp.Descendants<Justification>().FirstOrDefault();
                    if (js == null)
                    {
                        spacingProp.Append((Justification)justification1.CloneNode(true));
                    }

                }
                else
                {
                   
                    ParagraphProperties tmpSubRunProp = new ParagraphProperties();
                    tmpSubRunProp.AppendChild((SpacingBetweenLines)spacingBetweenLines1.CloneNode(true));
                    tmpSubRunProp.AppendChild((Justification)justification1.CloneNode(true));
                    
                    para.PrependChild<ParagraphProperties>((ParagraphProperties)tmpSubRunProp.CloneNode(true));
                }

                var subRun = para.Descendants<Run>().ToList();
                foreach (Run run in subRun)
                {
                    var subRnProp = run.Descendants<RunProperties>().ToList().FirstOrDefault();
                    var newFont = new RunFonts();
                    newFont.Ascii = "Verdana";
                    newFont.EastAsia = "Verdana";

                    var fontSize = new FontSize();
                    fontSize.Val = "18";

                    if (subRnProp != null)
                    {
                        var font = subRnProp.Descendants<RunFonts>().FirstOrDefault();
                        if (font != null)
                        {
                            subRnProp.ReplaceChild<RunFonts>(newFont, font);
                        }
                        else
                        {
                            subRnProp.PrependChild<RunFonts>(newFont);
                            //run.AppendChild<RunProperties>(subRnProp);
                        }

                        var fonts = subRnProp.Descendants<FontSize>().FirstOrDefault();
                        if (fonts != null)
                        {
                            // subRnProp.ReplaceChild<FontSize>(fontSize, fonts);
                        }
                        else
                        {
                            subRnProp.PrependChild<FontSize>(fontSize);
                            //run.AppendChild<RunProperties>(subRnProp);
                        }

                    }
                    else
                    {
                        var tmpSubRunProp = new RunProperties();
                        tmpSubRunProp.AppendChild<RunFonts>(newFont);
                        tmpSubRunProp.AppendChild<FontSize>(fontSize);
                        run.PrependChild<RunProperties>(tmpSubRunProp);
                    }




                }
            }

          

       
        }

        public void GenerateAlternateContentChoice(Paragraph body)
        {
            
            AlternateContentChoice alternateContentChoice1 = new AlternateContentChoice() { Requires = "wps" };

            W.Drawing drawing1 = new W.Drawing();

            Wp.Anchor anchor1 = new Wp.Anchor() { DistanceFromTop = (UInt32Value)45720U, DistanceFromBottom = (UInt32Value)45720U, DistanceFromLeft = (UInt32Value)114300U, DistanceFromRight = (UInt32Value)114300U, SimplePos = false, RelativeHeight = (UInt32Value)251659264U, BehindDoc = false, Locked = false, LayoutInCell = true, AllowOverlap = true, EditId = "2BC90FEB", AnchorId = "22D6F6DC" };
            Wp.SimplePosition simplePosition1 = new Wp.SimplePosition() { X = 0L, Y = 0L };

            Wp.HorizontalPosition horizontalPosition1 = new Wp.HorizontalPosition() { RelativeFrom = Wp.HorizontalRelativePositionValues.Margin };
            Wp.PositionOffset positionOffset1 = new Wp.PositionOffset();
            positionOffset1.Text = "4191000";

            horizontalPosition1.Append(positionOffset1);

            Wp.VerticalPosition verticalPosition1 = new Wp.VerticalPosition() { RelativeFrom = Wp.VerticalRelativePositionValues.Paragraph };
            Wp.PositionOffset positionOffset2 = new Wp.PositionOffset();
            positionOffset2.Text = "1270";

            verticalPosition1.Append(positionOffset2);
            Wp.Extent extent1 = new Wp.Extent() { Cx = 2360930L, Cy = 1170709L };
            Wp.EffectExtent effectExtent1 = new Wp.EffectExtent() { LeftEdge = 0L, TopEdge = 0L, RightEdge = 12700L, BottomEdge = 10795L };
            Wp.WrapNone wrapNone1 = new Wp.WrapNone();
            Wp.DocProperties docProperties1 = new Wp.DocProperties() { Id = (UInt32Value)217U, Name = "Text Box 2" };

            Wp.NonVisualGraphicFrameDrawingProperties nonVisualGraphicFrameDrawingProperties1 = new Wp.NonVisualGraphicFrameDrawingProperties();

            A.GraphicFrameLocks graphicFrameLocks1 = new A.GraphicFrameLocks();
            graphicFrameLocks1.AddNamespaceDeclaration("a", "http://schemas.openxmlformats.org/drawingml/2006/main");

            nonVisualGraphicFrameDrawingProperties1.Append(graphicFrameLocks1);

            A.Graphic graphic1 = new A.Graphic();
            graphic1.AddNamespaceDeclaration("a", "http://schemas.openxmlformats.org/drawingml/2006/main");

            A.GraphicData graphicData1 = new A.GraphicData() { Uri = "http://schemas.microsoft.com/office/word/2010/wordprocessingShape" };

            Wps.WordprocessingShape wordprocessingShape1 = new Wps.WordprocessingShape();

            Wps.NonVisualDrawingShapeProperties nonVisualDrawingShapeProperties1 = new Wps.NonVisualDrawingShapeProperties() { TextBox = true };
            A.ShapeLocks shapeLocks1 = new A.ShapeLocks() { NoChangeArrowheads = true };

            nonVisualDrawingShapeProperties1.Append(shapeLocks1);

            Wps.ShapeProperties shapeProperties1 = new Wps.ShapeProperties() { BlackWhiteMode = A.BlackWhiteModeValues.Auto };

            A.Transform2D transform2D1 = new A.Transform2D();
            A.Offset offset1 = new A.Offset() { X = 0L, Y = 0L };
            A.Extents extents1 = new A.Extents() { Cx = 2360930L, Cy = 1170709L };

            transform2D1.Append(offset1);
            transform2D1.Append(extents1);

            A.PresetGeometry presetGeometry1 = new A.PresetGeometry() { Preset = A.ShapeTypeValues.Rectangle };
            A.AdjustValueList adjustValueList1 = new A.AdjustValueList();

            presetGeometry1.Append(adjustValueList1);

            A.SolidFill solidFill1 = new A.SolidFill();
            A.RgbColorModelHex rgbColorModelHex1 = new A.RgbColorModelHex() { Val = "FF0000" };

            solidFill1.Append(rgbColorModelHex1);

            A.Outline outline1 = new A.Outline() { Width = 9525 };

            A.SolidFill solidFill2 = new A.SolidFill();
            A.RgbColorModelHex rgbColorModelHex2 = new A.RgbColorModelHex() { Val = "000000" };

            solidFill2.Append(rgbColorModelHex2);
            A.Miter miter1 = new A.Miter() { Limit = 800000 };
            A.HeadEnd headEnd1 = new A.HeadEnd();
            A.TailEnd tailEnd1 = new A.TailEnd();

            outline1.Append(solidFill2);
            outline1.Append(miter1);
            outline1.Append(headEnd1);
            outline1.Append(tailEnd1);

            shapeProperties1.Append(transform2D1);
            shapeProperties1.Append(presetGeometry1);
            shapeProperties1.Append(solidFill1);
            shapeProperties1.Append(outline1);

            Wps.TextBoxInfo2 textBoxInfo21 = new Wps.TextBoxInfo2();

            W.TextBoxContent textBoxContent1 = new W.TextBoxContent();

            W.Paragraph paragraph1 = new W.Paragraph() { RsidParagraphMarkRevision = "00AD2CFA", RsidParagraphAddition = "00FD20A3", RsidParagraphProperties = "00FD20A3", RsidRunAdditionDefault = "00FD20A3" };

            W.ParagraphProperties paragraphProperties1 = new W.ParagraphProperties();
            W.SpacingBetweenLines spacingBetweenLines1 = new W.SpacingBetweenLines() { After = "0", Line = "240", LineRule = W.LineSpacingRuleValues.Auto };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties1 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts1 = new W.RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana" };
            W.Color color1 = new W.Color() { Val = "FFFFFF" };
            W.FontSize fontSize1 = new W.FontSize() { Val = "18" };
            W.FontSizeComplexScript fontSizeComplexScript1 = new W.FontSizeComplexScript() { Val = "18" };

            paragraphMarkRunProperties1.Append(runFonts1);
            paragraphMarkRunProperties1.Append(color1);
            paragraphMarkRunProperties1.Append(fontSize1);
            paragraphMarkRunProperties1.Append(fontSizeComplexScript1);

            paragraphProperties1.Append(spacingBetweenLines1);
            paragraphProperties1.Append(paragraphMarkRunProperties1);

            W.Run run1 = new W.Run() { RsidRunProperties = "00AD2CFA" };

            W.RunProperties runProperties1 = new W.RunProperties();
            W.RunFonts runFonts2 = new W.RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana" };
            W.Bold bold1 = new W.Bold();
            W.Color color2 = new W.Color() { Val = "FFFFFF" };
            W.FontSize fontSize2 = new W.FontSize() { Val = "18" };
            W.FontSizeComplexScript fontSizeComplexScript2 = new W.FontSizeComplexScript() { Val = "18" };

            runProperties1.Append(runFonts2);
            runProperties1.Append(bold1);
            runProperties1.Append(color2);
            runProperties1.Append(fontSize2);
            runProperties1.Append(fontSizeComplexScript2);
            W.Text text1 = new W.Text();
            text1.Text = "Note, high compliance risk (to be deleted after action)";

            run1.Append(runProperties1);
            run1.Append(text1);

            W.Run run2 = new W.Run() { RsidRunProperties = "00AD2CFA" };

            W.RunProperties runProperties2 = new W.RunProperties();
            W.RunFonts runFonts3 = new W.RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana" };
            W.Color color3 = new W.Color() { Val = "FFFFFF" };
            W.FontSize fontSize3 = new W.FontSize() { Val = "18" };
            W.FontSizeComplexScript fontSizeComplexScript3 = new W.FontSizeComplexScript() { Val = "18" };

            runProperties2.Append(runFonts3);
            runProperties2.Append(color3);
            runProperties2.Append(fontSize3);
            runProperties2.Append(fontSizeComplexScript3);
            W.Text text2 = new W.Text();
            text2.Text = ":";

            run2.Append(runProperties2);
            run2.Append(text2);

            paragraph1.Append(paragraphProperties1);
            paragraph1.Append(run1);
            paragraph1.Append(run2);

            W.Paragraph paragraph2 = new W.Paragraph() { RsidParagraphMarkRevision = "00AD2CFA", RsidParagraphAddition = "00FD20A3", RsidParagraphProperties = "00FD20A3", RsidRunAdditionDefault = "00FD20A3" };

            W.ParagraphProperties paragraphProperties2 = new W.ParagraphProperties();
            W.SpacingBetweenLines spacingBetweenLines2 = new W.SpacingBetweenLines() { After = "0", Line = "240", LineRule = W.LineSpacingRuleValues.Auto };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties2 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts4 = new W.RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana" };
            W.Color color4 = new W.Color() { Val = "FFFFFF" };
            W.FontSize fontSize4 = new W.FontSize() { Val = "18" };
            W.FontSizeComplexScript fontSizeComplexScript4 = new W.FontSizeComplexScript() { Val = "18" };

            paragraphMarkRunProperties2.Append(runFonts4);
            paragraphMarkRunProperties2.Append(color4);
            paragraphMarkRunProperties2.Append(fontSize4);
            paragraphMarkRunProperties2.Append(fontSizeComplexScript4);

            paragraphProperties2.Append(spacingBetweenLines2);
            paragraphProperties2.Append(paragraphMarkRunProperties2);

            W.Run run3 = new W.Run() { RsidRunProperties = "00AD2CFA" };

            W.RunProperties runProperties3 = new W.RunProperties();
            W.RunFonts runFonts5 = new W.RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana" };
            W.Color color5 = new W.Color() { Val = "FFFFFF" };
            W.FontSize fontSize5 = new W.FontSize() { Val = "18" };
            W.FontSizeComplexScript fontSizeComplexScript5 = new W.FontSizeComplexScript() { Val = "18" };

            runProperties3.Append(runFonts5);
            runProperties3.Append(color5);
            runProperties3.Append(fontSize5);
            runProperties3.Append(fontSizeComplexScript5);
            W.Text text3 = new W.Text() { Space = SpaceProcessingModeValues.Preserve };
            text3.Text = "Please ensure justification for the following asset allocation variances are updated in ";

            run3.Append(runProperties3);
            run3.Append(text3);
            W.ProofError proofError1 = new W.ProofError() { Type = W.ProofingErrorValues.SpellStart };

            W.Run run4 = new W.Run() { RsidRunProperties = "00AD2CFA" };

            W.RunProperties runProperties4 = new W.RunProperties();
            W.RunFonts runFonts6 = new W.RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana" };
            W.Color color6 = new W.Color() { Val = "FFFFFF" };
            W.FontSize fontSize6 = new W.FontSize() { Val = "18" };
            W.FontSizeComplexScript fontSizeComplexScript6 = new W.FontSizeComplexScript() { Val = "18" };

            runProperties4.Append(runFonts6);
            runProperties4.Append(color6);
            runProperties4.Append(fontSize6);
            runProperties4.Append(fontSizeComplexScript6);
            W.Text text4 = new W.Text();
            text4.Text = "SoA";

            run4.Append(runProperties4);
            run4.Append(text4);
            W.ProofError proofError2 = new W.ProofError() { Type = W.ProofingErrorValues.SpellEnd };

            W.Run run5 = new W.Run() { RsidRunProperties = "00AD2CFA" };

            W.RunProperties runProperties5 = new W.RunProperties();
            W.RunFonts runFonts7 = new W.RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana" };
            W.Color color7 = new W.Color() { Val = "FFFFFF" };
            W.FontSize fontSize7 = new W.FontSize() { Val = "18" };
            W.FontSizeComplexScript fontSizeComplexScript7 = new W.FontSizeComplexScript() { Val = "18" };

            runProperties5.Append(runFonts7);
            runProperties5.Append(color7);
            runProperties5.Append(fontSize7);
            runProperties5.Append(fontSizeComplexScript7);
            W.Text text5 = new W.Text();
            text5.Text = ":";

            run5.Append(runProperties5);
            run5.Append(text5);

            paragraph2.Append(paragraphProperties2);
            paragraph2.Append(run3);
            paragraph2.Append(proofError1);
            paragraph2.Append(run4);
            paragraph2.Append(proofError2);
            paragraph2.Append(run5);

            W.Paragraph paragraph3 = new W.Paragraph() { RsidParagraphMarkRevision = "00AD2CFA", RsidParagraphAddition = "00FD20A3", RsidParagraphProperties = "00FD20A3", RsidRunAdditionDefault = "00FD20A3" };

            W.ParagraphProperties paragraphProperties3 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId1 = new W.ParagraphStyleId() { Val = "ListParagraph" };

            W.NumberingProperties numberingProperties1 = new W.NumberingProperties();
            W.NumberingLevelReference numberingLevelReference1 = new W.NumberingLevelReference() { Val = 0 };
            W.NumberingId numberingId1 = new W.NumberingId() { Val = 1 };

            numberingProperties1.Append(numberingLevelReference1);
            numberingProperties1.Append(numberingId1);
            W.SuppressAutoHyphens suppressAutoHyphens1 = new W.SuppressAutoHyphens();
            W.SpacingBetweenLines spacingBetweenLines3 = new W.SpacingBetweenLines() { After = "0", Line = "240", LineRule = W.LineSpacingRuleValues.Auto };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties3 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts8 = new W.RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana" };
            W.Color color8 = new W.Color() { Val = "FFFFFF" };
            W.FontSize fontSize8 = new W.FontSize() { Val = "18" };
            W.FontSizeComplexScript fontSizeComplexScript8 = new W.FontSizeComplexScript() { Val = "18" };

            paragraphMarkRunProperties3.Append(runFonts8);
            paragraphMarkRunProperties3.Append(color8);
            paragraphMarkRunProperties3.Append(fontSize8);
            paragraphMarkRunProperties3.Append(fontSizeComplexScript8);

            paragraphProperties3.Append(paragraphStyleId1);
            paragraphProperties3.Append(numberingProperties1);
            paragraphProperties3.Append(suppressAutoHyphens1);
            paragraphProperties3.Append(spacingBetweenLines3);
            paragraphProperties3.Append(paragraphMarkRunProperties3);

            W.Run run6 = new W.Run() { RsidRunProperties = "00AD2CFA" };

            W.RunProperties runProperties6 = new W.RunProperties();
            W.RunFonts runFonts9 = new W.RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana" };
            W.Color color9 = new W.Color() { Val = "FFFFFF" };
            W.FontSize fontSize9 = new W.FontSize() { Val = "18" };
            W.FontSizeComplexScript fontSizeComplexScript9 = new W.FontSizeComplexScript() { Val = "18" };

            runProperties6.Append(runFonts9);
            runProperties6.Append(color9);
            runProperties6.Append(fontSize9);
            runProperties6.Append(fontSizeComplexScript9);
            W.Text text6 = new W.Text();
            text6.Text = "Asset class 1";

            run6.Append(runProperties6);
            run6.Append(text6);

            paragraph3.Append(paragraphProperties3);
            paragraph3.Append(run6);

            W.Paragraph paragraph4 = new W.Paragraph() { RsidParagraphMarkRevision = "00AD2CFA", RsidParagraphAddition = "00FD20A3", RsidParagraphProperties = "00FD20A3", RsidRunAdditionDefault = "00FD20A3" };

            W.ParagraphProperties paragraphProperties4 = new W.ParagraphProperties();
            W.ParagraphStyleId paragraphStyleId2 = new W.ParagraphStyleId() { Val = "ListParagraph" };

            W.NumberingProperties numberingProperties2 = new W.NumberingProperties();
            W.NumberingLevelReference numberingLevelReference2 = new W.NumberingLevelReference() { Val = 0 };
            W.NumberingId numberingId2 = new W.NumberingId() { Val = 1 };

            numberingProperties2.Append(numberingLevelReference2);
            numberingProperties2.Append(numberingId2);
            W.SuppressAutoHyphens suppressAutoHyphens2 = new W.SuppressAutoHyphens();
            W.SpacingBetweenLines spacingBetweenLines4 = new W.SpacingBetweenLines() { After = "0", Line = "240", LineRule = W.LineSpacingRuleValues.Auto };

            W.ParagraphMarkRunProperties paragraphMarkRunProperties4 = new W.ParagraphMarkRunProperties();
            W.RunFonts runFonts10 = new W.RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana" };
            W.Color color10 = new W.Color() { Val = "FFFFFF" };
            W.FontSize fontSize10 = new W.FontSize() { Val = "18" };
            W.FontSizeComplexScript fontSizeComplexScript10 = new W.FontSizeComplexScript() { Val = "18" };

            paragraphMarkRunProperties4.Append(runFonts10);
            paragraphMarkRunProperties4.Append(color10);
            paragraphMarkRunProperties4.Append(fontSize10);
            paragraphMarkRunProperties4.Append(fontSizeComplexScript10);

            paragraphProperties4.Append(paragraphStyleId2);
            paragraphProperties4.Append(numberingProperties2);
            paragraphProperties4.Append(suppressAutoHyphens2);
            paragraphProperties4.Append(spacingBetweenLines4);
            paragraphProperties4.Append(paragraphMarkRunProperties4);

            W.Run run7 = new W.Run() { RsidRunProperties = "00AD2CFA" };

            W.RunProperties runProperties7 = new W.RunProperties();
            W.RunFonts runFonts11 = new W.RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana" };
            W.Color color11 = new W.Color() { Val = "FFFFFF" };
            W.FontSize fontSize11 = new W.FontSize() { Val = "18" };
            W.FontSizeComplexScript fontSizeComplexScript11 = new W.FontSizeComplexScript() { Val = "18" };

            runProperties7.Append(runFonts11);
            runProperties7.Append(color11);
            runProperties7.Append(fontSize11);
            runProperties7.Append(fontSizeComplexScript11);
            W.Text text7 = new W.Text();
            text7.Text = "Asset class 2";

            run7.Append(runProperties7);
            run7.Append(text7);

            paragraph4.Append(paragraphProperties4);
            paragraph4.Append(run7);

            textBoxContent1.Append(paragraph1);
            textBoxContent1.Append(paragraph2);
            textBoxContent1.Append(paragraph3);
            textBoxContent1.Append(paragraph4);

            textBoxInfo21.Append(textBoxContent1);

            Wps.TextBodyProperties textBodyProperties1 = new Wps.TextBodyProperties() { Rotation = 0, Vertical = A.TextVerticalValues.Horizontal, Wrap = A.TextWrappingValues.Square, LeftInset = 91440, TopInset = 45720, RightInset = 91440, BottomInset = 45720, Anchor = A.TextAnchoringTypeValues.Top, AnchorCenter = false };
            A.NoAutoFit noAutoFit1 = new A.NoAutoFit();

            textBodyProperties1.Append(noAutoFit1);

            wordprocessingShape1.Append(nonVisualDrawingShapeProperties1);
            wordprocessingShape1.Append(shapeProperties1);
            wordprocessingShape1.Append(textBoxInfo21);
            wordprocessingShape1.Append(textBodyProperties1);

            graphicData1.Append(wordprocessingShape1);

            graphic1.Append(graphicData1);

            Wp14.RelativeWidth relativeWidth1 = new Wp14.RelativeWidth() { ObjectId = Wp14.SizeRelativeHorizontallyValues.Margin };
            Wp14.PercentageWidth percentageWidth1 = new Wp14.PercentageWidth();
            percentageWidth1.Text = "40000";

            relativeWidth1.Append(percentageWidth1);

            Wp14.RelativeHeight relativeHeight1 = new Wp14.RelativeHeight() { RelativeFrom = Wp14.SizeRelativeVerticallyValues.Margin };
            Wp14.PercentageHeight percentageHeight1 = new Wp14.PercentageHeight();
            percentageHeight1.Text = "0";

            relativeHeight1.Append(percentageHeight1);

            anchor1.Append(simplePosition1);
            anchor1.Append(horizontalPosition1);
            anchor1.Append(verticalPosition1);
            anchor1.Append(extent1);
            anchor1.Append(effectExtent1);
            anchor1.Append(wrapNone1);
            anchor1.Append(docProperties1);
            anchor1.Append(nonVisualGraphicFrameDrawingProperties1);
            anchor1.Append(graphic1);
            anchor1.Append(relativeWidth1);
            anchor1.Append(relativeHeight1);

            drawing1.Append(anchor1);


            //body.Append(drawing1);
            Run run = new Run();
            run.AppendChild(drawing1);
            Run linebreak = new Run(new Break());
            body.Append(new OpenXmlElement[] { (Run)linebreak.CloneNode(true),(Run)linebreak.CloneNode(true), (Run)run.CloneNode(true),(Run)linebreak.CloneNode(true), (Run)linebreak.CloneNode(true) , (Run)linebreak.CloneNode(true) });
        

        }

        private void GeneratePartContent(FooterPart part)
            {
                Footer footer1 = new Footer() { MCAttributes = new MarkupCompatibilityAttributes() { Ignorable = "w14 w15 wp14" } };
                footer1.AddNamespaceDeclaration("wpc", "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
                footer1.AddNamespaceDeclaration("mc", "http://schemas.openxmlformats.org/markup-compatibility/2006");
                footer1.AddNamespaceDeclaration("o", "urn:schemas-microsoft-com:office:office");
                footer1.AddNamespaceDeclaration("r", "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
                footer1.AddNamespaceDeclaration("m", "http://schemas.openxmlformats.org/officeDocument/2006/math");
                footer1.AddNamespaceDeclaration("v", "urn:schemas-microsoft-com:vml");
                footer1.AddNamespaceDeclaration("wp14", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
                footer1.AddNamespaceDeclaration("wp", "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
                footer1.AddNamespaceDeclaration("w10", "urn:schemas-microsoft-com:office:word");
                footer1.AddNamespaceDeclaration("w", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
                footer1.AddNamespaceDeclaration("w14", "http://schemas.microsoft.com/office/word/2010/wordml");
                footer1.AddNamespaceDeclaration("w15", "http://schemas.microsoft.com/office/word/2012/wordml");
                footer1.AddNamespaceDeclaration("wpg", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
                footer1.AddNamespaceDeclaration("wpi", "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
                footer1.AddNamespaceDeclaration("wne", "http://schemas.microsoft.com/office/word/2006/wordml");
                footer1.AddNamespaceDeclaration("wps", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");

                Paragraph paragraph1 = new Paragraph() { RsidParagraphAddition = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "332566C5", TextId = "77777777" };

                ParagraphProperties paragraphProperties1 = new ParagraphProperties();

                ParagraphMarkRunProperties paragraphMarkRunProperties1 = new ParagraphMarkRunProperties();
                FontSize fontSize1 = new FontSize() { Val = "16" };

                paragraphMarkRunProperties1.Append(fontSize1);

                paragraphProperties1.Append(paragraphMarkRunProperties1);

                paragraph1.Append(paragraphProperties1);

                Table table1 = new Table();

                TableProperties tableProperties1 = new TableProperties();
                TableWidth tableWidth1 = new TableWidth() { Width = "0", Type = TableWidthUnitValues.Auto };
                TableIndentation tableIndentation1 = new TableIndentation() { Width = -318, Type = TableWidthUnitValues.Dxa };
                //  TableLayout tableLayout1 = new TableLayout() { Type = TableLayoutValues.Fixed };

                TableCellMarginDefault tableCellMarginDefault1 = new TableCellMarginDefault();
                TableCellRightMargin tableCellRightMargin1 = new TableCellRightMargin() { Width = 0, Type = TableWidthValues.Dxa };

                tableCellMarginDefault1.Append(tableCellRightMargin1);
                TableLook tableLook1 = new TableLook() { Val = "0000", FirstRow = false, LastRow = false, FirstColumn = false, LastColumn = false, NoHorizontalBand = false, NoVerticalBand = false };

                tableProperties1.Append(tableWidth1);
                tableProperties1.Append(tableIndentation1);
                // tableProperties1.Append(tableLayout1);
                tableProperties1.Append(tableCellMarginDefault1);
                tableProperties1.Append(tableLook1);

                TableGrid tableGrid1 = new TableGrid();
                GridColumn gridColumn1 = new GridColumn() { Width = "568" };
                GridColumn gridColumn2 = new GridColumn() { Width = "8081" };
                GridColumn gridColumn3 = new GridColumn() { Width = "1415" };

                tableGrid1.Append(gridColumn1);
                tableGrid1.Append(gridColumn2);
                tableGrid1.Append(gridColumn3);

                TableRow tableRow1 = new TableRow() { RsidTableRowMarkRevision = "00682DA0", RsidTableRowAddition = "00682DA0", RsidTableRowProperties = "00F76E86", ParagraphId = "08E0D757", TextId = "77777777" };

                TableCell tableCell1 = new TableCell();

                TableCellProperties tableCellProperties1 = new TableCellProperties();
                TableCellWidth tableCellWidth1 = new TableCellWidth() { Width = "568", Type = TableWidthUnitValues.Dxa };
                Shading shading1 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "auto" };
                TableCellVerticalAlignment tableCellVerticalAlignment1 = new TableCellVerticalAlignment() { Val = TableVerticalAlignmentValues.Bottom };

                tableCellProperties1.Append(tableCellWidth1);
                tableCellProperties1.Append(shading1);
                tableCellProperties1.Append(tableCellVerticalAlignment1);

                Paragraph paragraph2 = new Paragraph() { RsidParagraphMarkRevision = "00682DA0", RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "28E68A06", TextId = "77777777" };

                ParagraphProperties paragraphProperties2 = new ParagraphProperties();

                Tabs tabs1 = new Tabs();
                TabStop tabStop1 = new TabStop() { Val = TabStopValues.Center, Position = 4513 };
                TabStop tabStop2 = new TabStop() { Val = TabStopValues.Right, Position = 9026 };

                tabs1.Append(tabStop1);
                tabs1.Append(tabStop2);
                SuppressAutoHyphens suppressAutoHyphens1 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() { After = "0", Line = "100", LineRule = LineSpacingRuleValues.AtLeast };
                Justification justification1 = new Justification() { Val = JustificationValues.Right };

                ParagraphMarkRunProperties paragraphMarkRunProperties2 = new ParagraphMarkRunProperties();
                RunFonts runFonts1 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize2 = new FontSize() { Val = "16" };
                Languages languages1 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties2.Append(runFonts1);
                paragraphMarkRunProperties2.Append(fontSize2);
                paragraphMarkRunProperties2.Append(languages1);

                paragraphProperties2.Append(tabs1);
                paragraphProperties2.Append(suppressAutoHyphens1);
                paragraphProperties2.Append(spacingBetweenLines1);
                paragraphProperties2.Append(justification1);
                paragraphProperties2.Append(paragraphMarkRunProperties2);

                Run run1 = new Run() { RsidRunProperties = "00682DA0" };

                RunProperties runProperties1 = new RunProperties();
                RunFonts runFonts2 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Calibri" };
                Color color1 = new Color() { Val = "F58426" };
                FontSize fontSize3 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript1 = new FontSizeComplexScript() { Val = "18" };
                Languages languages2 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties1.Append(runFonts2);
                runProperties1.Append(color1);
                runProperties1.Append(fontSize3);
                runProperties1.Append(fontSizeComplexScript1);
                runProperties1.Append(languages2);
                FieldChar fieldChar1 = new FieldChar() { FieldCharType = FieldCharValues.Begin };

                run1.Append(runProperties1);
                run1.Append(fieldChar1);

                Run run2 = new Run() { RsidRunProperties = "00682DA0" };

                RunProperties runProperties2 = new RunProperties();
                RunFonts runFonts3 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Calibri" };
                Color color2 = new Color() { Val = "F58426" };
                FontSize fontSize4 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript2 = new FontSizeComplexScript() { Val = "18" };
                Languages languages3 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties2.Append(runFonts3);
                runProperties2.Append(color2);
                runProperties2.Append(fontSize4);
                runProperties2.Append(fontSizeComplexScript2);
                runProperties2.Append(languages3);
                FieldCode fieldCode1 = new FieldCode() { Space = SpaceProcessingModeValues.Preserve };
                fieldCode1.Text = " PAGE ";

                run2.Append(runProperties2);
                run2.Append(fieldCode1);

                Run run3 = new Run() { RsidRunProperties = "00682DA0" };

                RunProperties runProperties3 = new RunProperties();
                RunFonts runFonts4 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Calibri" };
                Color color3 = new Color() { Val = "F58426" };
                FontSize fontSize5 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript3 = new FontSizeComplexScript() { Val = "18" };
                Languages languages4 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties3.Append(runFonts4);
                runProperties3.Append(color3);
                runProperties3.Append(fontSize5);
                runProperties3.Append(fontSizeComplexScript3);
                runProperties3.Append(languages4);
                FieldChar fieldChar2 = new FieldChar() { FieldCharType = FieldCharValues.Separate };

                run3.Append(runProperties3);
                run3.Append(fieldChar2);

                Run run4 = new Run() { RsidRunAddition = "008818E9" };

                RunProperties runProperties4 = new RunProperties();
                RunFonts runFonts5 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Calibri" };
                NoProof noProof1 = new NoProof();
                Color color4 = new Color() { Val = "F58426" };
                FontSize fontSize6 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript4 = new FontSizeComplexScript() { Val = "18" };
                Languages languages5 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties4.Append(runFonts5);
                runProperties4.Append(noProof1);
                runProperties4.Append(color4);
                runProperties4.Append(fontSize6);
                runProperties4.Append(fontSizeComplexScript4);
                runProperties4.Append(languages5);
                Text text1 = new Text();
                text1.Text = "1";

                run4.Append(runProperties4);
                run4.Append(text1);

                Run run5 = new Run() { RsidRunProperties = "00682DA0" };

                RunProperties runProperties5 = new RunProperties();
                RunFonts runFonts6 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Calibri" };
                Color color5 = new Color() { Val = "F58426" };
                FontSize fontSize7 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript5 = new FontSizeComplexScript() { Val = "18" };
                Languages languages6 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties5.Append(runFonts6);
                runProperties5.Append(color5);
                runProperties5.Append(fontSize7);
                runProperties5.Append(fontSizeComplexScript5);
                runProperties5.Append(languages6);
                FieldChar fieldChar3 = new FieldChar() { FieldCharType = FieldCharValues.End };

                run5.Append(runProperties5);
                run5.Append(fieldChar3);

                Run run6 = new Run() { RsidRunProperties = "00682DA0" };

                RunProperties runProperties6 = new RunProperties();
                RunFonts runFonts7 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Verdana", ComplexScript = "Verdana" };
                Color color6 = new Color() { Val = "72CDF4" };
                FontSize fontSize8 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript6 = new FontSizeComplexScript() { Val = "18" };
                Languages languages7 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties6.Append(runFonts7);
                runProperties6.Append(color6);
                runProperties6.Append(fontSize8);
                runProperties6.Append(fontSizeComplexScript6);
                runProperties6.Append(languages7);
                Text text2 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text2.Text = " ";

                run6.Append(runProperties6);
                run6.Append(text2);

                Run run7 = new Run() { RsidRunProperties = "00682DA0" };

                RunProperties runProperties7 = new RunProperties();
                RunFonts runFonts8 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Calibri" };
                Color color7 = new Color() { Val = "808080" };
                FontSize fontSize9 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript7 = new FontSizeComplexScript() { Val = "18" };
                Languages languages8 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties7.Append(runFonts8);
                runProperties7.Append(color7);
                runProperties7.Append(fontSize9);
                runProperties7.Append(fontSizeComplexScript7);
                runProperties7.Append(languages8);
                Text text3 = new Text();
                text3.Text = "|";

                run7.Append(runProperties7);
                run7.Append(text3);

                Run run8 = new Run() { RsidRunProperties = "00682DA0" };

                RunProperties runProperties8 = new RunProperties();
                RunFonts runFonts9 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Calibri" };
                Color color8 = new Color() { Val = "72CDF4" };
                FontSize fontSize10 = new FontSize() { Val = "18" };
                FontSizeComplexScript fontSizeComplexScript8 = new FontSizeComplexScript() { Val = "18" };
                Languages languages9 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties8.Append(runFonts9);
                runProperties8.Append(color8);
                runProperties8.Append(fontSize10);
                runProperties8.Append(fontSizeComplexScript8);
                runProperties8.Append(languages9);
                Text text4 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text4.Text = " ";

                run8.Append(runProperties8);
                run8.Append(text4);

                paragraph2.Append(paragraphProperties2);
                paragraph2.Append(run1);
                paragraph2.Append(run2);
                paragraph2.Append(run3);
                paragraph2.Append(run4);
                paragraph2.Append(run5);
                paragraph2.Append(run6);
                paragraph2.Append(run7);
                paragraph2.Append(run8);

                tableCell1.Append(tableCellProperties1);
                tableCell1.Append(paragraph2);

                TableCell tableCell2 = new TableCell();

                TableCellProperties tableCellProperties2 = new TableCellProperties();
                TableCellWidth tableCellWidth2 = new TableCellWidth() { Width = "8081", Type = TableWidthUnitValues.Dxa };
                Shading shading2 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "auto" };
                TableCellVerticalAlignment tableCellVerticalAlignment2 = new TableCellVerticalAlignment() { Val = TableVerticalAlignmentValues.Bottom };

                tableCellProperties2.Append(tableCellWidth2);
                tableCellProperties2.Append(shading2);
                tableCellProperties2.Append(tableCellVerticalAlignment2);

                Paragraph paragraph3 = new Paragraph() { RsidParagraphMarkRevision = "00682DA0", RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "2F49C805", TextId = "74311658" };

                ParagraphProperties paragraphProperties3 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens2 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines2 = new SpacingBetweenLines() { After = "40", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties3 = new ParagraphMarkRunProperties();
                RunFonts runFonts10 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color9 = new Color() { Val = "FF0000" };
                FontSize fontSize11 = new FontSize() { Val = "16" };
                Languages languages10 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties3.Append(runFonts10);
                paragraphMarkRunProperties3.Append(color9);
                paragraphMarkRunProperties3.Append(fontSize11);
                paragraphMarkRunProperties3.Append(languages10);

                paragraphProperties3.Append(suppressAutoHyphens2);
                paragraphProperties3.Append(spacingBetweenLines2);
                paragraphProperties3.Append(paragraphMarkRunProperties3);

                Run run9 = new Run() { RsidRunProperties = "00682DA0" };

                RunProperties runProperties9 = new RunProperties();
                RunFonts runFonts11 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize12 = new FontSize() { Val = "16" };
                Languages languages11 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties9.Append(runFonts11);
                runProperties9.Append(fontSize12);
                runProperties9.Append(languages11);
                Text text5 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text5.Text = "Confidential Statement of Advice Prepared for :";

                run9.Append(runProperties9);
                run9.Append(text5);

                Run run10 = new Run() { RsidRunProperties = "00682DA0" };

                RunProperties runProperties10 = new RunProperties();
                RunFonts runFonts12 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color10 = new Color() { Val = "FF0000" };
                FontSize fontSize13 = new FontSize() { Val = "16" };
                Languages languages12 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties10.Append(runFonts12);
                runProperties10.Append(color10);
                runProperties10.Append(fontSize13);
                runProperties10.Append(languages12);
                Text text6 = new Text();
                text6.Text = "[Client/Partner Name]";

                run10.Append(runProperties10);
                run10.Append(text6);

                paragraph3.Append(paragraphProperties3);
                paragraph3.Append(run9);
                paragraph3.Append(run10);

                Paragraph paragraph4 = new Paragraph() { RsidParagraphMarkRevision = "00682DA0", RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "3C8B385D", TextId = "77777777" };

                ParagraphProperties paragraphProperties4 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens3 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines3 = new SpacingBetweenLines() { After = "40", Line = "240", LineRule = LineSpacingRuleValues.Auto };

                ParagraphMarkRunProperties paragraphMarkRunProperties4 = new ParagraphMarkRunProperties();
                RunFonts runFonts13 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize14 = new FontSize() { Val = "14" };
                Languages languages13 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties4.Append(runFonts13);
                paragraphMarkRunProperties4.Append(fontSize14);
                paragraphMarkRunProperties4.Append(languages13);

                paragraphProperties4.Append(suppressAutoHyphens3);
                paragraphProperties4.Append(spacingBetweenLines3);
                paragraphProperties4.Append(paragraphMarkRunProperties4);

                Run run11 = new Run() { RsidRunProperties = "00682DA0" };

                RunProperties runProperties11 = new RunProperties();
                RunFonts runFonts14 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize15 = new FontSize() { Val = "16" };
                Languages languages14 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties11.Append(runFonts14);
                runProperties11.Append(fontSize15);
                runProperties11.Append(languages14);
                Text text7 = new Text() { Space = SpaceProcessingModeValues.Preserve };
                text7.Text = "Provided by: ";

                run11.Append(runProperties11);
                run11.Append(text7);

                Run run12 = new Run() { RsidRunProperties = "00682DA0" };

                RunProperties runProperties12 = new RunProperties();
                RunFonts runFonts15 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                Color color11 = new Color() { Val = "FF0000" };
                FontSize fontSize16 = new FontSize() { Val = "16" };
                Languages languages15 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties12.Append(runFonts15);
                runProperties12.Append(color11);
                runProperties12.Append(fontSize16);
                runProperties12.Append(languages15);
                Text text8 = new Text();
                text8.Text = "[Practice]";

                run12.Append(runProperties12);
                run12.Append(text8);

                Run run13 = new Run() { RsidRunProperties = "00682DA0" };

                RunProperties runProperties13 = new RunProperties();
                RunFonts runFonts16 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize17 = new FontSize() { Val = "16" };
                Languages languages16 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                runProperties13.Append(runFonts16);
                runProperties13.Append(fontSize17);
                runProperties13.Append(languages16);
                Text text9 = new Text();
                text9.Text = ", a Corporate Authorised Representative of RI Advice Group Pty Ltd";

                run13.Append(runProperties13);
                run13.Append(text9);

                paragraph4.Append(paragraphProperties4);
                paragraph4.Append(run11);
                paragraph4.Append(run12);
                paragraph4.Append(run13);

                tableCell2.Append(tableCellProperties2);
                tableCell2.Append(paragraph3);
                tableCell2.Append(paragraph4);

                TableCell tableCell3 = new TableCell();

                TableCellProperties tableCellProperties3 = new TableCellProperties();
                TableCellWidth tableCellWidth3 = new TableCellWidth() { Width = "1415", Type = TableWidthUnitValues.Dxa };
                Shading shading3 = new Shading() { Val = ShadingPatternValues.Clear, Color = "auto", Fill = "auto" };
                TableCellVerticalAlignment tableCellVerticalAlignment3 = new TableCellVerticalAlignment() { Val = TableVerticalAlignmentValues.Bottom };

                tableCellProperties3.Append(tableCellWidth3);
                tableCellProperties3.Append(shading3);
                tableCellProperties3.Append(tableCellVerticalAlignment3);

                Paragraph paragraph5 = new Paragraph() { RsidParagraphMarkRevision = "00682DA0", RsidParagraphAddition = "00682DA0", RsidParagraphProperties = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "43FE2BBD", TextId = "77777777" };

                ParagraphProperties paragraphProperties5 = new ParagraphProperties();

                Tabs tabs2 = new Tabs();
                TabStop tabStop3 = new TabStop() { Val = TabStopValues.Left, Position = 7080 };

                tabs2.Append(tabStop3);
                SuppressAutoHyphens suppressAutoHyphens4 = new SuppressAutoHyphens();
                SnapToGrid snapToGrid1 = new SnapToGrid() { Val = false };
                SpacingBetweenLines spacingBetweenLines4 = new SpacingBetweenLines() { After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification2 = new Justification() { Val = JustificationValues.Right };

                ParagraphMarkRunProperties paragraphMarkRunProperties5 = new ParagraphMarkRunProperties();
                RunFonts runFonts17 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize18 = new FontSize() { Val = "14" };
                Languages languages17 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties5.Append(runFonts17);
                paragraphMarkRunProperties5.Append(fontSize18);
                paragraphMarkRunProperties5.Append(languages17);

                paragraphProperties5.Append(tabs2);
                paragraphProperties5.Append(suppressAutoHyphens4);
                paragraphProperties5.Append(snapToGrid1);
                paragraphProperties5.Append(spacingBetweenLines4);
                paragraphProperties5.Append(justification2);
                paragraphProperties5.Append(paragraphMarkRunProperties5);

                paragraph5.Append(paragraphProperties5);

                tableCell3.Append(tableCellProperties3);
                tableCell3.Append(paragraph5);

                tableRow1.Append(tableCell1);
                tableRow1.Append(tableCell2);
                tableRow1.Append(tableCell3);

                table1.Append(tableProperties1);
                table1.Append(tableGrid1);
                table1.Append(tableRow1);

                Paragraph paragraph6 = new Paragraph() { RsidParagraphAddition = "00682DA0", RsidRunAdditionDefault = "00682DA0", ParagraphId = "08103970", TextId = "77777777" };

                ParagraphProperties paragraphProperties6 = new ParagraphProperties();
                ParagraphStyleId paragraphStyleId1 = new ParagraphStyleId() { Val = "Footer" };

                Tabs tabs3 = new Tabs();
                TabStop tabStop4 = new TabStop() { Val = TabStopValues.Left, Position = 3433 };

                tabs3.Append(tabStop4);

                paragraphProperties6.Append(paragraphStyleId1);
                paragraphProperties6.Append(tabs3);

                Run run14 = new Run();

                RunProperties runProperties14 = new RunProperties();
                FontSize fontSize19 = new FontSize() { Val = "2" };
                FontSizeComplexScript fontSizeComplexScript9 = new FontSizeComplexScript() { Val = "2" };

                runProperties14.Append(fontSize19);
                runProperties14.Append(fontSizeComplexScript9);
                TabChar tabChar1 = new TabChar();

                run14.Append(runProperties14);
                run14.Append(tabChar1);

                paragraph6.Append(paragraphProperties6);
                paragraph6.Append(run14);

                footer1.Append(paragraph1);
                footer1.Append(table1);
                footer1.Append(paragraph6);

                part.Footer = footer1;
            
        }

        private void InsertImage(MainDocumentPart mainPart,TableCell body, string fileName)
        {
            ImagePart imagePart = mainPart.AddImagePart(ImagePartType.Jpeg);
            using (FileStream stream = new FileStream(fileName, FileMode.Open))
            {
                imagePart.FeedData(stream);
            }
            AddImageToBody(body,mainPart.GetIdOfPart(imagePart),fileName);

             
        }

        private void AddImageToBody(TableCell body,string relationshipId,string fileName)
        {
            long iWidth = 0;
            long iHeight = 0;
            using (System.Drawing.Bitmap bmp = new System.Drawing.Bitmap(fileName))
            {
                iWidth = (long) bmp.Width * (long)((float) 914400 / bmp.HorizontalResolution);
                iHeight = (long)bmp.Height * (long)((float)914400 / bmp.VerticalResolution);
            }
          
            // Define the reference of the image.
            var element =
                     new Drawing(
                         new DW.Inline(
                             new DW.Extent() { Cx = iWidth, Cy = iHeight },
                             new DW.EffectExtent()
                             {
                                 LeftEdge = 0L,
                                 TopEdge = 0L,
                                 RightEdge = 0L,
                                 BottomEdge = 0L
                             },
                             new DW.DocProperties()
                             {
                                 Id = (UInt32Value)1U,
                                 Name = "Picture 1"
                             },
                             new DW.NonVisualGraphicFrameDrawingProperties(
                                 new A.GraphicFrameLocks() { NoChangeAspect = true }),
                             new A.Graphic(
                                 new A.GraphicData(
                                     new PIC.Picture(
                                         new PIC.NonVisualPictureProperties(
                                             new PIC.NonVisualDrawingProperties()
                                             {
                                                 Id = (UInt32Value)0U,
                                                 Name = "New Bitmap Image.jpg"
                                             },
                                             new PIC.NonVisualPictureDrawingProperties()),
                                         new PIC.BlipFill(
                                             new A.Blip(
                                                 new A.BlipExtensionList(
                                                     new A.BlipExtension()
                                                     {
                                                         Uri =
                                                            "{28A0092B-C50C-407E-A947-70E740481C1C}"
                                                     })
                                             )
                                             {
                                                 Embed = relationshipId,
                                                 CompressionState =
                                                 A.BlipCompressionValues.Print
                                             },
                                             new A.Stretch(
                                                 new A.FillRectangle())),
                                         new PIC.ShapeProperties(
                                             new A.Transform2D(
                                                 new A.Offset() { X = 0L, Y = 0L },
                                               new A.Extents() { Cx = iWidth , Cy = iHeight }),
                                             new A.PresetGeometry(
                                                 new A.AdjustValueList()
                                             )
                                             { Preset = A.ShapeTypeValues.Rectangle }))
                                 )
                                 { Uri = "http://schemas.openxmlformats.org/drawingml/2006/picture" })
                         )
                         {
                             DistanceFromTop = (UInt32Value)0U,
                             DistanceFromBottom = (UInt32Value)0U,
                             DistanceFromLeft = (UInt32Value)0U,
                             DistanceFromRight = (UInt32Value)0U,
                             EditId = "50D07946"
                         });

            // Append the reference to body, the element should be in a Run.
            body.AppendChild(new Paragraph(new Run(element)));

        }
        public void AddBasicDetails(Body body,BasicDetails details, Color orange)
        {
            Color red = new Color() { Val = "FF0000" };

            if (details != null)
            {

                Paragraph s1 = body.AppendChild(new Paragraph());
                Run r1 = s1.AppendChild(new Run());
                RunProperties runProperties1 = r1.AppendChild(new RunProperties());
                Color black = new Color() { Val = "000000" };
                runProperties1.AppendChild(black);
                r1.AppendChild(new Text("Our advice is based on the information you provided to us and our understanding of your situation. Please review this information carefully to ensure the details are accurate."));



                //New Table

                Table table = body.AppendChild(new Table());
                TableProperties tableProp = new TableProperties();
                TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                tableProp.Append(tableStyle, tableWidth);
                table.AppendChild(tableProp);


                ////Header
                TableRow header = new TableRow();
                TableCell h1 = new TableCell();

                TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
               Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                hpp.AppendChild((Justification)centerJustify.CloneNode(true));

                TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                hcp.Append(hcm1, hs1, hcb);
                hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                h1.Append(hcp);

                h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                h1.Append(new Paragraph(new Run(new Text(""))));

                TableCell h2 = new TableCell();
                h2.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                h2.Append((TableCellProperties)hcp1.CloneNode(true));
                h2.Append(new Paragraph(new Run(new RunProperties(new Bold()) , new Text(details.ClientName))));
                if (details.MaritalStatus != "S")
                {
                    TableCell h3 = new TableCell();
                    h3.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                    h3.Append((TableCellProperties)hcp1.CloneNode(true));
                    h3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(details.PartnerName))));
                    header.Append(h1, h2, h3);
                }
                else
                {
                    header.Append(h1, h2);
                }
                
                table.Append(header);
                ////Body

                //TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                pp.AppendChild((Justification)centerJustify.CloneNode(true));
                tcp.Append(tcbL, tcm);
                tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                //Given Name
                if (details.ClientName != "" || details.PartnerName != "")
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell((TableCellProperties)tcp.CloneNode(true), (ParagraphProperties)pp1.CloneNode(true) , new Paragraph(new Run(new RunProperties(new Bold()), new Text("Given Name"))));
                    TableCell tc2 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(details.ClientName))));
                    if (details.MaritalStatus != "S")
                    {
                        TableCell tc3 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(details.PartnerName))));
                        tr.Append(tc1, tc2, tc3);
                    }
                    else
                    {
                        tr.Append(tc1, tc2);
                    }
                    table.AppendChild(tr);
                }
                //Family Name
                if (details.FamilyName != "")
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell((TableCellProperties)tcp.CloneNode(true), (ParagraphProperties)pp1.CloneNode(true), new Paragraph(new Run(new RunProperties(new Bold()), new Text("Family Name"))));
                    TableCell tc2 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(details.FamilyName))));
                    if (details.MaritalStatus != "S")
                    {
                        TableCell tc3 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(details.FamilyName))));
                        tr.Append(tc1, tc2, tc3);
                    }
                    else
                    {
                        tr.Append(tc1, tc2);
                    }
                    table.AppendChild(tr);
                }
                //DOB
                if (details.FamilyName != "")
                {

                    var today = DateTime.Today;
                    var age = today.Year - details.ClientDob.Year;
                    // Go back to the year the person was born in case of a leap year
                    if (details.ClientDob > today.AddYears(-age)) age--;

                    DateTime partnerDOB = details.PartnerDob ?? DateTime.Now;
                    var partnerAge = 0;
                    if (details.PartnerDob.HasValue)
                    {
                        //DateTime partnerDOB = details.PartnerDob ?? DateTime.Now ;
                        partnerAge = today.Year - partnerDOB.Year;
                        // Go back to the year the person was born in case of a leap year
                        if (partnerDOB > today.AddYears(-partnerAge)) partnerAge--;
                    }

                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell((TableCellProperties)tcp.CloneNode(true), (ParagraphProperties)pp1.CloneNode(true), new Paragraph(new Run(new RunProperties(new Bold()), new Text("Date of birth"))));
                    TableCell tc2 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(details.ClientDob.ToShortDateString() + " (" + age + ")"))));
                    if (details.MaritalStatus != "S")
                    {
                        TableCell tc3 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(!details.PartnerDob.HasValue ? "" : partnerDOB.ToShortDateString() + " (" + partnerAge + ")"))));
                        tr.Append(tc1, tc2, tc3);
                    }
                    else
                    {
                        tr.Append(tc1, tc2);
                    }
                    table.AppendChild(tr);
                }
                //Marital Status
                if (details.MaritalStatus != "")
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell((TableCellProperties)tcp.CloneNode(true), (ParagraphProperties)pp1.CloneNode(true), new Paragraph(new Run(new RunProperties(new Bold()), new Text("Marital Status"))));
                    TableCell tc2 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(details.MaritalStatus == "S" ? "Single" : "Married"))));
                    if (details.MaritalStatus != "S")
                    {
                        TableCell tc3 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text("Married / De Facto"))));
                        tr.Append(tc1, tc2, tc3);
                    }
                    else
                    {
                        tr.Append(tc1, tc2);
                    }
                    table.AppendChild(tr);
                }
                //Occupation
                if (details.ClientName != "")
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell((TableCellProperties)tcp.CloneNode(true), (ParagraphProperties)pp1.CloneNode(true), new Paragraph(new Run(new RunProperties(new Bold()), new Text("Occupation"))));
                    TableCell tc2 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(""))));
                    if (details.MaritalStatus != "S")
                    {
                        TableCell tc3 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(""))));
                        tr.Append(tc1, tc2, tc3);
                    }
                    else
                    {
                        tr.Append(tc1, tc2);
                    }
                    table.AppendChild(tr);
                }
                //Employment Status
                if (!(details.ClientEmpStatus == "Retired" && details.PartnerEmpStatus == "Retired"))
                {
                    if (details.ClientEmpStatus != "" || details.PartnerEmpStatus != "")
                    {
                        TableRow tr = new TableRow();
                        TableCell tc1 = new TableCell((TableCellProperties)tcp.CloneNode(true), (ParagraphProperties)pp1.CloneNode(true), new Paragraph(new Run(new RunProperties(new Bold()), new Text("Employment Status"))));
                        TableCell tc2 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(details.ClientEmpStatus))));
                        if (details.MaritalStatus != "S")
                        {
                            TableCell tc3 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(details.PartnerEmpStatus))));
                            tr.Append(tc1, tc2, tc3);
                        }
                        else
                        {
                            tr.Append(tc1, tc2);
                        }
                        table.AppendChild(tr);
                    }
                }
                //Health
                if (details.ClientName != "")
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell((TableCellProperties)tcp.CloneNode(true), (ParagraphProperties)pp1.CloneNode(true), new Paragraph(new Run(new RunProperties(new Bold()), new Text("Health"))));
                    TableCell tc2 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(""))));
                    if (details.MaritalStatus != "S")
                    {
                        TableCell tc3 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(""))));
                        tr.Append(tc1, tc2, tc3);
                    }
                    else
                    {
                        tr.Append(tc1, tc2);
                    }
                    table.AppendChild(tr);
                }
                //Smoker
                if (details.ClientName != "")
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell((TableCellProperties)tcp.CloneNode(true), (ParagraphProperties)pp1.CloneNode(true), new Paragraph(new Run(new RunProperties(new Bold()), new Text("Smoker"))));
                    TableCell tc2 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(""))));
                    if (details.MaritalStatus != "S")
                    {
                        TableCell tc3 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(""))));
                        tr.Append(tc1, tc2, tc3);
                    }
                    else
                    {
                        tr.Append(tc1, tc2);
                    }
                    table.AppendChild(tr);
                }
              

            }

            Paragraph paragraph14 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

            ParagraphProperties paragraphProperties14 = new ParagraphProperties();
            SuppressAutoHyphens suppressAutoHyphens14 = new SuppressAutoHyphens();
            SpacingBetweenLines spacingBetweenLines14 = new SpacingBetweenLines() { After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };
            Justification justification4 = new Justification() { Val = JustificationValues.Both };

            ParagraphMarkRunProperties paragraphMarkRunProperties14 = new ParagraphMarkRunProperties();
            RunFonts runFonts36 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
            FontSize fontSize35 = new FontSize() { Val = "18" };
            Languages languages33 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

            paragraphMarkRunProperties14.Append(runFonts36);
            paragraphMarkRunProperties14.Append(fontSize35);
            paragraphMarkRunProperties14.Append(languages33);

            paragraphProperties14.Append(suppressAutoHyphens14);
            paragraphProperties14.Append(spacingBetweenLines14);
            paragraphProperties14.Append(justification4);
            paragraphProperties14.Append(paragraphMarkRunProperties14);
            body.AppendChild(paragraph14);
 

            if (details != null)
            {

                Paragraph s1 = body.AppendChild(new Paragraph());
                Run r1 = s1.AppendChild(new Run());
                RunProperties runProperties1 = r1.AppendChild(new RunProperties(new Bold(),new FontSize { Val = "20" }));
                Color black = new Color() { Val = "000000" };
                runProperties1.AppendChild(black);
                r1.AppendChild(new Text("Children and dependants"));



                //New Table

                Table table = body.AppendChild(new Table());
                TableProperties tableProp = new TableProperties();
                TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                tableProp.Append(tableStyle, tableWidth);
                table.AppendChild(tableProp);


                ////Header
                TableRow header = new TableRow();
                TableCell h1 = new TableCell();

                TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                ParagraphProperties hppLeft = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppCenter = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppRight = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                hppCenter.AppendChild((Justification)centerJustify.CloneNode(true));

                Justification rightJustify = new Justification() { Val = JustificationValues.Right };
                hppRight.AppendChild((Justification)rightJustify.CloneNode(true));

                TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                hcp.Append(hcm1, hs1, hcb);
                h1.Append(hcp);

                h1.AppendChild((ParagraphProperties)hppLeft.CloneNode(true));
                h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Name"))));

                TableCell h2 = new TableCell();
                h2.AppendChild((ParagraphProperties)hppCenter.CloneNode(true));
                h2.Append((TableCellProperties)hcp.CloneNode(true));
                h2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Age"))));

                TableCell h3 = new TableCell();
                h3.AppendChild((ParagraphProperties)hppRight.CloneNode(true));
                h3.Append((TableCellProperties)hcp.CloneNode(true));
                h3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Financial dependant"))));
                header.Append(h1, h2, h3);

                table.Append(header);

                TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };
                ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });

              
                tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));


                TableRow tr = new TableRow();
                TableCell tc1 = new TableCell();

                tc1.Append((TableCellProperties)tcpN.CloneNode(true));
                tc1.AppendChild((ParagraphProperties)pp.CloneNode(true));
                tc1.Append(new Paragraph(new Run(new RunProperties(), new Text(""))));

                TableCell tc2 = new TableCell();
                tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                tc2.Append((TableCellProperties)tcpN.CloneNode(true));
                tc2.Append(new Paragraph(new Run(new Text(""))));


        
                TableCell tc3 = new TableCell();
                tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                tc3.Append((TableCellProperties)tcpN.CloneNode(true));
                tc3.Append(new Paragraph(new Run(new Text(""))));

                tr.Append(tc1, tc2, tc3);

                table.AppendChild(tr);

            }


            body.AppendChild((Paragraph)paragraph14.CloneNode(true));
            //body.AppendChild(new Paragraph(new Run(new Break())));
            //Run linebreak1 = new Run(new Break());
            //Paragraph paragraph1 = new Paragraph();
            //paragraph1.Append(new OpenXmlElement[] { linebreak1 });
            //body.Append(paragraph1);
        }
        public void AddIncomeAndExpenses(Body body, CashFlow[] income,CashFlow[] expenses, LifestyleAsset[] lifestyleAssets ,Color orange)
        {
            Color red = new Color() { Val = "FF0000" };

            Paragraph paragraph14 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

            ParagraphProperties paragraphProperties14 = new ParagraphProperties();
            SuppressAutoHyphens suppressAutoHyphens14 = new SuppressAutoHyphens();
            SpacingBetweenLines spacingBetweenLines14 = new SpacingBetweenLines() { After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };
            Justification justification4 = new Justification() { Val = JustificationValues.Both };

            ParagraphMarkRunProperties paragraphMarkRunProperties14 = new ParagraphMarkRunProperties();
            RunFonts runFonts36 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
            FontSize fontSize35 = new FontSize() { Val = "18" };
            Languages languages33 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

            paragraphMarkRunProperties14.Append(runFonts36);
            paragraphMarkRunProperties14.Append(fontSize35);
            paragraphMarkRunProperties14.Append(languages33);

            paragraphProperties14.Append(suppressAutoHyphens14);
            paragraphProperties14.Append(spacingBetweenLines14);
            paragraphProperties14.Append(justification4);
            paragraphProperties14.Append(paragraphMarkRunProperties14);
          

            if (income != null || expenses != null)
            {
               
                Paragraph s1 = body.AppendChild(new Paragraph());
                Run r1 = s1.AppendChild(new Run());
                RunProperties runProperties1 = r1.AppendChild(new RunProperties(new Bold(), new FontSize { Val = "20" }));
                Color black = new Color() { Val = "000000" };
                runProperties1.AppendChild(black);
                r1.AppendChild(new Text("Your income and expenses"));
            }
            if (income != null)
                {

                    //New Table

                Table table = body.AppendChild(new Table());
                TableProperties tableProp = new TableProperties();
                TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                tableProp.Append(tableStyle, tableWidth);
                table.AppendChild(tableProp);


                ////Header
                TableRow header = new TableRow();
                TableCell h1 = new TableCell();

                TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                ParagraphProperties hppLeft = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppCenter = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppRight = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                hppCenter.AppendChild((Justification)centerJustify.CloneNode(true));

                Justification rightJustify = new Justification() { Val = JustificationValues.Right };
                hppRight.AppendChild((Justification)rightJustify.CloneNode(true));

                TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                hcp.Append(hcm1, hs1, hcb);
                //hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                h1.Append(hcp);

                h1.AppendChild((ParagraphProperties)hppLeft.CloneNode(true));
                h1.Append(new Paragraph(new Run(new RunProperties(new Bold()),new Text("Income"))));

                TableCell h2 = new TableCell();
                h2.AppendChild((ParagraphProperties)hppCenter.CloneNode(true));
                h2.Append((TableCellProperties)hcp.CloneNode(true));
                h2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Owner"))));

                TableCell h3 = new TableCell();
                h3.AppendChild((ParagraphProperties)hppRight.CloneNode(true));
                h3.Append((TableCellProperties)hcp.CloneNode(true));
                h3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Annual Amount ($)"))));
                header.Append(h1, h2, h3);

                table.Append(header);
                //Body
                TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp2 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });

                pp2.AppendChild((Justification)rightJustify.CloneNode(true));
                pp.AppendChild((Justification)centerJustify.CloneNode(true));
                tcp.Append(tcbL, tcm);
                tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

             
                foreach (CashFlow inc in income) 
                {

                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)centerJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    tc1.Append(new Paragraph(new Run(new RunProperties(), new Text(inc.Cfname))));

                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new Text(inc.Owner))));


                    tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                    tc3.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}",inc.Value)))));

                    tr.Append(tc1, tc2, tc3);

                    table.AppendChild(tr);
                }

                if(income != null)
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)centerJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total"))));

                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new Text(""))));


                    tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                    tc3.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(String.Format("{0:n0}", income.Sum(item => item.Value))))));

                    tr.Append(tc1, tc2, tc3);

                    table.AppendChild(tr);
                }
            }
            if (expenses != null)
            {
                //Run linebreak0 = new Run(new Break());
                //Paragraph paragraph0 = new Paragraph();
                //paragraph0.Append(new OpenXmlElement[] { linebreak0 });
                //body.Append(paragraph0);

                Table table = body.AppendChild(new Table());
                TableProperties tableProp = new TableProperties();
                TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                tableProp.Append(tableStyle, tableWidth);
                table.AppendChild(tableProp);


                ////Header
                TableRow header = new TableRow();
                TableCell h1 = new TableCell();

                TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                ParagraphProperties hppLeft = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppCenter = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppRight = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                hppCenter.AppendChild((Justification)centerJustify.CloneNode(true));

                Justification rightJustify = new Justification() { Val = JustificationValues.Right };
                hppRight.AppendChild((Justification)rightJustify.CloneNode(true));

                TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                hcp.Append(hcm1, hs1, hcb);
                //hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                h1.Append(hcp);

                h1.AppendChild((ParagraphProperties)hppLeft.CloneNode(true));
                h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Expenses"))));

                TableCell h2 = new TableCell();
                h2.AppendChild((ParagraphProperties)hppCenter.CloneNode(true));
                h2.Append((TableCellProperties)hcp.CloneNode(true));
                h2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Owner"))));

                TableCell h3 = new TableCell();
                h3.AppendChild((ParagraphProperties)hppRight.CloneNode(true));
                h3.Append((TableCellProperties)hcp.CloneNode(true));
                h3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Annual Amount ($)"))));
                header.Append(h1, h2, h3);

                table.Append(header);
                //Body
                TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp2 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });

                pp2.AppendChild((Justification)rightJustify.CloneNode(true));
                pp.AppendChild((Justification)centerJustify.CloneNode(true));
                tcp.Append(tcbL, tcm);
                tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));


                foreach (CashFlow exp in expenses)
                {

                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)centerJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    tc1.Append(new Paragraph(new Run(new RunProperties(), new Text(exp.Cfname))));

                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new Text(exp.Owner))));


                    tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                    tc3.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", exp.Value)))));

                    tr.Append(tc1, tc2, tc3);

                    table.AppendChild(tr);
                }

                if (expenses != null)
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)centerJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total"))));

                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new Text(""))));


                    tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                    tc3.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(String.Format("{0:n0}", expenses.Sum(item => item.Value))))));

                    tr.Append(tc1, tc2, tc3);

                    table.AppendChild(tr);
                }
            }
            if (lifestyleAssets != null)
            {

                body.AppendChild(paragraph14);

                Paragraph s1 = body.AppendChild(new Paragraph());
                Run r1 = s1.AppendChild(new Run());
                RunProperties runProperties1 = r1.AppendChild(new RunProperties(new Bold(),new FontSize { Val = "20"}));
                Color black = new Color() { Val = "000000" };
                runProperties1.AppendChild(black);
                r1.AppendChild(new Text("Your personal assets"));

              

                Table table = body.AppendChild(new Table());
                TableProperties tableProp = new TableProperties();
                TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                tableProp.Append(tableStyle, tableWidth);
                table.AppendChild(tableProp);


                ////Header
                TableRow header = new TableRow();
                TableCell h1 = new TableCell();

                TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                ParagraphProperties hppLeft = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppCenter = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppRight = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                hppCenter.AppendChild((Justification)centerJustify.CloneNode(true));

                Justification rightJustify = new Justification() { Val = JustificationValues.Right };
                hppRight.AppendChild((Justification)rightJustify.CloneNode(true));

                TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                hcp.Append(hcm1, hs1, hcb);
                //hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                h1.Append(hcp);

                h1.AppendChild((ParagraphProperties)hppLeft.CloneNode(true));
                h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Description"))));

                TableCell h2 = new TableCell();
                h2.AppendChild((ParagraphProperties)hppCenter.CloneNode(true));
                h2.Append((TableCellProperties)hcp.CloneNode(true));
                h2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Owner"))));

                TableCell h3 = new TableCell();
                h3.AppendChild((ParagraphProperties)hppRight.CloneNode(true));
                h3.Append((TableCellProperties)hcp.CloneNode(true));
                h3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Amount ($)"))));
                header.Append(h1, h2, h3);

                table.Append(header);
                //Body
                TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp2 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });

                pp2.AppendChild((Justification)rightJustify.CloneNode(true));
                pp.AppendChild((Justification)centerJustify.CloneNode(true));
                tcp.Append(tcbL, tcm);
                tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));


                foreach (LifestyleAsset lasset in lifestyleAssets)
                {

                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)centerJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    tc1.Append(new Paragraph(new Run(new RunProperties(), new Text(lasset.Name))));

                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new Text(lasset.Owner))));


                    tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                    tc3.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", lasset.Value)))));

                    tr.Append(tc1, tc2, tc3);

                    table.AppendChild(tr);
                }

                if (lifestyleAssets != null)
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)centerJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total"))));

                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new Text(""))));


                    tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                    tc3.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(String.Format("{0:n0}", lifestyleAssets.Sum(item => item.Value))))));

                    tr.Append(tc1, tc2, tc3);

                    table.AppendChild(tr);
                }
            }

          
            body.AppendChild((Paragraph)paragraph14.CloneNode(true));

        }
        public void AddInvestmentPortfolio(Body body, OriginalCF[] currentInvestments, BasicDetails docDet, Color orange)
        {
            Color red = new Color() { Val = "FF0000" };

            if (currentInvestments.Length != 0)
            {

                Paragraph s1 = body.AppendChild(new Paragraph());
                Run r1 = s1.AppendChild(new Run());
                RunProperties runProperties1 = r1.AppendChild(new RunProperties(new Bold(),new FontSize { Val = "20"}));
                Color black = new Color() { Val = "000000" };
                runProperties1.AppendChild(black);
                r1.AppendChild(new Text("Your investment portfolio assets"));
            }

            var clientFund = currentInvestments.Where(c => c.Owner == "Client").ToArray();
            var partnerFund = currentInvestments.Where(c => c.Owner == "Partner").ToArray();
            var jointFund = currentInvestments.Where(c => c.Owner == "Joint").ToArray();

            if (clientFund != null && clientFund.Length > 0)
            {

                //New Table

                Table table = body.AppendChild(new Table());
                TableProperties tableProp = new TableProperties();
                TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                tableProp.Append(tableStyle, tableWidth);
                table.AppendChild(tableProp);


                ////Header
                TableRow header = new TableRow();
                TableCell h1 = new TableCell();

                TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                ParagraphProperties hppLeft = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppCenter = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppRight = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                hppCenter.AppendChild((Justification)centerJustify.CloneNode(true));

                Justification rightJustify = new Justification() { Val = JustificationValues.Right };
                hppRight.AppendChild((Justification)rightJustify.CloneNode(true));

                TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                hcp.Append(hcm1, hs1, hcb);
                //hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                h1.Append(hcp);

                h1.AppendChild((ParagraphProperties)hppLeft.CloneNode(true));
                h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("" + docDet.ClientName + " Investments"))));

                TableCell h2 = new TableCell();
                h2.AppendChild((ParagraphProperties)hppRight.CloneNode(true));
                h2.Append((TableCellProperties)hcp.CloneNode(true));
                h2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Current Balance ($)"))));

                header.Append(h1, h2);

                table.Append(header);
                //Body
                TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp2 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });

                pp2.AppendChild((Justification)rightJustify.CloneNode(true));
                pp.AppendChild((Justification)centerJustify.CloneNode(true));
                tcp.Append(tcbL, tcm);
                tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                decimal total = 0;
                foreach (OriginalCF cf in clientFund)
                {

                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tc1.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(cf.Product))));


                    //tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                    tc2.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new Text(""))));
                    tr.Append(tc1, tc2);
                    table.AppendChild(tr);

                    foreach (CurrentClientFundsViewModel data in cf.data)
                    {

                        TableRow tr1 = new TableRow();
                        TableCell t1 = new TableCell();

                      
                        t1.Append((TableCellProperties)tcp.CloneNode(true));
                        t1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        t1.Append(new Paragraph(new Run(new RunProperties(), new Text(data.FundName))));


                        TableCell t2 = new TableCell();
                        t2.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                        t2.Append((TableCellProperties)tcpN.CloneNode(true));
                        t2.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", data.Value)))));
                        tr1.Append(t1, t2);
                        table.AppendChild(tr1);
                    }
                    if(cf.data.Length != 0)
                    {
                        TableRow tr1 = new TableRow();
                        TableCell t1 = new TableCell();

                        tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                        t1.Append((TableCellProperties)tcp1.CloneNode(true));
                        t1.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                        t1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Sub Total"))));

                        TableCell t2 = new TableCell();
                        t2.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                        t2.Append((TableCellProperties)tcpN.CloneNode(true));
                        t2.Append(new Paragraph(new Run(new RunProperties(new Bold()),new Text(String.Format("{0:n0}", cf.data.Sum(item => item.Value))))));
                        tr1.Append(t1, t2);
                        table.AppendChild(tr1);
                        total += cf.data.Sum(item => item.Value);
                    }

                }

                if (clientFund.Length != 0)
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    if(docDet.MaritalStatus == "S")
                    {
                        tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total"))));
                    }
                    else
                    {
                        tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total (" + docDet.ClientName + ")"))));
                    }
                   

                    tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                    tc3.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(String.Format("{0:n0}", total)))));

                    tr.Append(tc1, tc3);

                    table.AppendChild(tr);
                }
            }

            if (partnerFund != null && partnerFund.Length > 0)
            {
                Paragraph paragraph14 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties14 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens14 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines14 = new SpacingBetweenLines() { After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification4 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties14 = new ParagraphMarkRunProperties();
                RunFonts runFonts36 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize35 = new FontSize() { Val = "18" };
                Languages languages33 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties14.Append(runFonts36);
                paragraphMarkRunProperties14.Append(fontSize35);
                paragraphMarkRunProperties14.Append(languages33);

                paragraphProperties14.Append(suppressAutoHyphens14);
                paragraphProperties14.Append(spacingBetweenLines14);
                paragraphProperties14.Append(justification4);
                paragraphProperties14.Append(paragraphMarkRunProperties14);
                body.AppendChild(paragraph14);
                //New Table

                Table table = body.AppendChild(new Table());
                TableProperties tableProp = new TableProperties();
                TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                tableProp.Append(tableStyle, tableWidth);
                table.AppendChild(tableProp);


                ////Header
                TableRow header = new TableRow();
                TableCell h1 = new TableCell();

                TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                ParagraphProperties hppLeft = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppCenter = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppRight = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                hppCenter.AppendChild((Justification)centerJustify.CloneNode(true));

                Justification rightJustify = new Justification() { Val = JustificationValues.Right };
                hppRight.AppendChild((Justification)rightJustify.CloneNode(true));

                TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                hcp.Append(hcm1, hs1, hcb);
                //hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                h1.Append(hcp);

                h1.AppendChild((ParagraphProperties)hppLeft.CloneNode(true));
                h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("" + docDet.PartnerName + " Investments"))));

                TableCell h2 = new TableCell();
                h2.AppendChild((ParagraphProperties)hppRight.CloneNode(true));
                h2.Append((TableCellProperties)hcp.CloneNode(true));
                h2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Current Balance ($)"))));

                header.Append(h1, h2);

                table.Append(header);
                //Body
                TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp2 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });

                pp2.AppendChild((Justification)rightJustify.CloneNode(true));
                pp.AppendChild((Justification)centerJustify.CloneNode(true));
                tcp.Append(tcbL, tcm);
                tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                decimal total = 0;
                foreach (OriginalCF cf in partnerFund)
                {

                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)centerJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(cf.Product))));


                    tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                    tc2.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new Text(""))));
                    tr.Append(tc1, tc2);
                    table.AppendChild(tr);

                    foreach (CurrentClientFundsViewModel data in cf.data)
                    {

                        TableRow tr1 = new TableRow();
                        TableCell t1 = new TableCell();

                        tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)centerJustify.CloneNode(true));
                        t1.Append((TableCellProperties)tcp.CloneNode(true));
                        t1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        t1.Append(new Paragraph(new Run(new RunProperties(), new Text(data.FundName))));


                        tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                        TableCell t2 = new TableCell();
                        t2.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                        t2.Append((TableCellProperties)tcpN.CloneNode(true));
                        t2.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", data.Value)))));
                        tr1.Append(t1, t2);
                        table.AppendChild(tr1);
                    }
                    if (cf.data.Length != 0)
                    {
                        TableRow tr1 = new TableRow();
                        TableCell t1 = new TableCell();

                        tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                        t1.Append((TableCellProperties)tcp1.CloneNode(true));
                        t1.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                        t1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Sub Total"))));

                        TableCell t2 = new TableCell();
                        t2.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                        t2.Append((TableCellProperties)tcpN.CloneNode(true));
                        t2.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", cf.data.Sum(item => item.Value))))));
                        tr1.Append(t1, t2);
                        table.AppendChild(tr1);
                        total += cf.data.Sum(item => item.Value);
                    }

                }

                if (partnerFund.Length != 0)
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)centerJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total (" + docDet.PartnerName + ")"))));

                    tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                    tc3.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(String.Format("{0:n0}", total)))));

                    tr.Append(tc1, tc3);

                    table.AppendChild(tr);
                }
            }

            if (jointFund != null && jointFund.Length > 0)
            {
                Paragraph paragraph14 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties14 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens14 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines14 = new SpacingBetweenLines() { After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification4 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties14 = new ParagraphMarkRunProperties();
                RunFonts runFonts36 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize35 = new FontSize() { Val = "18" };
                Languages languages33 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties14.Append(runFonts36);
                paragraphMarkRunProperties14.Append(fontSize35);
                paragraphMarkRunProperties14.Append(languages33);

                paragraphProperties14.Append(suppressAutoHyphens14);
                paragraphProperties14.Append(spacingBetweenLines14);
                paragraphProperties14.Append(justification4);
                paragraphProperties14.Append(paragraphMarkRunProperties14);
                body.AppendChild(paragraph14);
                //New Table
                Table table = body.AppendChild(new Table());
                TableProperties tableProp = new TableProperties();
                TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                tableProp.Append(tableStyle, tableWidth);
                table.AppendChild(tableProp);


                ////Header
                TableRow header = new TableRow();
                TableCell h1 = new TableCell();

                TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                ParagraphProperties hppLeft = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppCenter = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppRight = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                hppCenter.AppendChild((Justification)centerJustify.CloneNode(true));

                Justification rightJustify = new Justification() { Val = JustificationValues.Right };
                hppRight.AppendChild((Justification)rightJustify.CloneNode(true));

                TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                hcp.Append(hcm1, hs1, hcb);
                //hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                h1.Append(hcp);

                h1.AppendChild((ParagraphProperties)hppLeft.CloneNode(true));
                h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Joint Investments"))));

                TableCell h2 = new TableCell();
                h2.AppendChild((ParagraphProperties)hppRight.CloneNode(true));
                h2.Append((TableCellProperties)hcp.CloneNode(true));
                h2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Current Balance ($)"))));

                header.Append(h1, h2);

                table.Append(header);
                //Body
                TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp2 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });

                pp2.AppendChild((Justification)rightJustify.CloneNode(true));
                pp.AppendChild((Justification)centerJustify.CloneNode(true));
                tcp.Append(tcbL, tcm);
                tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                decimal total = 0;
                foreach (OriginalCF cf in jointFund)
                {

                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)centerJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(cf.Product))));


                    tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                    tc2.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new Text(""))));
                    tr.Append(tc1, tc2);
                    table.AppendChild(tr);

                    foreach (CurrentClientFundsViewModel data in cf.data)
                    {

                        TableRow tr1 = new TableRow();
                        TableCell t1 = new TableCell();

                        tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)centerJustify.CloneNode(true));
                        t1.Append((TableCellProperties)tcp.CloneNode(true));
                        t1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        t1.Append(new Paragraph(new Run(new RunProperties(), new Text(data.FundName))));


                        tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                        TableCell t2 = new TableCell();
                        t2.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                        t2.Append((TableCellProperties)tcpN.CloneNode(true));
                        t2.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", data.Value)))));
                        tr1.Append(t1, t2);
                        table.AppendChild(tr1);
                    }
                    if (cf.data.Length != 0)
                    {
                        TableRow tr1 = new TableRow();
                        TableCell t1 = new TableCell();

                        tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                        t1.Append((TableCellProperties)tcp1.CloneNode(true));
                        t1.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                        t1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Sub Total"))));

                        TableCell t2 = new TableCell();
                        t2.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                        t2.Append((TableCellProperties)tcpN.CloneNode(true));
                        t2.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", cf.data.Sum(item => item.Value))))));
                        tr1.Append(t1, t2);
                        table.AppendChild(tr1);
                        total += cf.data.Sum(item => item.Value);
                    }

                }

                if (jointFund.Length != 0)
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)centerJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total (Joint)"))));

                    tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                    tc3.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(String.Format("{0:n0}", total)))));

                    tr.Append(tc1, tc3);

                    table.AppendChild(tr);
                }
            }

      
        }
        public void AddLiabilities(Body body, Liability[] liability, Color orange)
        {
            Color red = new Color() { Val = "FF0000" };

            if (liability != null && liability.Length != 0)
            {

                Paragraph paragraph14 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties14 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens14 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines14 = new SpacingBetweenLines() { After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification4 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties14 = new ParagraphMarkRunProperties();
                RunFonts runFonts36 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize35 = new FontSize() { Val = "18" };
                Languages languages33 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties14.Append(runFonts36);
                paragraphMarkRunProperties14.Append(fontSize35);
                paragraphMarkRunProperties14.Append(languages33);

                paragraphProperties14.Append(suppressAutoHyphens14);
                paragraphProperties14.Append(spacingBetweenLines14);
                paragraphProperties14.Append(justification4);
                paragraphProperties14.Append(paragraphMarkRunProperties14);
                body.AppendChild(paragraph14);

                Paragraph s1 = body.AppendChild(new Paragraph());
                Run r1 = s1.AppendChild(new Run());
                RunProperties runProperties1 = r1.AppendChild(new RunProperties(new Bold(),new FontSize { Val="20"}));
                Color black = new Color() { Val = "000000" };
                runProperties1.AppendChild(black);
                r1.AppendChild(new Text("Your liabilities"));
           
                //New Table

                Table table = body.AppendChild(new Table());
                TableProperties tableProp = new TableProperties();
                TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                tableProp.Append(tableStyle, tableWidth);
                table.AppendChild(tableProp);


                ////Header
                TableRow header = new TableRow();
                TableCell h1 = new TableCell();

                TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                ParagraphProperties hppLeft = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppCenter = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppRight = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                hppCenter.AppendChild((Justification)centerJustify.CloneNode(true));

                Justification rightJustify = new Justification() { Val = JustificationValues.Right };
                hppRight.AppendChild((Justification)rightJustify.CloneNode(true));

                TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                hcp.Append(hcm1, hs1, hcb);
                //hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                h1.Append(hcp);

                h1.AppendChild((ParagraphProperties)hppLeft.CloneNode(true));
                h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Description"))));

                TableCell h2 = new TableCell();
                h2.AppendChild((ParagraphProperties)hppCenter.CloneNode(true));
                h2.Append((TableCellProperties)hcp.CloneNode(true));
                h2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Owner"))));

                TableCell h3 = new TableCell();
                h3.AppendChild((ParagraphProperties)hppRight.CloneNode(true));
                h3.Append((TableCellProperties)hcp.CloneNode(true));
                h3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Amount ($)"))));
                header.Append(h1, h2, h3);

                table.Append(header);
                //Body
                TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp2 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });

                pp2.AppendChild((Justification)rightJustify.CloneNode(true));
                pp.AppendChild((Justification)centerJustify.CloneNode(true));
                tcp.Append(tcbL, tcm);
                tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));


                foreach (Liability liab in liability)
                {

                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)centerJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    tc1.Append(new Paragraph(new Run(new RunProperties(), new Text(liab.Name))));

                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new Text(liab.Owner))));


                    tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                    tc3.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", liab.Principal)))));

                    tr.Append(tc1, tc2, tc3);

                    table.AppendChild(tr);
                }

                if (liability.Length != 0)
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)centerJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total"))));

                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new Text(""))));


                    tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp2.CloneNode(true));
                    tc3.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(String.Format("{0:n0}", liability.Sum(item => item.Principal))))));

                    tr.Append(tc1, tc2, tc3);

                    table.AppendChild(tr);
                }
            }



           
        }

        public void AddEstatePlanningDetails(Body body, BasicDetails details, Color orange)
        {
            Color red = new Color() { Val = "FF0000" };

            if (details != null)
            {

                Paragraph paragraph14 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties14 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens14 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines14 = new SpacingBetweenLines() { After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification4 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties14 = new ParagraphMarkRunProperties();
                RunFonts runFonts36 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize35 = new FontSize() { Val = "18" };
                Languages languages33 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties14.Append(runFonts36);
                paragraphMarkRunProperties14.Append(fontSize35);
                paragraphMarkRunProperties14.Append(languages33);

                paragraphProperties14.Append(suppressAutoHyphens14);
                paragraphProperties14.Append(spacingBetweenLines14);
                paragraphProperties14.Append(justification4);
                paragraphProperties14.Append(paragraphMarkRunProperties14);
                body.AppendChild(paragraph14);

                Paragraph s1 = body.AppendChild(new Paragraph());
                Run r1 = s1.AppendChild(new Run());
                RunProperties runProperties1 = r1.AppendChild(new RunProperties(new Bold(), new FontSize { Val = "20" }));
                Color black = new Color() { Val = "000000" };
                runProperties1.AppendChild(black);
                r1.AppendChild(new Text("Estate planning details"));

                //New Table

                Table table = body.AppendChild(new Table());
                TableProperties tableProp = new TableProperties();
                TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                tableProp.Append(tableStyle, tableWidth);
                table.AppendChild(tableProp);


                ////Header
                TableRow header = new TableRow();
                TableCell h1 = new TableCell();

                TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                hpp.AppendChild((Justification)centerJustify.CloneNode(true));

                TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                hcp.Append(hcm1, hs1, hcb);
                hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                h1.Append(hcp);

                h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                h1.Append(new Paragraph(new Run(new Text(""))));

                TableCell h2 = new TableCell();
                h2.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                h2.Append((TableCellProperties)hcp1.CloneNode(true));
                h2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(details.ClientName))));
                if (details.MaritalStatus != "S")
                {
                    TableCell h3 = new TableCell();
                    h3.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                    h3.Append((TableCellProperties)hcp1.CloneNode(true));
                    h3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(details.PartnerName))));
                    header.Append(h1, h2, h3);
                }
                else
                {
                    header.Append(h1, h2);
                }

                table.Append(header);
                ////Body

                //TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                pp.AppendChild((Justification)centerJustify.CloneNode(true));
                tcp.Append(tcbL, tcm);
                tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

               
                //Will
                if (details.ClientName != "")
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell((TableCellProperties)tcp.CloneNode(true), (ParagraphProperties)pp1.CloneNode(true), new Paragraph(new Run(new RunProperties(new Bold()), new Text("Will"))));
                    TableCell tc2 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(""))));
                    if (details.MaritalStatus != "S")
                    {
                        TableCell tc3 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(""))));
                        tr.Append(tc1, tc2, tc3);
                    }
                    else
                    {
                        tr.Append(tc1, tc2);
                    }
                    table.AppendChild(tr);
                }
                //Power of Attorney
                if (details.ClientName != "")
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell((TableCellProperties)tcp.CloneNode(true), (ParagraphProperties)pp1.CloneNode(true), new Paragraph(new Run(new RunProperties(new Bold()), new Text("Power of Attorney"))));
                    TableCell tc2 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(""))));
                    if (details.MaritalStatus != "S")
                    {
                        TableCell tc3 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(""))));
                        tr.Append(tc1, tc2, tc3);
                    }
                    else
                    {
                        tr.Append(tc1, tc2);
                    }
                    table.AppendChild(tr);
                }

                //Super beneficiaries
                if (details.ClientName != "")
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell((TableCellProperties)tcp.CloneNode(true), (ParagraphProperties)pp1.CloneNode(true), new Paragraph(new Run(new RunProperties(new Bold()), new Text("Super beneficiaries"))));
                    TableCell tc2 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(""))));
                    if (details.MaritalStatus != "S")
                    {
                        TableCell tc3 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(""))));
                        tr.Append(tc1, tc2, tc3);
                    }
                    else
                    {
                        tr.Append(tc1, tc2);
                    }
                    table.AppendChild(tr);
                }
                //Pension beneficiaries
                if (details.ClientName != "")
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell((TableCellProperties)tcp.CloneNode(true), (ParagraphProperties)pp1.CloneNode(true), new Paragraph(new Run(new RunProperties(new Bold()), new Text("Pension beneficiaries"))));
                    TableCell tc2 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(""))));
                    if (details.MaritalStatus != "S")
                    {
                        TableCell tc3 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(""))));
                        tr.Append(tc1, tc2, tc3);
                    }
                    else
                    {
                        tr.Append(tc1, tc2);
                    }
                    table.AppendChild(tr);
                }

                //Life Insurance beneficiaries
                if (details.ClientName != "")
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell((TableCellProperties)tcp.CloneNode(true), (ParagraphProperties)pp1.CloneNode(true), new Paragraph(new Run(new RunProperties(new Bold()), new Text("Life Insurance beneficiaries"))));
                    TableCell tc2 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(""))));
                    if (details.MaritalStatus != "S")
                    {
                        TableCell tc3 = new TableCell((TableCellProperties)tcpN.CloneNode(true), (ParagraphProperties)pp.CloneNode(true), new Paragraph(new Run(new RunProperties(), new Text(""))));
                        tr.Append(tc1, tc2, tc3);
                    }
                    else
                    {
                        tr.Append(tc1, tc2);
                    }
                    table.AppendChild(tr);
                }

            }

         
        }









        public void AddRiskProfile(MainDocumentPart mainPart,Body body, BasicDetails clientDetails, Color orange, PF[] proposedAssets)
        {
            var clientproposedAssets = proposedAssets.Where(c => c.owner == "Client").ToArray();
            var partnerproposedAssets = proposedAssets.Where(c => c.owner == "Partner").ToArray();
            var jointproposedAssets = proposedAssets.Where(c => c.owner == "Joint").ToArray();
            Color red = new Color() { Val = "FF0000" };
            if (clientDetails != null)
            {
                Paragraph p1 = body.AppendChild(new Paragraph(new Run(new RunProperties(new Color() { Val = "000000" }), new Text("An important part of developing your investment strategy involves determining your attitude to risk and the level you are prepared to accept to achieve investment returns."))));
                Paragraph p2 = body.AppendChild(new Paragraph(new Run(new RunProperties(new Color() { Val = "000000" }), new Text("Risk and return are closely related. In general, the higher the degree of risk associated with an investment, the higher the rate of return an investor would expect to receive for taking on that level of risk. This is the risk/return trade-off, and is part of the process in selecting an appropriate asset allocation and specific investments for your portfolio."))));
                Paragraph p3 = body.AppendChild(new Paragraph(new Run(new RunProperties(new Color() { Val = "000000" }), new Text("Based on the results of our questionnaire and our further discussions we have agreed that you would be comfortable with the risk profile shown below. If you do not feel that the description accurately reflects your attitude to risk and return, please let us know as our recommendations may not be appropriate for your needs."))));
                //Paragraph p4 = new Paragraph(new Run(new RunProperties((Color)red.CloneNode(true)), new Text { Text = "[Change due to CIO update] ", Space = SpaceProcessingModeValues.Preserve }));
                //p4.Append(new Run(new RunProperties(new Color() { Val = "000000" }), new Text("Note: Our research team recently reviewed the descriptions, asset allocations and acceptable tolerance ranges of our risk profiles. As an outcome of this review, your risk profile category has changed to the following. This change does not constitute a change in our overall view of your risk tolerance or return expectations, but rather it reflects our research teamâ€™s update of the risk profile we have recommended to you.")));
                //body.Append(p4);

                Paragraph paragraph14 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                ParagraphProperties paragraphProperties14 = new ParagraphProperties();
                SuppressAutoHyphens suppressAutoHyphens14 = new SuppressAutoHyphens();
                SpacingBetweenLines spacingBetweenLines14 = new SpacingBetweenLines() { After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                Justification justification4 = new Justification() { Val = JustificationValues.Both };

                ParagraphMarkRunProperties paragraphMarkRunProperties14 = new ParagraphMarkRunProperties();
                RunFonts runFonts36 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                FontSize fontSize35 = new FontSize() { Val = "18" };
                Languages languages33 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                paragraphMarkRunProperties14.Append(runFonts36);
                paragraphMarkRunProperties14.Append(fontSize35);
                paragraphMarkRunProperties14.Append(languages33);

                paragraphProperties14.Append(suppressAutoHyphens14);
                paragraphProperties14.Append(spacingBetweenLines14);
                paragraphProperties14.Append(justification4);
                paragraphProperties14.Append(paragraphMarkRunProperties14);
                //body.AppendChild(paragraph14);

                {

                    //New Table

                    Table table = body.AppendChild(new Table());
                    TableProperties tableProp = new TableProperties();
                    TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                    TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                    tableProp.Append(tableStyle, tableWidth);
                    table.AppendChild(tableProp);


                    ////Header
                    TableRow header = new TableRow();
                    TableCell h1 = new TableCell();

                    TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                    ParagraphProperties hppLeft = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                    ParagraphProperties hppCenter = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                    ParagraphProperties hppRight = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                    Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                    hppCenter.AppendChild((Justification)centerJustify.CloneNode(true));

                    Justification rightJustify = new Justification() { Val = JustificationValues.Right };
                    hppRight.AppendChild((Justification)rightJustify.CloneNode(true));

                    TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                    Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                    TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                    hcp.Append(hcm1, hs1, hcb);
                    //hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                    h1.Append(hcp);

                    h1.AppendChild((ParagraphProperties)hppLeft.CloneNode(true));
                    h1.Append(new Paragraph(new Run(new Text(""))));

                    TableCell h2 = new TableCell();
                    h2.AppendChild((ParagraphProperties)hppCenter.CloneNode(true));
                    h2.Append((TableCellProperties)hcp.CloneNode(true));
                    h2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Risk Profile"))));

                    header.Append(h1, h2);

                    table.Append(header);

                    //Body
                    TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                    TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                    TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                    TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                    TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                    ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                    ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                    ParagraphProperties pp2 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });

                    pp2.AppendChild((Justification)rightJustify.CloneNode(true));
                    pp.AppendChild((Justification)centerJustify.CloneNode(true));
                    tcp.Append(tcbL, tcm);
                    tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                    if(clientDetails.MaritalStatus == "S")
                    {
                        TableRow tr = new TableRow();
                        TableCell tc1 = new TableCell();

                        tc1.Append((TableCellProperties)tcp.CloneNode(true));
                        tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(clientDetails.ClientName))));


                        tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                        TableCell tc2 = new TableCell();
                        tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc2.Append((TableCellProperties)tcpN.CloneNode(true));
                        tc2.Append(new Paragraph(new Run(new Text(clientDetails.ClientRiskProfile))));
                        tr.Append(tc1, tc2);
                        table.AppendChild(tr);
                    }
                    else
                    {

                        

                        if (clientDetails.ClientRiskProfile != "")
                        {
                            TableRow tr = new TableRow();
                            TableCell tc1 = new TableCell();

                            tc1.Append((TableCellProperties)tcp.CloneNode(true));
                            tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(clientDetails.ClientName))));


                            tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                            TableCell tc2 = new TableCell();
                            tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc2.Append((TableCellProperties)tcpN.CloneNode(true));
                            tc2.Append(new Paragraph(new Run(new Text(clientDetails.ClientRiskProfile))));
                            tr.Append(tc1, tc2);
                            table.AppendChild(tr);
                        }
                        if (clientDetails.PartnerRiskProfile != "" && partnerproposedAssets.Any())
                        {
                            TableRow tr = new TableRow();
                            TableCell tc1 = new TableCell();

                            tc1.Append((TableCellProperties)tcp.CloneNode(true));
                            tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(clientDetails.PartnerName))));


                            tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                            TableCell tc2 = new TableCell();
                            tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc2.Append((TableCellProperties)tcpN.CloneNode(true));
                            tc2.Append(new Paragraph(new Run(new Text(clientDetails.PartnerRiskProfile))));
                            tr.Append(tc1, tc2);
                            table.AppendChild(tr);
                        }
                        if (clientDetails.JointRiskProfile != "" && jointproposedAssets.Any())
                        {
                            TableRow tr = new TableRow();
                            TableCell tc1 = new TableCell();

                            tc1.Append((TableCellProperties)tcp.CloneNode(true));
                            tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Joint"))));


                            tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                            TableCell tc2 = new TableCell();
                            tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc2.Append((TableCellProperties)tcpN.CloneNode(true));
                            tc2.Append(new Paragraph(new Run(new Text(clientDetails.JointRiskProfile))));
                            tr.Append(tc1, tc2);
                            table.AppendChild(tr);
                        }
                    }

                 
                    body.AppendChild((Paragraph)paragraph14.CloneNode(true));

                    if(clientDetails.MaritalStatus == "S" || clientDetails.MaritalStatus == "M")
                    {
                           printRiskProfile(mainPart, body, Environment.CurrentDirectory + @"\wwwroot\RiskProfile\Balanced.png", clientDetails.ClientRiskProfile.Trim());
                        //printRiskProfile(mainPart, body, @"Balanced.png", clientDetails.ClientRiskProfile.Trim());
                    }
                    //}

                    if (clientDetails.MaritalStatus == "M" && (clientDetails.ClientRiskProfile != clientDetails.PartnerRiskProfile) && partnerproposedAssets.Any())
                    {
                        if(clientDetails.PartnerRiskProfile != "")
                        {
                            printRiskProfile(mainPart, body, Environment.CurrentDirectory + @"\wwwroot\RiskProfile\Balanced.png", clientDetails.PartnerRiskProfile.Trim());
                           // printRiskProfile(mainPart, body, @"Balanced.png", clientDetails.PartnerRiskProfile.Trim());
                        }
                        
                    }

                    if (clientDetails.MaritalStatus == "M" && (clientDetails.ClientRiskProfile != clientDetails.JointRiskProfile) && (clientDetails.PartnerRiskProfile != clientDetails.JointRiskProfile) && jointproposedAssets.Any())
                    {
                       
                        if (clientDetails.JointRiskProfile != "")
                        {
                            printRiskProfile(mainPart, body, Environment.CurrentDirectory + @"\wwwroot\RiskProfile\Balanced.png", clientDetails.JointRiskProfile.Trim());
                            //printRiskProfile(mainPart, body, @"Balanced.png", clientDetails.JointRiskProfile.Trim());
                        }
                    }

                }


            }
        }     
        public void printRiskProfile(MainDocumentPart mainPart,Body body,string fileName,string riskProfile)
        {

            Table table = body.AppendChild(new Table());
            TableProperties tableProp = new TableProperties();
            TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

            TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

            tableProp.Append(tableStyle, tableWidth);
            table.AppendChild(tableProp);

            TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });    
            TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };
            ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
            tcp.Append(tcm);
            Justification justify = new Justification() { Val = JustificationValues.Both };
            pp.AppendChild((Justification)justify.CloneNode(true));
            if (riskProfile == "Preservation")
            {
                TableRow tr = new TableRow();
                TableCell tc1 = new TableCell();

                tc1.Append((TableCellProperties)tcp.CloneNode(true));
                tc1.AppendChild((ParagraphProperties)pp.CloneNode(true));
                Paragraph p = new Paragraph(new Run(new RunProperties(), new Text("The investment objective of a")));
                p.Append(new Run(new RunProperties(new Bold()), new Text { Text = " Preservation Investor ", Space = SpaceProcessingModeValues.Preserve }));
                p.Append(new Run(new RunProperties(), new Text("is to maintain the current value of your investments above all other considerations. Preservation investors seek security above all else or need most of their money within a short timeframe, and they are prepared to accept low overall returns in exchange for this security. A Preservation portfolio looks to invest the majority in liquid defensive assets (e.g. cash and fixed income). This is generally a 100% cash portfolio. Such a portfolio is suitable for investors with a short term investment time frame, typically less than 2 years.")));
                tc1.Append(p);

                TableCell tc2 = new TableCell();
                tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));


                InsertImage(mainPart, tc2, Environment.CurrentDirectory + @"\wwwroot\RiskProfile\Preservation.png");
             
                tr.Append(tc1, tc2);
                table.AppendChild(tr);
                
            }
            else if (riskProfile == "Defensive")
            {
                TableRow tr = new TableRow();
                TableCell tc1 = new TableCell();

                tc1.Append((TableCellProperties)tcp.CloneNode(true));
                tc1.AppendChild((ParagraphProperties)pp.CloneNode(true));
                Paragraph p = new Paragraph(new Run(new RunProperties(), new Text("The investment objective of a")));
                p.Append(new Run(new RunProperties(new Bold()), new Text { Text = " Defensive Investor ", Space = SpaceProcessingModeValues.Preserve }));
                p.Append(new Run(new RunProperties(), new Text("is to place an emphasis on relatively stable returns with the potential for modest long term growth. A Defensive portfolio looks to invest around 30% in growth assets (e.g. equities and property) and the remainder in defensive assets (e.g. cash and fixed income). The figure of 30% is a general benchmark; actual allocations over time will vary around this as investment conditions change and investment managers take opportunities to improve returns. This portfolio suits investors who primarily seek income with some potential for capital growth. This portfolio also suits investors seeking a low level of investment value volatility, and who are therefore willing to accept lower potential investment returns. Such a portfolio is suitable for investors with a short to medium term investment time frame. It is important to note that the value of your capital can move up and down over time, particularly in shorter time spans. Hence these investments should be considered with a minimum time frame of 3 years.")));
                tc1.Append(p);

                TableCell tc2 = new TableCell();
                tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));

                InsertImage(mainPart, tc2, Environment.CurrentDirectory + @"\wwwroot\RiskProfile\Defensive.png");
                        
                tr.Append(tc1, tc2);
                table.AppendChild(tr);
            }
            else if (riskProfile == "Moderate")
            {
                TableRow tr = new TableRow();
                TableCell tc1 = new TableCell();

                tc1.Append((TableCellProperties)tcp.CloneNode(true));
                tc1.AppendChild((ParagraphProperties)pp.CloneNode(true));
                Paragraph p = new Paragraph(new Run(new RunProperties(), new Text("The investment objective of a")));
                p.Append(new Run(new RunProperties(new Bold()), new Text { Text = " Moderate Investor ", Space = SpaceProcessingModeValues.Preserve }));
                p.Append(new Run(new RunProperties(), new Text("is to obtain a balance of security, income and growth with security and income ranking before growth in priority. A Moderate portfolio looks to invest around 50% in growth assets (e.g. equities and property) and the remainder in defensive assets (e.g. cash and fixed income). The figure of 50% is a general benchmark; actual allocations over time will vary around this as investment conditions change and investment managers take opportunities to improve returns. This portfolio suits investors who desire a modest level of capital stability but are willing to accept moderate investment value volatility in return for potential investment performance. Such a portfolio is suitable for investors with a medium term investment time frame. It is important to note that the value of your capital can move up and down over time, particularly in shorter time spans. Hence these investments should be considered with a minimum time frame of 3 years.")));
                tc1.Append(p);

                TableCell tc2 = new TableCell();
                tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));

                InsertImage(mainPart, tc2, Environment.CurrentDirectory + @"\wwwroot\RiskProfile\Moderate.png");
                tr.Append(tc1, tc2);
                table.AppendChild(tr);
            }
            else if (riskProfile == "Balanced")
            {
                TableRow tr = new TableRow();
                TableCell tc1 = new TableCell();
                tc1.Append((TableCellProperties)tcp.CloneNode(true));
                tc1.AppendChild((ParagraphProperties)pp.CloneNode(true));
                Paragraph p = new Paragraph(new Run(new RunProperties(), new Text("The investment objective of a")));
                p.Append(new Run(new RunProperties(new Bold()), new Text { Text = " Balanced Investor ", Space = SpaceProcessingModeValues.Preserve }));
                p.Append(new Run(new RunProperties(), new Text("is to place an emphasis on longer term growth using a combination of asset classes to moderate some volatility. A Balanced portfolio looks to invest around 70% in growth assets (e.g. equities and property) and the remainder in defensive assets (e.g. cash and fixed income). The figure of 70% is a general benchmark; actual allocations over time will vary around this as investment conditions change and investment managers take opportunities to improve returns. This portfolio suits investors who are willing to accept higher levels of investment value volatility in return for higher potential investment performance, however some capital stability is still desired. Such a portfolio is suitable for investors with a medium to longer term investment time frame with no need to access a large part of their investment over that time. It is important to note that the value of your capital can move up and down over time, particularly in shorter time spans. Hence these investments should be considered with a minimum time frame of 5 years.")));
                tc1.Append(p);

                TableCell tc2 = new TableCell();
                tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));


                InsertImage(mainPart, tc2, Environment.CurrentDirectory + @"\wwwroot\RiskProfile\Balanced.png");

                tr.Append(tc1, tc2);
                table.AppendChild(tr);
            }
            else if (riskProfile == "Growth")
            {
                TableRow tr = new TableRow();
                TableCell tc1 = new TableCell();

                tc1.Append((TableCellProperties)tcp.CloneNode(true));
                tc1.AppendChild((ParagraphProperties)pp.CloneNode(true));
                Paragraph p = new Paragraph(new Run(new RunProperties(), new Text("The investment objective of a")));
                p.Append(new Run(new RunProperties(new Bold()), new Text { Text = " Growth Investor ", Space = SpaceProcessingModeValues.Preserve }));
                p.Append(new Run(new RunProperties(), new Text("is to place an emphasis on long term growth with a modest income stream. A Growth portfolio looks to invest around 85% in growth assets (e.g. equities and property) and the remainder in defensive assets (e.g. cash and fixed income). The figure of 85% is a general benchmark; actual allocations over time will vary around this as investment conditions change and investment managers take opportunities to improve returns. This portfolio suits investors who are willing to accept high levels of investment value volatility in return for high potential investment performance. The higher exposure to growth assets means that capital stability is only a minor concern. Such a portfolio is suitable for investors with a long term investment time frame. It is important to note that the value of your capital can move up and down over time, particularly in shorter time spans. Hence these investments should be considered with a minimum timeframe of 5 years.")));
                tc1.Append(p);

                TableCell tc2 = new TableCell();
                tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));


                InsertImage(mainPart, tc2, Environment.CurrentDirectory + @"\wwwroot\RiskProfile\Growth.png");
              
                tr.Append(tc1, tc2);
                table.AppendChild(tr);
            }
            else if (riskProfile == "HighGrowth")
            {
                TableRow tr = new TableRow();
                TableCell tc1 = new TableCell();

                tc1.Append((TableCellProperties)tcp.CloneNode(true));
                tc1.AppendChild((ParagraphProperties)pp.CloneNode(true));
                Paragraph p = new Paragraph(new Run(new RunProperties(), new Text("The investment objective of a")));
                p.Append(new Run(new RunProperties(new Bold()), new Text { Text = " High Growth Investor ", Space = SpaceProcessingModeValues.Preserve }));
                p.Append(new Run(new RunProperties(), new Text("is to focus on long term growth above all considerations. A High Growth portfolio looks to invest up to 100% in growth assets (e.g. equities and property). This portfolio suits investors who are willing to accept very high levels of investment value volatility to maximise potential investment performance. The 100% exposure to growth assets means that capital stability is not a consideration. Such a portfolio is suitable for investors with a long term investment time frame. It is important to note that the value of your capital can move up and down over time, particularly in shorter time spans. Hence these investments should be considered with a minimum time frame of 7 years.")));
                tc1.Append(p);

                TableCell tc2 = new TableCell();
                tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));


                InsertImage(mainPart, tc2, Environment.CurrentDirectory + @"\wwwroot\RiskProfile\HighGrowth.png");
             
                tr.Append(tc1, tc2);
                table.AppendChild(tr);
            }

            Run linebreak = new Run(new Break());
            Paragraph paragraph = new Paragraph();
            paragraph.Append(new OpenXmlElement[] { linebreak });
            body.Append(paragraph);

        }
        public void AddRecommemdedPortfolio(Body body, OriginalCF[] currentInvestments, PF[] proposedInvestments, BasicDetails clientDetails)
        {
            ////Paragraph break3 = new Paragraph(new Run(new Break() { Type = BreakValues.Page }));

            ////body.AppendChild(break3);
            Paragraph s1 = body.AppendChild(new Paragraph());
            Run r1 = s1.AppendChild(new Run());
            RunProperties runProperties1 = r1.AppendChild(new RunProperties(new Bold(), new FontSize { Val = "22" }));
            Color black = new Color() { Val = "000000" };
            runProperties1.AppendChild(black);
            if (clientDetails.MaritalStatus == "S")
            {
                r1.AppendChild(new Text("Recommended portfolio for " + clientDetails.ClientName));
            }
            else
            {
                r1.AppendChild(new Text("Recommended portfolio"));
            }

            if (proposedInvestments == null)
            {
                var t = new List<PF>();
                proposedInvestments = t.ToArray();
            }

            Paragraph description = body.AppendChild(new Paragraph(new Run(new Text("The following table outlines our recommendations for your investment portfolio. This table may include other existing investments or products you hold which we have not addressed as part of our advice."))));

            IList<OriginalCF> clientCurrent = new List<OriginalCF>(currentInvestments.Where(c => c.Owner == "Client").ToArray());
            IList<OriginalCF> partnerCurrent = new List<OriginalCF>(currentInvestments.Where(c => c.Owner == "Partner").ToArray());
            IList<OriginalCF> jointCurrent = new List<OriginalCF>(currentInvestments.Where(c => c.Owner == "Joint").ToArray());

            IList<PF> clientProposed = new List<PF>(proposedInvestments.Where(c => c.owner == "Client").ToArray());
            IList<PF> partnerProposed = new List<PF>(proposedInvestments.Where(c => c.owner == "Partner").ToArray());
            IList<PF> jointProposed = new List<PF>(proposedInvestments.Where(c => c.owner == "Joint").ToArray());

            var commonClient = clientCurrent.Select(s => s.ProductId).ToList().Union(clientProposed.Select(p => p.productId).ToList()).ToList();
            var commonPartner = partnerCurrent.Select(s => s.ProductId).ToList().Union(partnerProposed.Select(p => p.productId).ToList()).ToList();
            var commonJoint = jointCurrent.Select(s => s.ProductId).ToList().Union(jointProposed.Select(p => p.productId).ToList()).ToList();


            Table table = body.AppendChild(new Table());
            TableProperties tableProp = new TableProperties();
            TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

            TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

            tableProp.Append(tableStyle, tableWidth);
            table.AppendChild(tableProp);

            ////Header
            TableRow header = new TableRow();
            TableCell h1 = new TableCell();

            TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
            TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

            ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
            ParagraphProperties hpp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

            Justification rightJustify = new Justification() { Val = JustificationValues.Right };
            hpp1.AppendChild((Justification)rightJustify.CloneNode(true));

          

            TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

            Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
            TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

            hcp.Append(hcm1, hs1, hcb);
            hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
            h1.Append(hcp);

            h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
            h1.Append(new Paragraph(new Run(new Text(""))));

            TableCell h2 = new TableCell();
            h2.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
            h2.Append((TableCellProperties)hcp1.CloneNode(true));
            h2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Current ($)"))));

            TableCell h3 = new TableCell();
            h3.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
            h3.Append((TableCellProperties)hcp1.CloneNode(true));
            h3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Change ($)"))));

            TableCell h4 = new TableCell();
            h4.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
            h4.Append((TableCellProperties)hcp1.CloneNode(true));
            h4.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed ($)"))));
            header.Append(h1, h2, h3, h4);

            table.Append(header);
            //Body

            TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
            TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
            TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

            TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
            TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
            TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

            TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

            ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
            ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

            pp.AppendChild((Justification)rightJustify.CloneNode(true));
            tcp.Append(tcbL, tcm);
            tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));


            decimal currentOverallTotal = 0;
            decimal proposedOverallTotal = 0;

            //Client
            if (commonClient != null && (commonClient.Any()))
            {
                if (clientDetails.ClientName != "")
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    tcp2.Append((TableCellBorders)tcbN.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                    tc1.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    if (clientDetails.MaritalStatus == "S")
                    {
                        tc1.Append(new Paragraph(new Run(new Text(""))));
                    }
                    else
                    {
                        
                        Paragraph para = new Paragraph();
                        Run run = para.AppendChild(new Run());
                        RunProperties runProperties = run.AppendChild(new RunProperties());
                        Caps caps = new Caps();
                        Bold bold = new Bold();
                        caps.Val = OnOffValue.FromBoolean(true);
                        runProperties.AppendChild(caps);
                        runProperties.AppendChild(bold);
                        run.AppendChild(new Text(clientDetails.FamilyName + ", " + clientDetails.ClientName));
                        tc1.Append(para);
                        //tc1.Append(new Paragraph(new Run(new RunProperties(new Bold(),new Caps()), new Text(clientDetails.FamilyName + " , " + clientDetails.ClientName))));
                    }

                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc2.Append((TableCellProperties)tcp2.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new Text(""))));




                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc3.Append((TableCellProperties)tcp2.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new Text(""))));


                    TableCell tc4 = new TableCell();
                    tc4.Append((TableCellProperties)tcp2.CloneNode(true));
                    tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc4.Append(new Paragraph(new Run(new Text(""))));

                    tr.Append(tc1, tc2, tc3, tc4);

                    if (clientDetails.MaritalStatus != "S")
                    {
                        table.AppendChild(tr);
                    }
                }

                decimal currentTotal = 0;
                decimal proposedTotal = 0;
                foreach (int propertytId in commonClient)
                {
                    var current = (clientCurrent ?? Enumerable.Empty<OriginalCF>()).Where(i => i.ProductId == propertytId).FirstOrDefault();
                    var proposed = (clientProposed ?? Enumerable.Empty<PF>()).Where(i => i.productId == propertytId).FirstOrDefault();

                    if (current != null && (current.Product != ""))
                    {
                        TableRow tr = new TableRow();
                        TableCell tc1 = new TableCell();

                        TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                        tcp2.Append((TableCellBorders)tcbN.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                        tc1.Append((TableCellProperties)tcpN.CloneNode(true));
                        tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(current.Product))));


                        TableCell tc2 = new TableCell();
                        tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc2.Append((TableCellProperties)tcp2.CloneNode(true));
                        tc2.Append(new Paragraph(new Run(new Text(""))));




                        TableCell tc3 = new TableCell();
                        tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc3.Append((TableCellProperties)tcp2.CloneNode(true));
                        tc3.Append(new Paragraph(new Run(new Text(""))));


                        TableCell tc4 = new TableCell();
                        tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc4.Append((TableCellProperties)tcp2.CloneNode(true));
                        tc4.Append(new Paragraph(new Run(new Text(""))));


                        tr.Append(tc1, tc2, tc3, tc4);

                        table.AppendChild(tr);


                    }
                    else
                    {
                        TableRow tr = new TableRow();
                        TableCell tc1 = new TableCell();

                        TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                        tcp2.Append((TableCellBorders)tcbN.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                        tc1.Append((TableCellProperties)tcpN.CloneNode(true));
                        tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(proposed.product))));


                        TableCell tc2 = new TableCell();
                        tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc2.Append((TableCellProperties)tcp2.CloneNode(true));
                        tc2.Append(new Paragraph(new Run(new Text(""))));

                        TableCell tc3 = new TableCell();
                        tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc3.Append((TableCellProperties)tcp2.CloneNode(true));
                        tc3.Append(new Paragraph(new Run(new Text(""))));



                        TableCell tc4 = new TableCell();
                        tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc4.Append((TableCellProperties)tcp2.CloneNode(true));
                        tc4.Append(new Paragraph(new Run(new Text(""))));

                        tr.Append(tc1, tc2, tc3, tc4);

                        table.AppendChild(tr);

                    }

                    var commonFund = new List<string>();
                    if (current != null || proposed != null)
                    {
                        if (current != null && proposed != null)
                        {
                            commonFund = current.data.Select(s => s.Apircode).ToList().Union(proposed.data.Select(p => p.Apircode).ToList()).ToList();
                        }
                        else if (current == null)
                        {
                            commonFund = proposed.data.Select(p => p.Apircode).ToList();
                        }
                        else
                        {
                            commonFund = current.data.Select(p => p.Apircode).ToList();
                        }
                        foreach (string APIR in commonFund)
                        {

                            var currentFund = current == null ? null : (current.data ?? Enumerable.Empty<CurrentClientFundsViewModel>()).Where(i => i.Apircode == APIR).FirstOrDefault();
                            var proposedFund = proposed == null ? null : (proposed.data ?? Enumerable.Empty<ProposedClientFundsViewModel>()).Where(i => i.Apircode == APIR).FirstOrDefault();
                            if (currentFund != null && (currentFund.FundName != ""))
                            {
                                TableRow tr = new TableRow();
                                TableCell tc1 = new TableCell();

                                tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                                tc1.Append((TableCellProperties)tcp.CloneNode(true));
                                tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                                tc1.Append(new Paragraph(new Run(new RunProperties(), new Text(currentFund.FundName))));


                                TableCell tc2 = new TableCell();
                                tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                                tc2.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", currentFund.Value)))));




                                TableCell tc3 = new TableCell();
                                tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                                tc3.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", ((proposedFund == null ? 0 : proposedFund.Value) - currentFund.Value))))));


                                TableCell tc4 = new TableCell();
                                TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                                tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                                tc4.Append(tcp2);
                                tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc4.Append(new Paragraph(new Run(new Text(proposedFund == null ? "0" : String.Format("{0:n0}", proposedFund.Value)))));

                                tr.Append(tc1, tc2, tc3, tc4);

                                table.AppendChild(tr);


                            }
                            else
                            {
                                TableRow tr = new TableRow();
                                TableCell tc1 = new TableCell();

                                tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                                tc1.Append((TableCellProperties)tcp.CloneNode(true));
                                tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                                tc1.Append(new Paragraph(new Run(new RunProperties(), new Text(proposedFund.FundName))));


                                TableCell tc2 = new TableCell();
                                tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                                tc2.Append(new Paragraph(new Run(new Text(currentFund == null ? "0" : String.Format("{0:n0}", currentFund.Value)))));

                                TableCell tc3 = new TableCell();
                                tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                                tc3.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", (proposedFund.Value - (currentFund == null ? 0 : currentFund.Value)))))));


                                TableCell tc4 = new TableCell();
                                TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                                tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                                tc4.Append(tcp2);
                                tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc4.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", proposedFund.Value)))));

                                tr.Append(tc1, tc2, tc3, tc4);

                                table.AppendChild(tr);

                            }



                        }

                        // Sub Total
                        if (current != null || proposed != null)
                        {
                            TableRow tr = new TableRow();
                            TableCell tc1 = new TableCell();

                            tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                            tc1.Append((TableCellProperties)tcp.CloneNode(true));
                            tc1.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Sub Total"))));


                            TableCell tc2 = new TableCell();
                            tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                            tc2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", (current == null ? 0 : current.data.Sum(items => items.Value)))))));

                            currentTotal += current == null ? 0 : current.data.Sum(items => items.Value);

                           

                            TableCell tc3 = new TableCell();
                            tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                            tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", ((proposed == null ? 0 : proposed.data.Sum(items => items.Value))) - (current == null ? 0 : current.data.Sum(items => items.Value)))))));


                            TableCell tc4 = new TableCell();
                            TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                            tc4.Append(tcp2);
                            tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc4.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", (proposed == null ? 0 : proposed.data.Sum(items => items.Value)))))));

                            proposedTotal += proposed == null ? 0 : proposed.data.Sum(items => items.Value);
                            


                            tr.Append(tc1, tc2, tc3, tc4);

                            table.AppendChild(tr);
                        }


                    }
                }

                //Client Total
                if (commonClient.Any())
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                    
                    if (clientDetails.MaritalStatus == "S")
                    {
                        tc1.Append((TableCellProperties)tcp.CloneNode(true));
                        tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total"))));
                    }
                    else
                    {
                        tc1.Append((TableCellProperties)tcp1.CloneNode(true));
                        tc1.AppendChild((ParagraphProperties)pp.CloneNode(true));

                        Paragraph para = new Paragraph();
                        Run run = para.AppendChild(new Run());
                        RunProperties runProperties = run.AppendChild(new RunProperties());
                        Bold bold = new Bold();
                      
                        runProperties.AppendChild(bold);
                        run.AppendChild(new Text { Text = "Total for ", Space = SpaceProcessingModeValues.Preserve });

                        Run run1 = para.AppendChild(new Run());
                        RunProperties runPropertiesA = run1.AppendChild(new RunProperties());
                        Caps caps = new Caps();
                        caps.Val = OnOffValue.FromBoolean(true);
                        runPropertiesA.AppendChild(caps);
                        runPropertiesA.AppendChild((Bold)bold.CloneNode(true));
                        run1.AppendChild(new Text(clientDetails.FamilyName + ", " + clientDetails.ClientName));
                        tc1.Append(para);

                       // tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total for " + clientDetails.FamilyName + ", " + clientDetails.ClientName))));
                    }

                    currentOverallTotal += currentTotal;
                    proposedOverallTotal += proposedTotal;
                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", currentTotal)))));




                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", proposedTotal - currentTotal)))));


                    TableCell tc4 = new TableCell();
                    TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                    tc4.Append(tcp2);
                    tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc4.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", proposedTotal)))));

                    tr.Append(tc1, tc2, tc3, tc4);

                    table.AppendChild(tr);
                }
            }
            //Partner
            if (commonPartner != null && (commonPartner.Any()))
            {
                if (clientDetails.PartnerName != "")
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    tcp2.Append((TableCellBorders)tcbN.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));

                    Paragraph para = new Paragraph();
                    Run run = para.AppendChild(new Run());
                    RunProperties runProperties = run.AppendChild(new RunProperties());
                    Caps caps = new Caps();
                    Bold bold = new Bold();
                    caps.Val = OnOffValue.FromBoolean(true);
                    runProperties.AppendChild(caps);
                    runProperties.AppendChild(bold);
                    run.AppendChild(new Text(clientDetails.FamilyName + ", " + clientDetails.PartnerName));
                    tc1.Append(para);

                    // tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(clientDetails.FamilyName + ", " + clientDetails.PartnerName))));


                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc2.Append((TableCellProperties)tcp2.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new Text(""))));




                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc3.Append((TableCellProperties)tcp2.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new Text(""))));


                    TableCell tc4 = new TableCell();
                    tc4.Append((TableCellProperties)tcp2.CloneNode(true));
                    tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc4.Append(new Paragraph(new Run(new Text(""))));

                    tr.Append(tc1, tc2, tc3, tc4);

                    table.AppendChild(tr);
                }

                decimal currentTotal = 0;
                decimal proposedTotal = 0;
                foreach (int propertytId in commonPartner)
                {
                    var current = (partnerCurrent ?? Enumerable.Empty<OriginalCF>()).Where(i => i.ProductId == propertytId).FirstOrDefault();
                    var proposed = (partnerProposed ?? Enumerable.Empty<PF>()).Where(i => i.productId == propertytId).FirstOrDefault();

                    if (current != null && (current.Product != ""))
                    {
                        TableRow tr = new TableRow();
                        TableCell tc1 = new TableCell();

                        TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                        tcp2.Append((TableCellBorders)tcbN.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                        tc1.Append((TableCellProperties)tcp.CloneNode(true));
                        tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(current.Product))));


                        TableCell tc2 = new TableCell();
                        tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                        tc2.Append(new Paragraph(new Run(new Text(""))));




                        TableCell tc3 = new TableCell();
                        tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                        tc3.Append(new Paragraph(new Run(new Text(""))));


                        TableCell tc4 = new TableCell();
                        tc4.Append((TableCellProperties)tcp1.CloneNode(true));
                        tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc4.Append(new Paragraph(new Run(new Text(""))));

                        tr.Append(tc1, tc2, tc3, tc4);

                        table.AppendChild(tr);


                    }
                    else
                    {
                        TableRow tr = new TableRow();
                        TableCell tc1 = new TableCell();

                        TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                        tcp2.Append((TableCellBorders)tcbN.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                        tc1.Append((TableCellProperties)tcp.CloneNode(true));
                        tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(proposed.product))));


                        TableCell tc2 = new TableCell();
                        tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                        tc2.Append(new Paragraph(new Run(new Text(""))));

                        TableCell tc3 = new TableCell();
                        tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                        tc3.Append(new Paragraph(new Run(new Text(""))));


                        TableCell tc4 = new TableCell();
                        tc4.Append((TableCellProperties)tcp1.CloneNode(true));
                        tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc4.Append(new Paragraph(new Run(new Text(""))));

                        tr.Append(tc1, tc2, tc3, tc4);

                        table.AppendChild(tr);

                    }

                    var commonFund = new List<string>();
                    if (current != null || proposed != null)
                    {
                        if (current != null && proposed != null)
                        {
                            commonFund = current.data.Select(s => s.Apircode).ToList().Union(proposed.data.Select(p => p.Apircode).ToList()).ToList();
                        }
                        else if (current == null)
                        {
                            commonFund = proposed.data.Select(p => p.Apircode).ToList();
                        }
                        else
                        {
                            commonFund = current.data.Select(p => p.Apircode).ToList();
                        }
                        foreach (string APIR in commonFund)
                        {

                            var currentFund = current == null ? null : (current.data ?? Enumerable.Empty<CurrentClientFundsViewModel>()).Where(i => i.Apircode == APIR).FirstOrDefault();
                            var proposedFund = proposed == null ? null : (proposed.data ?? Enumerable.Empty<ProposedClientFundsViewModel>()).Where(i => i.Apircode == APIR).FirstOrDefault();
                            if (currentFund != null && (currentFund.FundName != ""))
                            {
                                TableRow tr = new TableRow();
                                TableCell tc1 = new TableCell();

                                tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                                tc1.Append((TableCellProperties)tcp.CloneNode(true));
                                tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                                tc1.Append(new Paragraph(new Run(new RunProperties(), new Text(currentFund.FundName))));


                                TableCell tc2 = new TableCell();
                                tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                                tc2.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", currentFund.Value)))));




                                TableCell tc3 = new TableCell();
                                tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                                tc3.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", ((proposedFund == null ? 0 : proposedFund.Value) - currentFund.Value))))));


                                TableCell tc4 = new TableCell();
                                TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                                tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                                tc4.Append(tcp2);
                                tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc4.Append(new Paragraph(new Run(new Text(proposedFund == null ? "0" : String.Format("{0:n0}", proposedFund.Value)))));

                                tr.Append(tc1, tc2, tc3, tc4);

                                table.AppendChild(tr);


                            }
                            else
                            {
                                TableRow tr = new TableRow();
                                TableCell tc1 = new TableCell();

                                tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                                tc1.Append((TableCellProperties)tcp.CloneNode(true));
                                tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                                tc1.Append(new Paragraph(new Run(new RunProperties(), new Text(proposedFund.FundName))));


                                TableCell tc2 = new TableCell();
                                tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                                tc2.Append(new Paragraph(new Run(new Text(currentFund == null ? "0" : String.Format("{0:n0}", currentFund.Value)))));

                                TableCell tc3 = new TableCell();
                                tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                                tc3.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", (proposedFund.Value - (currentFund == null ? 0 : currentFund.Value)))))));


                                TableCell tc4 = new TableCell();
                                TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                                tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                                tc4.Append(tcp2);
                                tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc4.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", proposedFund.Value)))));

                                tr.Append(tc1, tc2, tc3, tc4);

                                table.AppendChild(tr);

                            }



                        }

                        // Sub Total
                        if (current != null || proposed != null)
                        {
                            TableRow tr = new TableRow();
                            TableCell tc1 = new TableCell();

                            tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                            tc1.Append((TableCellProperties)tcp.CloneNode(true));
                            tc1.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Sub Total"))));


                            TableCell tc2 = new TableCell();
                            tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                            tc2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", (current == null ? 0 : current.data.Sum(items => items.Value)))))));

                            currentTotal += current == null ? 0 : current.data.Sum(items => items.Value);
                           // currentOverallTotal += currentTotal;



                            TableCell tc3 = new TableCell();
                            tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                            tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", ((proposed == null ? 0 : proposed.data.Sum(items => items.Value))) - (current == null ? 0 : current.data.Sum(items => items.Value)))))));


                            TableCell tc4 = new TableCell();
                            TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                            tc4.Append(tcp2);
                            tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc4.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", (proposed == null ? 0 : proposed.data.Sum(items => items.Value)))))));

                            proposedTotal += proposed == null ? 0 : proposed.data.Sum(items => items.Value);
                          
                            tr.Append(tc1, tc2, tc3, tc4);

                            table.AppendChild(tr);
                        }


                    }
                }

                //Client Total
                if (commonPartner.Any())
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp.CloneNode(true));

               
                    Paragraph para = new Paragraph();
                    Run run = para.AppendChild(new Run());
                    RunProperties runProperties = run.AppendChild(new RunProperties());
                    Bold bold = new Bold();
                    runProperties.AppendChild(bold);
                    run.AppendChild(new Text { Text = "Total for ", Space = SpaceProcessingModeValues.Preserve });

                    Run run1 = para.AppendChild(new Run());
                    RunProperties runPropertiesA = run1.AppendChild(new RunProperties());
                    Caps caps = new Caps();
                    caps.Val = OnOffValue.FromBoolean(true);
                    runPropertiesA.AppendChild(caps);
                    runPropertiesA.AppendChild((Bold)bold.CloneNode(true));
                    run1.AppendChild(new Text(clientDetails.FamilyName + ", " + clientDetails.PartnerName));
                    tc1.Append(para);
                    //tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total for " + clientDetails.FamilyName + " , " + clientDetails.PartnerName))));

                    currentOverallTotal += currentTotal;
                    proposedOverallTotal += proposedTotal;
                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", currentTotal)))));




                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", proposedTotal - currentTotal)))));


                    TableCell tc4 = new TableCell();
                    TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                    tc4.Append(tcp2);
                    tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc4.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", proposedTotal)))));

                    tr.Append(tc1, tc2, tc3, tc4);

                    table.AppendChild(tr);
                }
            }
            //Joint
            if (commonJoint != null && (commonJoint.Any()))
            {
                if (clientDetails.MaritalStatus != "S")
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    tcp2.Append((TableCellBorders)tcbN.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Joint"))));


                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new Text(""))));




                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new Text(""))));


                    TableCell tc4 = new TableCell();
                    tc4.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc4.Append(new Paragraph(new Run(new Text(""))));

                    tr.Append(tc1, tc2, tc3, tc4);

                    table.AppendChild(tr);
                }

                decimal currentTotal = 0;
                decimal proposedTotal = 0;
                foreach (int propertytId in commonJoint)
                {
                    var current = (partnerCurrent ?? Enumerable.Empty<OriginalCF>()).Where(i => i.ProductId == propertytId).FirstOrDefault();
                    var proposed = (partnerProposed ?? Enumerable.Empty<PF>()).Where(i => i.productId == propertytId).FirstOrDefault();

                    if (current != null && (current.Product != ""))
                    {
                        TableRow tr = new TableRow();
                        TableCell tc1 = new TableCell();

                        TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                        tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                        tc1.Append((TableCellProperties)tcp.CloneNode(true));
                        tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(current.Product))));


                        TableCell tc2 = new TableCell();
                        tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                        tc2.Append(new Paragraph(new Run(new Text(""))));




                        TableCell tc3 = new TableCell();
                        tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                        tc3.Append(new Paragraph(new Run(new Text(""))));


                        TableCell tc4 = new TableCell();
                        tc4.Append((TableCellProperties)tcp1.CloneNode(true));
                        tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc4.Append(new Paragraph(new Run(new Text(""))));

                        tr.Append(tc1, tc2, tc3, tc4);

                        table.AppendChild(tr);


                    }
                    else
                    {
                        TableRow tr = new TableRow();
                        TableCell tc1 = new TableCell();

                        TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                        tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                        tc1.Append((TableCellProperties)tcp.CloneNode(true));
                        tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(proposed.product))));


                        TableCell tc2 = new TableCell();
                        tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                        tc2.Append(new Paragraph(new Run(new Text(""))));

                        TableCell tc3 = new TableCell();
                        tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                        tc3.Append(new Paragraph(new Run(new Text(""))));


                        TableCell tc4 = new TableCell();
                        tc4.Append((TableCellProperties)tcp1.CloneNode(true));
                        tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc4.Append(new Paragraph(new Run(new Text(""))));

                        tr.Append(tc1, tc2, tc3, tc4);

                        table.AppendChild(tr);

                    }

                    var commonFund = new List<string>();
                    if (current != null || proposed != null)
                    {
                        if (current != null && proposed != null)
                        {
                            commonFund = current.data.Select(s => s.Apircode).ToList().Union(proposed.data.Select(p => p.Apircode).ToList()).ToList();
                        }
                        else if (current == null)
                        {
                            commonFund = proposed.data.Select(p => p.Apircode).ToList();
                        }
                        else
                        {
                            commonFund = current.data.Select(p => p.Apircode).ToList();
                        }
                        foreach (string APIR in commonFund)
                        {

                            var currentFund = current == null ? null : (current.data ?? Enumerable.Empty<CurrentClientFundsViewModel>()).Where(i => i.Apircode == APIR).FirstOrDefault();
                            var proposedFund = proposed == null ? null : (proposed.data ?? Enumerable.Empty<ProposedClientFundsViewModel>()).Where(i => i.Apircode == APIR).FirstOrDefault();
                            if (currentFund != null && (currentFund.FundName != ""))
                            {
                                TableRow tr = new TableRow();
                                TableCell tc1 = new TableCell();

                                tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                                tc1.Append((TableCellProperties)tcp.CloneNode(true));
                                tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                                tc1.Append(new Paragraph(new Run(new RunProperties(), new Text(currentFund.FundName))));


                                TableCell tc2 = new TableCell();
                                tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                                tc2.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", currentFund.Value)))));




                                TableCell tc3 = new TableCell();
                                tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                                tc3.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", ((proposedFund == null ? 0 : proposedFund.Value) - currentFund.Value))))));


                                TableCell tc4 = new TableCell();
                                TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                                tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                                tc4.Append(tcp2);
                                tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc4.Append(new Paragraph(new Run(new Text(proposedFund == null ? "0" : String.Format("{0:n0}", proposedFund.Value)))));

                                tr.Append(tc1, tc2, tc3, tc4);

                                table.AppendChild(tr);


                            }
                            else
                            {
                                TableRow tr = new TableRow();
                                TableCell tc1 = new TableCell();

                                tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                                tc1.Append((TableCellProperties)tcp.CloneNode(true));
                                tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                                tc1.Append(new Paragraph(new Run(new RunProperties(), new Text(proposedFund.FundName))));


                                TableCell tc2 = new TableCell();
                                tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                                tc2.Append(new Paragraph(new Run(new Text(currentFund == null ? "0" : String.Format("{0:n0}", currentFund.Value)))));

                                TableCell tc3 = new TableCell();
                                tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                                tc3.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", (proposedFund.Value - (currentFund == null ? 0 : currentFund.Value)))))));


                                TableCell tc4 = new TableCell();
                                TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                                tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                                tc4.Append(tcp2);
                                tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                tc4.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", proposedFund.Value)))));

                                tr.Append(tc1, tc2, tc3, tc4);

                                table.AppendChild(tr);

                            }



                        }

                        // Sub Total
                        if (current != null || proposed != null)
                        {
                            TableRow tr = new TableRow();
                            TableCell tc1 = new TableCell();

                            tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                            tc1.Append((TableCellProperties)tcp.CloneNode(true));
                            tc1.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Sub Total"))));


                            TableCell tc2 = new TableCell();
                            tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                            tc2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", (current == null ? 0 : current.data.Sum(items => items.Value)))))));

                            currentTotal += current == null ? 0 : current.data.Sum(items => items.Value);
                           // currentOverallTotal += currentTotal;

                            TableCell tc3 = new TableCell();
                            tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                            tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", ((proposed == null ? 0 : proposed.data.Sum(items => items.Value))) - (current == null ? 0 : current.data.Sum(items => items.Value)))))));


                            TableCell tc4 = new TableCell();
                            TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                            tc4.Append(tcp2);
                            tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc4.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", (proposed == null ? 0 : proposed.data.Sum(items => items.Value)))))));

                            proposedTotal += proposed == null ? 0 : proposed.data.Sum(items => items.Value);
                           

                            tr.Append(tc1, tc2, tc3, tc4);

                            table.AppendChild(tr);
                        }


                    }
                }

                //Client Total
                if (commonJoint.Any())
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total for Joint"))));


                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", currentTotal)))));


                    currentOverallTotal += currentTotal;
                    proposedOverallTotal += proposedTotal;

                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", proposedTotal - currentTotal)))));


                    TableCell tc4 = new TableCell();
                    TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                    tc4.Append(tcp2);
                    tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc4.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", proposedTotal)))));

                    tr.Append(tc1, tc2, tc3, tc4);

                    table.AppendChild(tr);
                }
            }


            if (clientDetails.MaritalStatus == "M" && (commonPartner.Any() || commonJoint.Any()))
            {
                TableRow tr = new TableRow();
                TableCell tc1 = new TableCell();

                tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

               
                tc1.Append((TableCellProperties)tcp.CloneNode(true));
                tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total"))));
              

                TableCell tc2 = new TableCell();
                tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                tc2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", currentOverallTotal)))));




                TableCell tc3 = new TableCell();
                tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", proposedOverallTotal - currentOverallTotal)))));


                TableCell tc4 = new TableCell();
                TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "1000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                tc4.Append(tcp2);
                tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                tc4.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", proposedOverallTotal)))));

                tr.Append(tc1, tc2, tc3, tc4);

                table.AppendChild(tr);
            }


            Run linebreak = new Run(new Break());

            Paragraph paragraph = new Paragraph();
            paragraph.Append(new OpenXmlElement[] { linebreak });
            body.Append(paragraph);
        }

        public void AddProductCosts(Body body, PF[] proposedProducts, Color orange, BasicDetails clientDetails)
        {
            Color red = new Color() { Val = "FF0000" };


            Paragraph s1 = body.AppendChild(new Paragraph());
            Run r1 = s1.AppendChild(new Run());
            RunProperties runProperties1 = r1.AppendChild(new RunProperties());
            Color black = new Color() { Val = "000000" };
            runProperties1.AppendChild(black);
            r1.AppendChild(new Text("Various costs are also payable to product and service providers to cover expenses associated with buying and administering the product. These costs are shown in the tables below. Any costs based on a percentage may vary over time and, as such, the dollar amounts shown below should only be used as a guide."));

            Paragraph s2 = body.AppendChild(new Paragraph(new Run(new Text("We have provided an overview of the key product costs associated with our advice. It is important that you read the relevant Product Disclosure Statement to understand the full list of costs, how these costs are calculated and any special rules that apply."))));


            if (body != null)
            {

                //New Table

                Table table = body.AppendChild(new Table());
                TableProperties tableProp = new TableProperties();
                TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                tableProp.Append(tableStyle, tableWidth);
                table.AppendChild(tableProp);


                ////Header
                TableRow header = new TableRow();
                TableCell h1 = new TableCell();

                TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                ParagraphProperties hppLeft = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppCenter = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hppRight = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                hppCenter.AppendChild((Justification)centerJustify.CloneNode(true));

                Justification rightJustify = new Justification() { Val = JustificationValues.Right };
                hppRight.AppendChild((Justification)rightJustify.CloneNode(true));

                TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                hcp.Append(hcm1, hs1, hcb);
                //hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                h1.Append(hcp);

                h1.AppendChild((ParagraphProperties)hppLeft.CloneNode(true));
                h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Description"))));

                TableCell h2 = new TableCell();
                h2.AppendChild((ParagraphProperties)hppCenter.CloneNode(true));
                h2.Append((TableCellProperties)hcp.CloneNode(true));
                h2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Amount (%)"))));

                TableCell h3 = new TableCell();
                h3.AppendChild((ParagraphProperties)hppCenter.CloneNode(true));
                h3.Append((TableCellProperties)hcp.CloneNode(true));
                h3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Amount ($)"))));
                header.Append(h1, h2, h3);

                table.Append(header);
                //Body
                TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp2 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });

                pp2.AppendChild((Justification)rightJustify.CloneNode(true));
                pp.AppendChild((Justification)centerJustify.CloneNode(true));
                tcp.Append(tcbL, tcm);
                tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                decimal sum = 0;
                bool isVoyage = false;
                bool isInvestment = false;
                bool isSuper = false;
                bool isOnePathCFS = false;
                bool isGrowWrap = false;
                bool isGrowWrapASX = false;
                bool hasBrokerage = false;

               var clientList = new List<string>();
                var partnerList = new List<string>();
                var jointList = new List<string>();

                foreach (PF product in proposedProducts)
                {
                    PlatformViewModel platform = this.mapper.Map<IEnumerable<PlatformViewModel>>(from s in this.context.Product.AsEnumerable() join sa in this.context.Platform.AsEnumerable() on s.PlatformId equals sa.PlatformId where s.ProductId == product.productId select sa).FirstOrDefault();
                    ProductViewModel pro = this.mapper.Map<IEnumerable<ProductViewModel>>(this.context.Product.AsEnumerable().Where(m => (m.ProductId == product.productId))).FirstOrDefault();

                    if (platform.SubType.Trim() == "Voyage")
                    {
                        isVoyage = true;
                        if (pro.ProductType.Trim() == "Investment")
                        {
                            isInvestment = true;
                        }
                        else if (pro.ProductType.Trim() == "Super")
                        {
                            isSuper = true;
                        }

                        if (product.owner == "Client")
                        {
                            clientList.Add(platform.SubType);
                        }
                        else if (product.owner == "Partner")
                        {
                            partnerList.Add(platform.SubType);
                        }
                        else if (product.owner == "Joint")
                        {
                            jointList.Add(platform.SubType);
                        }
                    }
                    else if (platform.SubType.Trim() == "GrowWrap")
                    {
                        isGrowWrap = true;
                        foreach (ProposedClientFundsViewModel data in product.data)
                        {
                            
                            if (data.FeeLabel3 == "ASX" || data.FeeLabel4 == "ETF")
                            {
                                isGrowWrapASX = true;
                            }

                        }

                        if(product.owner == "Client")
                        {
                            clientList.Add(platform.SubType);
                        }
                        else if (product.owner == "Partner")
                        {
                            partnerList.Add(platform.SubType);
                        }
                        else if (product.owner == "Joint")
                        {
                            jointList.Add(platform.SubType);
                        }

                    }
                    else if (platform.SubType.Trim() == "CFS" || platform.SubType.Trim() == "OnePath")
                    {
                        isOnePathCFS = true;
                    }


                    if(platform.PlatformName == "MyNorth")
                    {
                        if (product.owner == "Client")
                        {
                            clientList.Add(platform.PlatformName);
                        }
                        else if (product.owner == "Partner")
                        {
                            partnerList.Add(platform.PlatformName);
                        }
                        else if (product.owner == "Joint")
                        {
                            jointList.Add(platform.PlatformName);
                        }
                    }
                    else if (platform.PlatformName == "North")
                    {
                        if (product.owner == "Client")
                        {
                            clientList.Add(platform.PlatformName);
                        }
                        else if (product.owner == "Partner")
                        {
                            partnerList.Add(platform.PlatformName);
                        }
                        else if (product.owner == "Joint")
                        {
                            jointList.Add(platform.PlatformName);
                        }
                    }

                    var maxVal = product.feeDisplay.Max(x => x.val);
                    if (maxVal != 0)
                    {
                        TableRow tr = new TableRow();
                        TableCell tc1 = new TableCell();

                        tc1.Append((TableCellProperties)tcpN.CloneNode(true));
                        tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        if (clientDetails.MaritalStatus == "M")
                        {
                            var owner = "";
                            if (product.owner == "Client")
                            {                            
                                owner = clientDetails.ClientName;
                            }
                            else if (product.owner == "Partner")
                            {                             
                                owner = clientDetails.PartnerName;
                            }
                            else if (product.owner == "Joint")
                            {
                                owner = "Joint";
                            }
                            tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(product.product + " - " + owner))));
                        }
                        else
                        {
                            tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(product.product))));
                        }

                        TableCell tc2 = new TableCell();
                        tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc2.Append((TableCellProperties)tcpN.CloneNode(true));
                        tc2.Append(new Paragraph(new Run(new Text(""))));



                        TableCell tc3 = new TableCell();
                        tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc3.Append((TableCellProperties)tcpN.CloneNode(true));
                        tc3.Append(new Paragraph(new Run(new Text(""))));

                        tr.Append(tc1, tc2, tc3);

                        table.AppendChild(tr);
                    }

                    var feeOrder = new List<string>();
                    feeOrder.Add("Indirect Cost Ratio (ICR)");
                    feeOrder.Add("Administration Fee");
                    feeOrder.Add("Membership Fee");
                    feeOrder.Add("Expense Recovery Fee");

                    var feeDetails = product.feeDisplay.OrderBy(d => feeOrder.IndexOf(d.name.Trim())).ToList();
                    foreach (ProductFeesDisplay pf in feeDetails)
                    {
                        if(pf.name == "Brokerage Fee" && pf.val > 0)
                        {
                            hasBrokerage = true;
                        }

                        if ((pf.val != 0 || pf.percentage != 0) && pf.feeType == "ongoing" && pf.name != "Gross On-going Costs")
                        {
                            TableRow tr = new TableRow();
                            TableCell tc1 = new TableCell();

                            tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)centerJustify.CloneNode(true));
                            tc1.Append((TableCellProperties)tcp.CloneNode(true));
                            tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            tc1.Append(new Paragraph(new Run(new Text(pf.name))));

                            TableCell tc2 = new TableCell();
                            tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                            if (pf.percentage == 0)
                            {
                                tc2.Append(new Paragraph(new Run(new Text("Fixed Fee"))));
                            }
                            else
                            {
                                tc2.Append(new Paragraph(new Run(new Text(String.Format("{0:n}", pf.percentage) + "%"))));
                            }



                            //tcpN.Append((TableCellBorders)tcbR.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));

                            TableCell tc3 = new TableCell();
                            tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc3.Append((TableCellProperties)tcpN.CloneNode(true));
                            tc3.Append(new Paragraph(new Run(new Text(String.Format("{0:n0}", pf.val)))));

                            tr.Append(tc1, tc2, tc3);

                            table.AppendChild(tr);

                            sum += pf.val;
                        }
                    }



                }

                if (sum != 0)
                {
                    TableRow tr = new TableRow();
                    TableCell tc1 = new TableCell();

                    tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)centerJustify.CloneNode(true));
                    tc1.Append((TableCellProperties)tcp.CloneNode(true));
                    tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total"))));

                    TableCell tc2 = new TableCell();
                    tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                    tc2.Append(new Paragraph(new Run(new Text(""))));


                    TableCell tc3 = new TableCell();
                    tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                    tc3.Append((TableCellProperties)tcpN.CloneNode(true));
                    tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", sum)))));

                    tr.Append(tc1, tc2, tc3);

                    table.AppendChild(tr);
                }

                Run linebreak = new Run(new Break());
                Paragraph productCost = new Paragraph();
                productCost.Append(new OpenXmlElement[] { (Run)linebreak.CloneNode(true), new Run(new RunProperties(new Bold()), new Text("Please note the following: ")) });
                body.Append(productCost);


                //ICR
                if (proposedProducts.Length != 0)
                {
                    Paragraph commentary = new Paragraph(new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })), new Run(new RunProperties(), new Text("The")));
                    commentary.Append(new Run(new RunProperties(new Bold()), new Text { Text = " Indirect Cost Ratio (ICR) ", Space = SpaceProcessingModeValues.Preserve }));
                    commentary.Append(new Run(new RunProperties(), new Text { Text = "measures the total indirect costs of managing an investment fund. It is an estimated cost which is subject to change, and which varies for different investments. The figure shown in the table above is an aggregate of your investment ICRs which is intended to provide you with a standardised way to measure and compare costs. A full breakdown of the ICRs that applies to each of your investments is contained in the relevant PDS.", Space = SpaceProcessingModeValues.Preserve }));
                    body.Append(commentary);

                    Paragraph commentary1 = new Paragraph(new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })), new Run(new RunProperties(), new Text("In addition to the above costs, a")));
                    commentary1.Append(new Run(new RunProperties(new Bold()), new Text { Text = " buy/sell spread ", Space = SpaceProcessingModeValues.Preserve }));
                    commentary1.Append(new Run(new RunProperties(), new Text { Text = "may apply when units in a managed fund are purchased or sold. Typically, the buy/sell spread is 0.2% to 0.5% (e.g. on a purchase of $10,000 this may range from $20 to $50). This fee is reflected in the unit price of your investment.", Space = SpaceProcessingModeValues.Preserve }));
                    body.Append(commentary1);


                    //TODO : temporary
                    if (hasBrokerage == true)
                    {
                        Paragraph commentary2 = new Paragraph(new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })), new Run(new RunProperties(), new Text("A")));
                        commentary2.Append(new Run(new RunProperties(new Bold()), new Text { Text = " brokerage fee ", Space = SpaceProcessingModeValues.Preserve }));
                        commentary2.Append(new Run(new RunProperties(), new Text { Text = "equal to ", Space = SpaceProcessingModeValues.Preserve }));
                        commentary2.Append(new Run(new RunProperties((Color)red.CloneNode(true)), new Text { Text = "xx", Space = SpaceProcessingModeValues.Preserve }));
                        commentary2.Append(new Run(new RunProperties(), new Text { Text = "% of the trade value or a minimum of $", Space = SpaceProcessingModeValues.Preserve }));
                        commentary2.Append(new Run(new RunProperties((Color)red.CloneNode(true)), new Text { Text = "xx ", Space = SpaceProcessingModeValues.Preserve }));
                        commentary2.Append(new Run(new RunProperties(), new Text { Text = "is applicable.", Space = SpaceProcessingModeValues.Preserve }));

                        body.Append(commentary2);

                        Paragraph commentary3 = new Paragraph(new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })), new Run(new RunProperties(new Bold(), (Color)red.CloneNode(true)), new Text("E*TRADE Brokerage")));
                        commentary3.Append(new Run(new RunProperties(new Bold()), new Text { Text = " Brokerage costs ", Space = SpaceProcessingModeValues.Preserve }));
                        commentary3.Append(new Run(new RunProperties(), new Text { Text = "of 0.11% will be charged for transacting listed securities within the E*TRADE platform.  Please refer to the Product Disclosure Statement for more details on transaction fees. ", Space = SpaceProcessingModeValues.Preserve }));
                        body.Append(commentary3);
                    }

                    if (isVoyage == true)
                    {
                        Paragraph commentary4 = new Paragraph(new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })), new Run(new RunProperties(new Bold(), (Color)red.CloneNode(true)), new Text("Voyage platform")));
                        commentary4.Append(new Run(new RunProperties(new Bold()), new Text { Text = " Brokerage costs ", Space = SpaceProcessingModeValues.Preserve }));
                        commentary4.Append(new Run(new RunProperties(), new Text { Text = "of 0.10% (minimum charge of $29 per trade) will be charged for transacting listed securities within the Voyage platform.  Please refer to the Product Disclosure Statement for more details on transaction fees. ", Space = SpaceProcessingModeValues.Preserve }));
                        body.Append(commentary4);
                    }
                }

                if (isVoyage == true)
                {
                    Paragraph commentary1 = new Paragraph(new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })), new Run(new RunProperties(new Bold()), new Text("Switching costs")));
                    commentary1.Append(new Run(new RunProperties(), new Text { Text = " apply for managed funds and term deposit transactions within the recommended Voyage platform. You can elect to pay an unlimited switching fee of $199.92 per annum, or to pay switching fees of $29 per transaction.  ", Space = SpaceProcessingModeValues.Preserve }));
                    body.Append(commentary1);
                }

                if (isInvestment == true)
                {
                    Paragraph commentary = new Paragraph(new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })), new Run(new RunProperties(new Bold()), new Text("In-specie transfer fees")));
                    commentary.Append(new Run(new RunProperties(), new Text { Text = " of $61.50 per asset is charged for managed investments and listed security transfers both when transferring assets into or out of the Voyage Investment Service. Please refer to the Product Disclosure Statement for more details.", Space = SpaceProcessingModeValues.Preserve }));
                    body.Append(commentary);

                }

                if (isSuper == true)
                {
                    Paragraph commentary = new Paragraph(new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })), new Run(new RunProperties(new Bold()), new Text("In-specie transfer fees")));
                    commentary.Append(new Run(new RunProperties(), new Text { Text = " of $25.63 per asset is charged for listed security transfers when transferring assets into the Voyage Super. Stamp duty may be payable on the managed investments transferred into the Trust which will be deducted from your Cash Account once the transfer is complete. Please refer to the Product Disclosure Statement for more details.", Space = SpaceProcessingModeValues.Preserve }));
                    body.Append(commentary);

                }
                if (isOnePathCFS == true)
                {
                    Paragraph commentary = new Paragraph(new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })), new Run(new RunProperties(), new Text("Depending on your balance and the funds you are invested in, you may be entitled to rebates which reduce your ongoing fees. Please refer to the PDS for more information.")));
                    body.Append(commentary);
                }
                if (isGrowWrap == true)
                {
                    Paragraph commentary = new Paragraph(new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })), new Run(new RunProperties(), new Text("The Administration Fee above for Grow Wrap includes the 0.05% discount whilst you are a client of an RI Advice Group adviser. Please refer to the PDS for more information.")));
                    body.Append(commentary);
                }

                clientList = clientList.Distinct().ToList();
                partnerList = partnerList.Distinct().ToList();
                jointList = jointList.Distinct().ToList();

                //TODO : client & partner
                if ((clientList.Count > 0 && partnerList.Count > 0 ) || jointList.Count > 0)
                {
                    var val = "";
                    var listOfLists = new List<List<string>>() { clientList, partnerList, jointList };
                    var intersection = listOfLists.Aggregate((previousList, nextList) => previousList.Intersect(nextList).ToList());

                    int i = 0;
                    foreach(string s in intersection)
                    {
                        if(i == 0)
                        {
                            val += s;
                        }
                        else 
                        {
                            val += " / " + s;
                        }
                    }

                    Paragraph commentary = new Paragraph(new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })), new Run(new RunProperties(), new Text { Text = "We have recommended you both invest in the same product provider" + val + " which will enable you to receive the â€˜family discountâ€™, thereby reducing your ongoing administration fee.", Space = SpaceProcessingModeValues.Preserve }));
                    body.Append(commentary);
                }
                else if (clientList.Count > 0)
                {
                    var val = "";
                    int i = 0;
                    foreach (string s in clientList)
                    {
                        if (i == 0)
                        {
                            val += s;
                        }
                        else
                        {
                            val += " / " + s;
                        }
                    }
                    Paragraph commentary = new Paragraph(new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })), new Run(new RunProperties(), new Text { Text = "We have recommended " + clientDetails.ClientName +" invest in the same product provider " + val + " which will enable you to receive the â€˜family discountâ€™, thereby reducing your ongoing administration fee.", Space = SpaceProcessingModeValues.Preserve }));
                    body.Append(commentary);
                }
                else if (partnerList.Count > 0)
                {
                    var val = "";
                    int i = 0;
                    foreach (string s in partnerList)
                    {
                        if (i == 0)
                        {
                            val += s;
                        }
                        else
                        {
                            val += " / " + s;
                        }
                    }
                    Paragraph commentary = new Paragraph(new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })), new Run(new RunProperties(), new Text { Text = "We have recommended " + clientDetails.PartnerName + " invest in the same product provider " + val + " which will enable you to receive the â€˜family discountâ€™, thereby reducing your ongoing administration fee.", Space = SpaceProcessingModeValues.Preserve }));
                    body.Append(commentary);
                }
               

                if (isGrowWrapASX == true)
                {
                    Paragraph commentary = new Paragraph(new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })), new Run(new RunProperties(), new Text("A listed securities transaction fee of $10.25 per transaction applies on buying and selling listed securities within the Grow Wrap platform.")));
                    body.Append(commentary);
                }
                if (isGrowWrapASX == true)
                {
                    Paragraph commentary = new Paragraph(new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })), new Run(new RunProperties(), new Text("A managed fund/term deposit transaction fee of $20.50 per transaction applies on buying and selling managed funds/term deposits within the Grow Wrap platform.")));
                    body.Append(commentary);
                }
                if (isGrowWrapASX == true)
                {
                    Paragraph commentary = new Paragraph(new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })), new Run(new RunProperties(), new Text("A brokerage fee equal to 0.12% will apply on all listed security transactions. Note, a minimum fee of $30 and a maximum fee of $100 applies on each transaction.")));
                    body.Append(commentary);
                }

              

            }


            Run linebreak2 = new Run(new Break());
            Paragraph paragraph1 = new Paragraph();
            paragraph1.Append(new OpenXmlElement[] { linebreak2 });
            body.Append(paragraph1);
        }

        public void AddProposedAllocation (Body body, AssetDetails[] details,Color orange,string riskProfile,string type,PF[] proposedAssets,BasicDetails clientDetails)
        {
            Color red = new Color() { Val = "FF0000" };

            if (details.Length > 0)
            {
                var owner = "";
                var proposedAssetsDetails = new PF[] { };
                if (type == "C")
                {
                    proposedAssetsDetails = proposedAssets.Where(c => c.owner == "Client").ToArray();
                    owner = clientDetails.ClientName;
                }
                else if (type == "P")
                {
                    proposedAssetsDetails = proposedAssets.Where(c => c.owner == "Partner").ToArray();
                    owner = clientDetails.PartnerName;
                }
                else if (type == "J")
                {
                    proposedAssetsDetails = proposedAssets.Where(c => c.owner == "Joint").ToArray();
                    owner = "Joint";
                }

              


                Paragraph break3 = new Paragraph(new Run(new Break() { Type = BreakValues.Page }));
                body.Append(break3);


                Paragraph selectedProduct = body.AppendChild(new Paragraph());
                Run r = selectedProduct.AppendChild(new Run());
                RunProperties runProperties = r.AppendChild(new RunProperties(new Bold(), new RunFonts { Ascii = "Verdana" }, new FontSize { Val = new StringValue("20") }));
               // runProperties.AppendChild(orange.CloneNode(true));

                var productNames = "";
                var i = 1;
                foreach(PF pf in proposedAssetsDetails)
                {
                   
                    if (i == 1)
                    {
                        if (clientDetails.MaritalStatus == "M")
                        {
                            productNames += "" + pf.product + " (" + owner + ") ";
                        }
                        else
                        {
                            productNames += "" + pf.product + " ";
                        }
                    }
                    else if ( i == proposedAssetsDetails.Length)
                    {
                        if (clientDetails.MaritalStatus == "M")
                        {
                            productNames += "& " + pf.product + " (" + owner + ") ";
                        }
                        else
                        {
                            productNames += "& " + pf.product + " ";
                        }
                    }
                    else
                    {
                        if (clientDetails.MaritalStatus == "M")
                        {
                            productNames += ", " + pf.product + " (" + owner + ") ";
                        }
                        else
                        {
                            productNames += ", " + pf.product + " ";
                        }
                    }
                    i++;
                }

                r.AppendChild(new Text("Proposed asset allocation - " + productNames));
               
                Paragraph s1 = body.AppendChild(new Paragraph());
                Run r1 = s1.AppendChild(new Run());
                RunProperties runProperties1 = r1.AppendChild(new RunProperties());
                Color black = new Color() { Val = "000000" };
                runProperties1.AppendChild(black);
                r1.AppendChild(new Text("The following chart provides an illustration of your asset allocation after the recommended changes to your portfolio are implemented."));



                //New Table

                Table table = body.AppendChild(new Table());
                TableProperties tableProp = new TableProperties();
                TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                tableProp.Append(tableStyle, tableWidth);
                table.AppendChild(tableProp);


                ////Header
                TableRow header = new TableRow();
                TableCell h1 = new TableCell();

                TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties hpp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                Justification rightJustify = new Justification() { Val = JustificationValues.Right };
                hpp1.AppendChild((Justification)rightJustify.CloneNode(true));

                TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                hcp.Append(hcm1, hs1, hcb);
                hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                h1.Append(hcp);

                h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Asset Class"))));

                TableCell h2 = new TableCell();
                h2.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                h2.Append((TableCellProperties)hcp1.CloneNode(true));
                h2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Current Weight"))));

                TableCell h3 = new TableCell();
                h3.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                h3.Append((TableCellProperties)hcp1.CloneNode(true));
                h3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Target Weight"))));

                TableCell h4 = new TableCell();
                h4.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                h4.Append((TableCellProperties)hcp1.CloneNode(true));
                h4.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed Weight"))));

                TableCell h5 = new TableCell();
                h5.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                h5.Append((TableCellProperties)hcp1.CloneNode(true));
                h5.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Variance"))));
                header.Append(h1, h2, h3, h4, h5);

                table.Append(header);
                //Body

                TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                pp.AppendChild((Justification)rightJustify.CloneNode(true));
                tcp.Append(tcbL, tcm);
                tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                TableRow defAsset = new TableRow();
                TableCell dCell = new TableCell();
                dCell.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                dCell.Append((TableCellProperties)tcpN.CloneNode(true));
                dCell.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Defensive Assets"))));
                defAsset.Append(dCell);
                table.AppendChild(defAsset);

                foreach (AssetDetails ad in details)
                {
                    if (!(ad.current == 0 && ad.target == 0 && ad.proposed == 0))
                    {
                        TableRow tr = new TableRow();
                        TableCell tc1 = new TableCell();

                        tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                        tc1.Append((TableCellProperties)tcp.CloneNode(true));
                        if (ad.name == "Total Defensive" || ad.name == "Total Growth")
                        {
                            tc1.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(ad.name))));
                        }
                        else
                        {
                            tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            tc1.Append(new Paragraph(new Run(new Text(ad.name))));
                        }

                        TableCell tc2 = new TableCell();
                        tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                        if (ad.name == "Total Defensive" || ad.name == "Total Growth")
                        {
                            tc2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(ad.current.ToString() + "%"))));
                        }
                        else
                        {
                            tc2.Append(new Paragraph(new Run(new Text(ad.current.ToString() + "%"))));
                        }



                        TableCell tc3 = new TableCell();
                        tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                        if (ad.name == "Total Defensive" || ad.name == "Total Growth")
                        {
                            tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(ad.target.ToString() + "%"))));
                        }
                        else
                        {
                            tc3.Append(new Paragraph(new Run(new Text(ad.target.ToString() + "%"))));
                        }



                        TableCell tc4 = new TableCell();
                        tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc4.Append((TableCellProperties)tcp1.CloneNode(true));
                        if (ad.name == "Total Defensive" || ad.name == "Total Growth")
                        {
                            tc4.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(ad.proposed.ToString() + "%"))));
                        }
                        else
                        {
                            tc4.Append(new Paragraph(new Run(new Text(ad.proposed.ToString() + "%"))));
                        }



                        TableCell tc5 = new TableCell();
                        TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "750", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                        tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                        tc5.Append(tcp2);
                        if (ad.name == "Total Defensive" || ad.name == "Total Growth")
                        {
                            tc5.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc5.Append(new Paragraph(new Run(new Text(""))));
                        }
                        else
                        {
                            tc5.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc5.Append(new Paragraph(new Run(new Text((ad.proposed - ad.target).ToString() + "%"))));
                        }
                        tr.Append(tc1, tc2, tc3, tc4, tc5);

                        table.AppendChild(tr);

                        if (ad.name == "Total Defensive")
                        {
                            TableRow growthAsset = new TableRow();
                            TableCell gaCell = new TableCell();
                            gaCell.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            gaCell.Append((TableCellProperties)tcpN.CloneNode(true));
                            gaCell.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Growth Assets"))));
                            growthAsset.Append(gaCell);
                            table.AppendChild(growthAsset);
                        }

                    }

                }
            }

            Run linebreak = new Run(new Break());
            Run linebreak1 = new Run(new Break());
            Run linebreak2 = new Run(new Break());
            Paragraph paragraph = new Paragraph();
            paragraph.Append(new OpenXmlElement[] { linebreak, linebreak1, linebreak2 });
            body.Append(paragraph);


            if (details.Length > 0)
            {

                //New Table

                Table table = body.AppendChild(new Table());
                TableProperties tableProp = new TableProperties();
                TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                tableProp.Append(tableStyle, tableWidth);
                table.AppendChild(tableProp);


                ////Header
                TableRow header = new TableRow();
                TableCell h1 = new TableCell();

                TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                ParagraphProperties hpp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                Justification rightJustify = new Justification() { Val = JustificationValues.Right };
                hpp1.AppendChild((Justification)rightJustify.CloneNode(true));

                TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                hcp.Append(hcm1, hs1, hcb);
                hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                h1.Append(hcp);
                h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Asset Class"))));

                TableCell h2 = new TableCell();
                h2.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                h2.Append((TableCellProperties)hcp1.CloneNode(true));
                h2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Current Weight"))));

                TableCell h3 = new TableCell();
                h3.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                h3.Append((TableCellProperties)hcp1.CloneNode(true));
                h3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed Weight"))));

                TableCell h4 = new TableCell();
                h4.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                h4.Append((TableCellProperties)hcp1.CloneNode(true));
                h4.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Target Min"))));

                TableCell h5 = new TableCell();
                h5.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                h5.Append((TableCellProperties)hcp1.CloneNode(true));
                h5.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Target Max"))));
                header.Append(h1, h2, h3, h4, h5);

                table.Append(header);
                //Body

                TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });
                ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "0" });

                pp.AppendChild((Justification)rightJustify.CloneNode(true));
                tcp.Append(tcbL, tcm);
                tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                TableRow defAsset = new TableRow();
                TableCell dCell = new TableCell();
                dCell.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                dCell.Append((TableCellProperties)tcpN.CloneNode(true));
                dCell.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Defensive Assets"))));
                defAsset.Append(dCell);
                table.AppendChild(defAsset);

                foreach (AssetDetails ad in details)
                {
                    if (!(ad.current == 0 && ad.targetmin == 0 && ad.targetmax == 0 && ad.proposed == 0))
                    {
                        TableRow tr = new TableRow();
                        TableCell tc1 = new TableCell();



                        tcp1.Append((TableCellBorders)tcbL.CloneNode(true), (TableCellMargin)tcm.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                        tc1.Append((TableCellProperties)tcp.CloneNode(true));
                        if (ad.name == "Total Defensive" || ad.name == "Total Growth")
                        {
                            tc1.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(ad.name))));
                        }
                        else
                        {
                            tc1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            tc1.Append(new Paragraph(new Run(new Text(ad.name))));
                        }

                        TableCell tc2 = new TableCell();
                        tc2.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc2.Append((TableCellProperties)tcp1.CloneNode(true));
                        if (ad.name == "Total Defensive" || ad.name == "Total Growth")
                        {
                            tc2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(ad.current.ToString() + "%"))));
                        }
                        else
                        {
                            tc2.Append(new Paragraph(new Run(new Text(ad.current.ToString() + "%"))));
                        }



                        TableCell tc3 = new TableCell();
                        tc3.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc3.Append((TableCellProperties)tcp1.CloneNode(true));
                        if (ad.name == "Total Defensive" || ad.name == "Total Growth")
                        {
                            tc3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(ad.proposed.ToString() + "%"))));
                        }
                        else
                        {
                            tc3.Append(new Paragraph(new Run(new Text(ad.proposed.ToString() + "%"))));
                        }



                        TableCell tc4 = new TableCell();
                        tc4.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        tc4.Append((TableCellProperties)tcp1.CloneNode(true));
                        if (ad.name == "Total Defensive" || ad.name == "Total Growth")
                        {
                            tc4.Append(new Paragraph(new Run(new Text(""))));
                        }
                        else
                        {
                            tc4.Append(new Paragraph(new Run(new Text(ad.targetmin.ToString() + "%"))));
                        }



                        TableCell tc5 = new TableCell();
                        TableCellProperties tcp2 = new TableCellProperties(new TableCellWidth { Width = "750", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                        tcp2.Append((TableCellBorders)tcbR.CloneNode(true), (Justification)rightJustify.CloneNode(true));
                        tc5.Append(tcp2);
                        if (ad.name == "Total Defensive" || ad.name == "Total Growth")
                        {
                            tc5.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc5.Append(new Paragraph(new Run(new Text(""))));
                        }
                        else
                        {
                            tc5.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            tc5.Append(new Paragraph(new Run(new Text(ad.targetmax.ToString() + "%"))));
                        }
                        tr.Append(tc1, tc2, tc3, tc4, tc5);

                        table.AppendChild(tr);

                        if (ad.name == "Total Defensive")
                        {
                            TableRow growthAsset = new TableRow();
                            TableCell gaCell = new TableCell();
                            gaCell.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            gaCell.Append((TableCellProperties)tcpN.CloneNode(true));
                            gaCell.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Growth Assets"))));
                            growthAsset.Append(gaCell);
                            table.AppendChild(growthAsset);
                        }
                    }
                }

             
                Paragraph blank = new Paragraph();
                blank.Append(new OpenXmlElement[] { (Run)linebreak.CloneNode(true) });
                body.Append(blank);


                Paragraph highComplianceRisk = new Paragraph();
                body.Append(highComplianceRisk);

               

                Paragraph assetAllocation = new Paragraph();
                ParagraphProperties assetAllocationPr = new ParagraphProperties();
                Justification justification1 = new Justification() { Val = JustificationValues.Left };
                assetAllocationPr.Append(justification1);
                assetAllocation.Append(assetAllocationPr);

                assetAllocation.Append(new OpenXmlElement[] { (Run)linebreak.CloneNode(true), new Run(new RunProperties(new Bold(),new FontSize{ Val="20" }, (Color)orange.CloneNode(true)), new Text("Asset allocation commentary"))});
                //, (Run)linebreak.CloneNode(true)
                body.Append(assetAllocation);



                if ((findVal(details, "Total Growth").proposed) >= (findVal(details, "Total Growth").targetmin) && (findVal(details, "Total Growth").proposed) <= (findVal(details, "Total Growth").targetmax))
                {
                    //new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })),
                    Paragraph commentary = new Paragraph(new ParagraphProperties( new Run(new RunProperties(), new Text("The recommended portfolio provides you with a diversified portfolio that is appropriate for your " + riskProfile.ToString().Trim() +" risk profile."))));
                    body.Append(commentary);
                }
                else
                {
                    var val = "";
                    if((findVal(details, "Total Growth").proposed) > (findVal(details, "Total Growth").targetmax))
                    {
                        val = "growth";
                    }
                    else if ((findVal(details, "Total Defensive").proposed) > (findVal(details, "Total Defensive").targetmax))
                    {
                        val = "defensive";
                    }
                    //new ParagraphProperties(new ParagraphStyleId() { Val = "ListParagraph" }, new NumberingProperties(new NumberingLevelReference() { Val = 0 }, new NumberingId() { Val = 1 })),
                    Paragraph commentary = new Paragraph( new Run(new RunProperties(), new Text("The recommended portfolio has an overweight allocation to " + val + " for your investor risk profile. This is due to your investment in the  ")));
                    commentary.Append(new Run(new RunProperties((Color)red.CloneNode(true)), new Text { Text = " [recommended Name of Investment].", Space = SpaceProcessingModeValues.Preserve }));
                    body.Append(commentary);
                }

                if (details.Length > 0)
                {
                    var growth = "";
                    var defensive = "";

                    if((findVal(details, "International Equity").proposed) > 0 || (findVal(details, "Domestic Equity").proposed) > 0)
                    {
                        growth += "shares";
                    }
                    if ((findVal(details, "International Property").proposed) > 0 || (findVal(details, "Domestic Property").proposed) > 0)
                    {
                        if (growth == "")
                        {
                            growth += "property";
                        }
                        else if ((findVal(details, "Growth Alternatives").proposed) == 0)
                        {
                            growth += " and property";
                        }
                        else
                        {
                            growth += ", property";
                        }
                    }
                    if ((findVal(details, "Growth Alternatives").proposed) > 0 )
                    {
                        if (growth == "")
                        {
                            growth += "growth alternatives";
                        }
                        else
                        {
                            growth += " and growth alternatives ";
                        }
                       
                    }


                    if ((findVal(details, "International Cash").proposed) > 0 || (findVal(details, "Domestic Cash").proposed) > 0)
                    {
                        defensive += "cash";
                    }
                    if ((findVal(details, "International Fixed Interest").proposed) > 0 || (findVal(details, "Domestic Fixed Interest").proposed) > 0)
                    {
                        if (defensive == "")
                        {
                            defensive += "fixed interest";
                        }
                        else if ((findVal(details, "Defensive Alternatives").proposed) == 0)
                        {
                            defensive += " and fixed interest";
                        }
                        else
                        {
                            defensive += ", fixed interest";
                        }
                    }
                    if ((findVal(details, "Defensive Alternatives").proposed) > 0)
                    {
                        if (defensive == "")
                        {
                            defensive += "defensive alternatives";
                        }
                        else
                        {
                            defensive += " and defensive alternatives ";
                        }

                    }
                    Paragraph commentary = new Paragraph(new Run(new RunProperties(), new Text("Approximately " + (int)(Math.Round(findVal(details, "Total Growth").proposed)) + "% of the portfolio is allocated to")));
                    commentary.Append(new Run(new RunProperties(new Bold()), new Text { Text = " growth assets ", Space = SpaceProcessingModeValues.Preserve }));
                    if (growth != "")
                    {
                        commentary.Append(new Run(new RunProperties(), new Text { Text = "(i.e. " + growth + ") ", Space = SpaceProcessingModeValues.Preserve }));
                    }
                    commentary.Append(new Run(new RunProperties(), new Text { Text = "which provide potential for capital gains over the long-term.  The remaining", Space = SpaceProcessingModeValues.Preserve }));
                    commentary.Append(new Run(new RunProperties(), new Text { Text = " " + (int)(Math.Round(findVal(details, "Total Defensive").proposed)) + "% is held in", Space = SpaceProcessingModeValues.Preserve }));
                    commentary.Append(new Run(new RunProperties(new Bold()), new Text { Text = " defensive assets ", Space = SpaceProcessingModeValues.Preserve }));
                    if (defensive != "")
                    {
                        commentary.Append(new Run(new RunProperties(), new Text { Text = "(i.e. " + defensive + "). ", Space = SpaceProcessingModeValues.Preserve }));
                    }
                    if (((findVal(details, "Total Growth").proposed) < (findVal(details, "Total Growth").targetmin)) || ((findVal(details, "Total Growth").proposed) > (findVal(details, "Total Growth").targetmax)))
                    {
                        commentary.Append(new Run(new RunProperties(), new Text("As a guide, a " + riskProfile.ToString().Trim() + " investment portfolio would typically hold a maximum of " + (int)(findVal(details, "Total Growth").target) + " % in growth assets and a minimum of " + (int)(findVal(details, "Total Defensive").targetmin) + "% in defensive assets.")));
                    }

                       
                    body.Append(commentary);
                }

                    //Deviation due to specific fund
                    if (details.Length > 0)
                {
                    bool isBetween = true;
                    bool totalisBetween = true;
                    bool isVariance = false;
                    var exceeds = "";
                    var lower = "";
                    var variance = "";
                    foreach (AssetDetails ad in details)
                    {
                        if (ad.name != "Total Defensive" || ad.name != "Total Growth")
                        {
                            if (ad.proposed < ad.targetmin || ad.proposed > ad.targetmax)
                            {
                                isBetween = false;
                                if(ad.proposed < ad.targetmin)
                                {
                                    lower += ", " + ad.name + "";
                                }
                                if (ad.proposed > ad.targetmax)
                                {
                                    exceeds += ", " + ad.name + "";
                                }
                            }

                            if(Math.Abs(ad.proposed - ad.target) > 10)
                            {
                                isVariance = true;
                                variance += ", " + ad.name + "";
                            }
                        }
                        else
                        {
                            if(ad.proposed < ad.targetmin || ad.proposed > ad.targetmax)
                            {
                                totalisBetween = false;
                            }
                        }
                    }

                    //If Min/Max aligned
                    if (isBetween == true)
                    {
                        Paragraph commentary = new Paragraph( new Run(new RunProperties(), new Text("The proposed allocation of your investments is within our recommended minimum and maximum allocation for each asset class, with regards to your risk profile.")));
                        body.Append(commentary);
                    }

                    //If variance is over 10%
                    if(isBetween == true && totalisBetween == true && isVariance == true)
                    {
                        GenerateAlternateContentChoice(highComplianceRisk);

                        Paragraph commentary = new Paragraph(new Run(new RunProperties(), new Text("Although specific asset classes (e.g. ")));
                        if (variance != "")
                        {
                            commentary.Append(new Run(new RunProperties(), new Text { Text = " " + variance.Remove(0, 1) + " ", Space = SpaceProcessingModeValues.Preserve }));
                        }
                            commentary.Append(new Run(new RunProperties(), new Text { Text = " ) are outside our 10% tolerance of the target, the proposed allocation of your investments aligns with our recommended minimum and maximum allocation for each asset class, and the overall growth vs defensive asset allocation is in line with your " + riskProfile.ToString().Trim() + " investor risk profile.", Space = SpaceProcessingModeValues.Preserve }));
                      
                        body.Append(commentary);
                    }
                 
                        //If Min/Max not aligned , but growth/defensive is okay
                        if (isBetween == false && totalisBetween == true)
                    {
                        if (isBetween == true && totalisBetween == true && isVariance == true)
                        {

                        }
                        else
                        {
                            GenerateAlternateContentChoice(highComplianceRisk);
                        }

                        Paragraph commentary = new Paragraph(new Run(new RunProperties(), new Text("The proposed allocation of your investments does not align with some of our recommended minimum and maximum allocations; however, the overall growth vs defensive asset allocation is in line with your investor risk profile.")));
                        if (exceeds != "")
                        {
                            commentary.Append(new Run(new RunProperties(), new Text { Text = " Your allocation is [e.g. overweight in  " + exceeds.Remove(0, 1) + " ", Space = SpaceProcessingModeValues.Preserve }));
                        }
                        if (lower != "")
                        {
                            commentary.Append(new Run(new RunProperties(), new Text { Text = "while being underweight in " + lower.Remove(0, 1) + " ", Space = SpaceProcessingModeValues.Preserve }));
                            commentary.Append(new Run(new RunProperties((Color)red.CloneNode(true)), new Text("[state reason for deviation]")));
                        }
                            body.Append(commentary);
                    }

                    //Deviation due to specific fund
                    if (isBetween == false)
                    {
                        Paragraph commentary = new Paragraph( new Run(new RunProperties(), new Text("The proposed allocation of your investments deviates from your long-term strategic asset allocation due to the inclusion of the")));
                        commentary.Append(new Run(new RunProperties((Color)red.CloneNode(true)), new Text { Text = " [Name of fund] ", Space = SpaceProcessingModeValues.Preserve }));
                        commentary.Append(new Run(new RunProperties(), new Text("in your portfolio. The manager of this fund has the ability to increase and decrease the level of risk within their portfolio, effectively varying the exposure to cash and growth assets held by the Fund. Although this results in the short to medium term deviation away from your strategic asset allocation, we believe that over the long term the manager's ability to vary the risk profile will add value to your overall portfolio.")));

                        body.Append(commentary);
                    }
                }
               
                //Overweight in cash due to liquidity needs
                if (((findVal(details, "Domestic Cash").proposed) > (findVal(details, "Domestic Cash").targetmax)) || ((findVal(details, "International Cash").proposed) > (findVal(details, "International Cash").targetmax)))
                {
                    Paragraph commentary = new Paragraph(new Run(new RunProperties(), new Text("The recommended portfolio has an ")));
                    commentary.Append(new Run(new RunProperties(new Bold()), new Text { Text = " overweight allocation " , Space = SpaceProcessingModeValues.Preserve }));
                    commentary.Append(new Run(new RunProperties(), new Text { Text = "to defensive assets for your investor risk profile. This is a tactical allocation to enable you to cover short term cash requirements such as ", Space = SpaceProcessingModeValues.Preserve }));
                    commentary.Append(new Run(new RunProperties((Color)red.CloneNode(true)), new Text(" [fees and charges/insurance premiums/pension payments for the next XX years/other].")));
                    body.Append(commentary);
                }

                //If client holds alternative assets
                if ((findVal(details, "Defensive Alternatives").proposed) > 0 || ((findVal(details, "Growth Alternatives").proposed) > 0))
                {
                    Paragraph commentary = new Paragraph(new Run(new RunProperties(), new Text("Alternative assets")));
                    commentary.Append(new Run(new RunProperties(new Text { Text = " are assets that behave differently to the traditional asset classes of cash, equity and property. The term â€˜alternative assetsâ€™ is highly flexible and could include investments such as hedge funds, structured credit, unlisted real estate and unlisted infrastructure, for example. Some alternative assets are classified as growth and some are defensive. ", Space = SpaceProcessingModeValues.Preserve })));
                    body.Append(commentary);
                }

                //Global Fixed Income
                if ((findVal(details, "International Fixed Interest").proposed) > (findVal(details, "International Fixed Interest").targetmax))
                {
                    Paragraph commentary = new Paragraph(new Run(new RunProperties(), new Text("We note that your asset allocation shows an overweight allocation to â€˜Global Fixed Incomeâ€™ through your investments in ")));
                    commentary.Append(new Run(new RunProperties((Color)red.CloneNode(true)), new Text { Text = " [name of investments invested in global fixed income]", Space = SpaceProcessingModeValues.Preserve }));
                    commentary.Append(new Run(new RunProperties(), new Text(". These funds provide exposure to an actively managed portfolio of fixed income and credit securities across Australian and global markets. This means that from time to time, your portfolio may have varying allocation to â€˜Domestic Fixed Incomeâ€™ and â€˜Global Fixed Incomeâ€™ depending on market opportunities and the allowable mandate for each fund. We believe the spread across security types and geographical locations provide enhanced diversification within your fixed income portfolio. Regardless of geographical allocation, these funds are typically managed with reference to a widely accepted traditional fixed interest market benchmark. Therefore, these funds are typically categorised as defensive fixed income funds. In light of this, we are comfortable with the overweight allocation to global fixed income within your portfolio.")));

                    body.Append(commentary);
                }

                //Global Property
                if ((findVal(details, "International Property").proposed) > (findVal(details, "International Property").targetmax))
                {
                    Paragraph commentary = new Paragraph(new Run(new RunProperties(), new Text("We note that your asset allocation shows an overweight allocation to â€˜Global Propertyâ€™ via  ")));

                    commentary.Append(new Run(new RunProperties((Color)red.CloneNode(true)), new Text { Text = " [name of investments invested in global property]", Space =SpaceProcessingModeValues.Preserve }));
                    commentary.Append(new Run(new RunProperties(), new Text(". These funds provide exposure to a diversified portfolio of real estate investment trusts (REITs) and infrastructure assets across Australian and global markets. The global mandate for these funds enables managers to access countries at different points in the economic cycle and to sectors not available in the Australian market. However, depending on market opportunities, these funds may also access REITs and infrastructure assets within Australia. This means that from time to time, your portfolio may have varying allocation to â€˜Domestic Propertyâ€™ and â€˜Global Propertyâ€™. We believe the flexibility to access investments in Australia and globally provides increased diversification within your property portfolio. In light of this, we are comfortable with the overweight allocation to â€˜Global Propertyâ€™ within your portfolio. ")));

                    body.Append(commentary);
                }

                //Other Growth
                if ((findVal(details, "Other Growth").proposed) > 0)
                {
                    Paragraph commentary = new Paragraph(new Run(new RunProperties(), new Text("Your portfolio currently has some exposure to â€˜Other Growthâ€™ which forms part of your overall growth allocation. The â€˜Other Growthâ€™ exposure relates to underlying securities that are outside of traditional growth assets such as shares and properties. The inclusion of other growth assets can enhance portfolio diversification and smooth out investment returns over market cycles, when used alongside a traditional allocation to bonds and equities. The use of growth assets can also reduce reliance on equities as the primary (or sole) driver of long term returns above inflation. As such, we are comfortable with your portfolioâ€™s allocation to â€˜Other Growthâ€™ assets.")));
                    body.Append(commentary);
                }
                 


            }

            
        }
        private void AddReplacementOfProduct(Body body, CF[] currentAssests, PF[] proposedAssets, AlternativeFund[] alternativeAssets, BasicDetails clientDetails, Color orange)
        {

            var clientproposedAssets = proposedAssets.Where(c => c.owner == "Client").ToArray();
            var partnerproposedAssets = proposedAssets.Where(c => c.owner == "Partner").ToArray();
            var jointproposedAssets = proposedAssets.Where(c => c.owner == "Joint").ToArray();

            //if(clientproposedAssets.Length > 0 || partnerproposedAssets.Length > 0 || jointproposedAssets.Length > 0)
            //{
                
            //}

            //Client
            if (clientproposedAssets != null && clientproposedAssets.Length > 0)
            {
               
                var feeDisplay = new List<String>();
                var transactionDisplay = new List<String>();
                var proposedProducts = new List<PF>();

                var proposedProductsRebalances = new List<PF>();
                foreach (PF pp in clientproposedAssets)
                {
                    var current = currentAssests.Where(a => a.proposedId == pp.id);
                    if (current.Count() == 1 && (pp.productId == current.First().productId))
                    {

                        var prop = pp.data.Select(x => x.Apircode).ToArray();
                        var curr = current.First().data.Select(x => x.Apircode).ToArray();
                        var diff = false;
                        if (prop.Length == curr.Length)
                        {
                            foreach(var proposed in pp.data)
                            {
                                var isExist = current.First().data.Where(x => x.Apircode == proposed.Apircode).FirstOrDefault();
                                if(isExist != null)
                                {
                                   if(proposed.Value != isExist.Value)
                                    {
                                        diff = true;
                                        break;
                                    }
                                }
                            }

                        }
                            if (((prop.Length == curr.Length && prop.Intersect(curr).Count() == prop.Length) == false ) || (diff == true))
                            {
                                proposedProductsRebalances.Add(pp);
                            }
                        
                    }
                }

                foreach (PF pp in clientproposedAssets)
                {
                   var current = currentAssests.Where(a => a.proposedId == pp.id);
                   if(current.Any())
                    {
                        proposedProducts.Add(pp);
                    }
                }

                if(proposedProductsRebalances.Count != 0)
                {
                    foreach (PF pp in proposedProductsRebalances)
                    {
                        proposedProducts.RemoveAll(x => x.id == pp.id);
                    }
                }

                var existingProducts = new List<CF>();
                var alternativeProducts = new List<AlternativeFund>();
                foreach (PF pp in proposedProducts)
                {
                    var alternative = alternativeAssets.Where(a => a.proposedId == pp.id);
                    alternativeProducts.AddRange(alternative);

                    var current = currentAssests.Where(a => a.proposedId == pp.id);
                    existingProducts.AddRange(current);
                }

                var isExisting = existingProducts.Where(z => z.owner != "Client");
                var isAlternate = alternativeProducts.Where(z => z.owner != "Client");
                bool notClient = false;
                if(isExisting.Count() > 0 || isAlternate.Count() > 0)
                {
                    notClient = true;
                }

                if (proposedProducts.Any() || existingProducts.Any() || alternativeProducts.Any())
                {
                    Paragraph break4 = new Paragraph(new Run(new Break() { Type = BreakValues.Page }));
                    body.Append(break4);
                    Paragraph ProductReplacement = new Paragraph(new Run(new RunProperties(new FontSize { Val = "40" }, new Color() { Val = "ED7D27" }), new Text("Replacement of product")));
                    body.Append(ProductReplacement);

                    Run linebreak = new Run(new Break());
                    Paragraph replacement = new Paragraph();
                    replacement.Append(new OpenXmlElement[] { new Run(new RunProperties(), new Text("We have recommended replacing your existing products. The tables below show the costs of your current products and what costs will apply in our recommended products based on our research. ")), (Run)linebreak.CloneNode(true) });
                    body.Append(replacement);

                    Paragraph s2 = body.AppendChild(new Paragraph(new Run(new RunProperties(new Bold(), new FontSize { Val = "24" }, new Color() { Val = "ED7D27" }), new Text("Comparison costs for " + clientDetails.ClientName))));

                    //New Table

                    Table table = body.AppendChild(new Table());
                    TableProperties tableProp = new TableProperties();
                    TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                    TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                    tableProp.Append(tableStyle, tableWidth);
                    table.AppendChild(tableProp);


                    ////Header
                    TableRow header = new TableRow();
                    TableRow type = new TableRow();
                    TableCell h1 = new TableCell();

                    TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties hcp2 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                    ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                    ParagraphProperties hpp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                    Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                    hpp1.AppendChild((Justification)centerJustify.CloneNode(true));

                    TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                    Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                    TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                    hcp.Append(hcm1, hs1, hcb);
                    hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                    hcp2.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true));

                    //TableCell blank = new TableCell();
                    //blank.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                    //blank.Append((TableCellProperties)hcp2.CloneNode(true));
                    //blank.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(""))));
                    //type.Append(blank);

                    //foreach (CF existing in existingProducts)
                    //{
                    //    TableCell h = new TableCell();
                    //    h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                    //    h.Append((TableCellProperties)hcp2.CloneNode(true));
                    //    h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing "))));
                    //    type.Append(h);
                    //}
                    //foreach (PF proposed in proposedProducts)
                    //{
                    //    TableCell h = new TableCell();
                    //    h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                    //    h.Append((TableCellProperties)hcp2.CloneNode(true));
                    //    h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed "))));
                    //    type.Append(h);
                    //}
                    //foreach (PF proposed in proposedProducts)
                    //{
                    //    var alt = alternativeProducts.Where(z => z.proposedId == proposed.id);
                    //    HorizontalMerge horizontalMerge = new HorizontalMerge()
                    //    {
                    //        Val = MergedCellValues.Restart
                    //    };
                    //    hcp2.Append(horizontalMerge);
                    //    HorizontalMerge horizontalMerge1 = new HorizontalMerge()
                    //    {
                    //        Val = MergedCellValues.Continue
                    //    };
                    //    hcp2.Append(horizontalMerge1);

                    //    for (int i = 0; i < alt.Count(); i++)
                    //    {
                    //        if (i == 0)
                    //        {
                    //            TableCell h = new TableCell();
                    //            h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                    //            h.Append((TableCellProperties)hcp2.CloneNode(true));
                    //            h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternatives for " + proposed.product))));
                    //            type.Append(h);
                    //        }
                    //        if (i == alt.Count() - 1)
                    //        {
                    //            TableCell h = new TableCell();
                    //            h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                    //            h.Append((TableCellProperties)hcp2.CloneNode(true));
                    //            h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternatives for " + proposed.product))));
                    //            type.Append(h);
                    //        }
                    //    }


                    //}

                    //table.Append(type); 



                    h1.Append(hcp);

                    h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                    h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Plan Costs"))));
                    header.Append(h1);

                   

                    foreach (PF proposed in proposedProducts)
                    {
                        var existing = existingProducts.Where(z => z.proposedId == proposed.id);

                        TableCellProperties tableCellProperties = new TableCellProperties();
                        HorizontalMerge horizontalMerge = new HorizontalMerge()
                        {
                            Val = MergedCellValues.Restart
                        };
                        tableCellProperties.Append(horizontalMerge);

                        TableCellProperties tableCellProperties1 = new TableCellProperties();
                        HorizontalMerge horizontalMerge1 = new HorizontalMerge()
                        {
                            Val = MergedCellValues.Continue
                        };
                        tableCellProperties1.Append(horizontalMerge1);


                        foreach (CF ex in existing)
                        {
                            foreach (ProductFeesDisplay pfd in ex.feeDisplay)
                            {
                                if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                                {
                                    bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                    if (!isExist)
                                    {
                                        feeDisplay.Add(pfd.name.Trim());
                                    }
                                }
                            }
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                            h.Append((TableCellProperties)hcp1.CloneNode(true));
                            if (notClient)
                            {
                                var name = "";
                                if (ex.owner == "Client")
                                {
                                    name = clientDetails.ClientName;
                                }
                                else if (ex.owner == "Partner")
                                {
                                    name = clientDetails.PartnerName;
                                }
                                else
                                {
                                    name = "Joint";
                                }
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing " + ex.product + " - " + name))));

                            }
                            else
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing " + ex.product))));
                            }
                            header.Append(h);
                        }
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        foreach (ProductFeesDisplay pfd in proposed.feeDisplay)
                        {
                            if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                            {
                                bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                if (!isExist)
                                {
                                    feeDisplay.Add(pfd.name.Trim());
                                }
                            }
                        }
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                        h.Append((TableCellProperties)hcp1.CloneNode(true));
                        if (notClient)
                        {
                            var name = "";
                            if (proposed.owner == "Client")
                            {
                                name = clientDetails.ClientName;
                            }
                            else if (proposed.owner == "Partner")
                            {
                                name = clientDetails.PartnerName;
                            }
                            else
                            {
                                name = "Joint";
                            }
                            h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed " + proposed.product + " - " + name))));

                        }
                        else
                        {
                            h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed " + proposed.product))));
                        }
                        header.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        var alt = alternativeProducts.Where(z => z.proposedId == proposed.id);

                        TableCellProperties tableCellProperties = new TableCellProperties();
                        HorizontalMerge horizontalMerge = new HorizontalMerge()
                        {
                            Val = MergedCellValues.Restart
                        };
                        tableCellProperties.Append(horizontalMerge);

                        TableCellProperties tableCellProperties1 = new TableCellProperties();
                        HorizontalMerge horizontalMerge1 = new HorizontalMerge()
                        {
                            Val = MergedCellValues.Continue
                        };
                        tableCellProperties1.Append(horizontalMerge1);


                        foreach (AlternativeFund alternate in alt)
                        {
                            foreach (ProductFeesDisplay pfd in alternate.feeDisplay)
                            {
                                if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                                {
                                    bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                    if (!isExist)
                                    {
                                        feeDisplay.Add(pfd.name.Trim());
                                    }
                                }
                            }
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                            h.Append((TableCellProperties)hcp1.CloneNode(true));
                            if (notClient)
                            {
                                var name = "";
                                if(alternate.owner == "Client")
                                {
                                    name = clientDetails.ClientName;
                                }
                                else if (alternate.owner == "Partner")
                                {
                                    name = clientDetails.PartnerName;
                                }
                                else
                                {
                                    name = "Joint";
                                }
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternative " + alternate.product + " - " + name))));

                            }
                            else
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternative " + alternate.product))));
                            }
                            header.Append(h);
                        }
                    }

                    table.Append(header);



                    //Body

                    TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                    TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                    TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                    TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                    TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                    ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                    ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                    pp.AppendChild((Justification)centerJustify.CloneNode(true));
                    tcp.Append(tcbR, tcm);
                    tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                    TableRow AccountBalance = new TableRow();
                    TableCell dCell = new TableCell();
                    dCell.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    dCell.Append((TableCellProperties)tcpN.CloneNode(true));
                    dCell.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Account Balance"))));
                    AccountBalance.Append(dCell);

                    foreach (CF existing in existingProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", existing.value)))));
                        AccountBalance.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", proposed.value)))));
                        AccountBalance.Append(h);
                    }
                    foreach (AlternativeFund alternate in alternativeProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", alternate.value)))));
                        AccountBalance.Append(h);
                    }

                    table.Append(AccountBalance);

                    foreach (String s in feeDisplay)
                    {
                        TableRow feeName = new TableRow();
                        TableCell fee = new TableCell();
                        fee.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        fee.Append((TableCellProperties)tcpN.CloneNode(true));
                        fee.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(s))));
                        feeName.Append(fee);

                        foreach (CF existing in existingProducts)
                        {
                            var feeDetails = existing.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            h.Append((TableCellProperties)tcp.CloneNode(true));
                            h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            if (feeDetails.percentage == 0 && feeDetails.val == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                            }
                            else if (feeDetails.percentage == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                            }
                            else if (feeDetails.percentage != 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                            }
                            feeName.Append(h);
                        }
                        foreach (PF proposed in proposedProducts)
                        {
                            var feeDetails = proposed.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            h.Append((TableCellProperties)tcp.CloneNode(true));
                            h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            if (feeDetails.percentage == 0 && feeDetails.val == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                            }
                            else if (feeDetails.percentage == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                            }
                            else if (feeDetails.percentage != 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                            }
                            feeName.Append(h);
                        }
                        foreach (AlternativeFund alternate in alternativeProducts)
                        {
                            var feeDetails = alternate.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            h.Append((TableCellProperties)tcp.CloneNode(true));
                            h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            if (feeDetails.percentage == 0 && feeDetails.val == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                            }
                            else if (feeDetails.percentage == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                            }
                            else if (feeDetails.percentage != 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                            }
                            feeName.Append(h);
                        }




                        table.Append(feeName);



                    }

                    TableRow LessTotalRebates = new TableRow();
                    TableCell dCell1 = new TableCell();
                    dCell1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    dCell1.Append((TableCellProperties)tcpN.CloneNode(true));
                    dCell1.Append(new Paragraph(new Run(new RunProperties(new Italic()), new Text("Less Total Rebates"))));
                    LessTotalRebates.Append(dCell1);

                    foreach (CF existing in existingProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Italic()), new Text("0"))));
                        LessTotalRebates.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Italic()), new Text("0"))));
                        LessTotalRebates.Append(h);
                    }
                    foreach (AlternativeFund alternate in alternativeProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Italic()), new Text("0"))));
                        LessTotalRebates.Append(h);
                    }

                    table.Append(LessTotalRebates);

                    //Total
                    TableRow NetOngoingCosts = new TableRow();
                    TableCell dCell2 = new TableCell();
                    dCell2.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    dCell2.Append((TableCellProperties)tcpN.CloneNode(true));
                    dCell2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Net Ongoing Costs (per annum)"))));
                    NetOngoingCosts.Append(dCell2);

                    foreach (CF existing in existingProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", existing.feeDisplay.Sum(item => item.val))))));
                        NetOngoingCosts.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", proposed.feeDisplay.Sum(item => item.val))))));
                        NetOngoingCosts.Append(h);
                    }
                    foreach (AlternativeFund alternate in alternativeProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", alternate.feeDisplay.Sum(item => item.val))))));
                        NetOngoingCosts.Append(h);
                    }

                    table.Append(NetOngoingCosts);

                    //Difference
                    //Total
                    TableRow Difference = new TableRow();
                    TableCell dCell3 = new TableCell();
                    dCell3.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    dCell3.Append((TableCellProperties)tcpN.CloneNode(true));
                    dCell3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Difference in ongoing costs"))));
                    Difference.Append(dCell3);

                    foreach (CF existing in existingProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(""))));
                        Difference.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {

                        decimal sum = 0;
                        IEnumerable<RopcurrentProducts> list = this.mapper.Map<IEnumerable<RopcurrentProducts>>(from s in this.context.RopcurrentProducts.AsEnumerable()  where s.ProposedProduct == proposed.id select s).ToList();
                        foreach (RopcurrentProducts cp in list)
                        {
                            var current = currentAssests.Where(a => a.id == cp.RecId).FirstOrDefault();
                            if (current != null)
                            {
                                sum += current.feeDisplay.Sum(item => item.val);
                            }
                        }

                        var display = "";
                        var value = Math.Round(proposed.feeDisplay.Sum(item => item.val)) - Math.Round(sum);
                        if (value > 0)
                        {
                            display = " Additional $" + String.Format("{0:n0}", Math.Abs(value));
                        }
                        else if (value < 0)
                        {
                            display = " Less $" + String.Format("{0:n0}", Math.Abs(value));
                        }
                        else
                        {
                            display = "$0";
                        }

                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(display))));
                        Difference.Append(h);
                    }
                    foreach (AlternativeFund alternate in alternativeProducts)
                    {
                        decimal sum = 0;
                        IEnumerable<RopcurrentProducts> list = this.mapper.Map<IEnumerable<RopcurrentProducts>>(from s in this.context.RopcurrentProducts.AsEnumerable()  where s.ProposedProduct == alternate.proposedId select s).ToList();
                        foreach (RopcurrentProducts cp in list)
                        {
                            var current = currentAssests.Where(a => a.id == cp.RecId).FirstOrDefault();
                            if (current != null)
                            {
                                sum += current.feeDisplay.Sum(item => item.val);
                            }
                        }

                        var display = "";
                        var value = Math.Round(alternate.feeDisplay.Sum(item => item.val)) - Math.Round(sum);
                        if (value > 0)
                        {
                            display = " Additional $" + String.Format("{0:n0}", Math.Abs(value));
                        }
                        else if (value < 0)
                        {
                            display = " Less $" + String.Format("{0:n0}", Math.Abs(value));
                        }
                        else
                        {
                            display = "$0";
                        }

                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(display))));
                        Difference.Append(h);
                    }

                    table.Append(Difference);
                }
                if (existingProducts.Any() || proposedProducts.Any())
                {
                    Run linebreak = new Run(new Break());
                    Paragraph transactionCost = new Paragraph();
                    transactionCost.Append(new OpenXmlElement[] { (Run)linebreak.CloneNode(true), new Run(new RunProperties(new Bold(), new Color() { Val = "ED7D27" }), new Text("Initial Product costs")) });
                    body.Append(transactionCost);

                    Paragraph commentary = new Paragraph(new Run(new RunProperties(), new Text("The following table shows the initial product costs that may apply to replace your existing products with the recommended products. All costs are estimates which may vary at the time of implementation.")));
                    body.Append(commentary);

                    //New Table

                    Table table = body.AppendChild(new Table());
                    TableProperties tableProp = new TableProperties();
                    TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                    TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                    tableProp.Append(tableStyle, tableWidth);
                    table.AppendChild(tableProp);


                    ////Header
                    TableRow header = new TableRow();
                    TableCell h1 = new TableCell();

                    TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                    ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                    ParagraphProperties hpp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                    Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                    hpp1.AppendChild((Justification)centerJustify.CloneNode(true));

                    TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                    Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                    TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                    hcp.Append(hcm1, hs1, hcb);
                    hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                    h1.Append(hcp);

                    h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                    h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Plan Costs"))));
                    header.Append(h1);

                    foreach (CF existing in existingProducts)
                    {
                        foreach (ProductFeesDisplay pfd in existing.feeDisplay)
                        {
                            if (pfd.feeType.Trim() == "transactional")
                            {
                                bool isExist = transactionDisplay.Any(pfd.name.Trim().Contains);
                                if (!isExist)
                                {
                                    transactionDisplay.Add(pfd.name.Trim());
                                }
                            }
                        }

                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                        h.Append((TableCellProperties)hcp1.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing " + existing.product))));
                        header.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        foreach (ProductFeesDisplay pfd in proposed.feeDisplay)
                        {
                            if (pfd.feeType.Trim() == "transactional")
                            {
                                bool isExist = transactionDisplay.Any(pfd.name.Trim().Contains);
                                if (!isExist)
                                {
                                    transactionDisplay.Add(pfd.name.Trim());
                                }
                            }
                        }
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                        h.Append((TableCellProperties)hcp1.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed " + proposed.product))));
                        header.Append(h);
                    }

                    table.Append(header);
                    TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                    TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                    TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                    TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                    TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                    ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                    ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                    pp.AppendChild((Justification)centerJustify.CloneNode(true));
                    tcp.Append(tcbR, tcm);
                    tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));



                    var transaction = new List<string>();
                    transaction.Add("Exit/Withdrawal fees");
                    transaction.Add("Other transaction costs");
                    transaction.Add("Buy/Sell Costs");
                    transaction.Add("Managed fund transactions");
                    transaction.Add("Brokerage Fee");
                  
                   
                  
                   

                    var transactionDisplaySorted = transactionDisplay.OrderBy(d => transaction.IndexOf(d.Trim())).ToList();
                    foreach (String s in transactionDisplaySorted)
                    {
                        TableRow feeName = new TableRow();
                        TableCell fee = new TableCell();
                        fee.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        fee.Append((TableCellProperties)tcpN.CloneNode(true));
                        fee.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(s))));
                        feeName.Append(fee);

                        foreach (CF existing in existingProducts)
                        {
                            var feeDetails = existing.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            h.Append((TableCellProperties)tcp.CloneNode(true));
                            h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                            feeName.Append(h);
                        }
                        foreach (PF proposed in proposedProducts)
                        {
                            var feeDetails = proposed.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            h.Append((TableCellProperties)tcp.CloneNode(true));
                            h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                            feeName.Append(h);
                        }

                        table.Append(feeName);

                    }

                    Paragraph commentary1 = new Paragraph(new Run(new RunProperties(new Italic()), new Text("*The buy/sell spread is the full buy/sell spread on the recommended investment purchases. It doesnâ€™t include the sell spread for the recommended investment sales as this is typically already reflected in your current investment balance.")));
                    body.Append(commentary1);

                    //Paragraph commentary2 = new Paragraph(new Run(new RunProperties(), new Text("Please note, effective 1 October 2017, ASIC Regulatory Guide 97 (RG97) has come into effect. The aim of the legislation to which RG97 relates is to drive greater consistency in how financial product providers disclose their fees. For many products, some of these costs were previously included in the unit price, or disclosed as alternative fee types. Due to the magnitude of this industry wide change, at the time of production of this Statement of Advice, the new fee breakdown for your existing fund may not have been provided to our approved investment research platform. As such, there may be a fee variation between what has been disclosed above and the new fee disclosure breakdown in your Product Disclosure Statement. Based on ASICâ€™s own assessment, they have found the average increase across all reported superannuation data to be 0.24%. For clients who hold default super funds, the average increase was about 0.23%. They have identified some cases where the increase was more than 1.00%. Whilst fees are an important consideration, you should consider the totality of our recommendations and how they align to your objectives.")));
                    //body.Append(commentary2);
                }
            }

            //Partner
            if (partnerproposedAssets != null && partnerproposedAssets.Length > 0)
            {

                var feeDisplay = new List<String>();
                var transactionDisplay = new List<String>();
                var proposedProducts = new List<PF>();
                var proposedProductsRebalances = new List<PF>();
                foreach (PF pp in partnerproposedAssets)
                {
                    var current = currentAssests.Where(a => a.proposedId == pp.id);
                    if (current.Count() == 1 && (pp.productId == current.First().productId))
                    {
                        var prop = pp.data.Select(x => x.Apircode).ToArray();
                        var curr = current.First().data.Select(x => x.Apircode).ToArray();

                        var diff = false;
                        if (prop.Length == curr.Length)
                        {
                            foreach (var proposed in pp.data)
                            {
                                var isExist = current.First().data.Where(x => x.Apircode == proposed.Apircode).FirstOrDefault();
                                if (isExist != null)
                                {
                                    if (proposed.Value != isExist.Value)
                                    {
                                        diff = true;
                                        break;
                                    }
                                }
                            }

                        }

                        if (((prop.Length == curr.Length && prop.Intersect(curr).Count() == prop.Length) == false) || (diff == true))
                        {
                            proposedProductsRebalances.Add(pp);
                        }
                    }
                }

                foreach (PF pp in partnerproposedAssets)
                {
                    var current = currentAssests.Where(a => a.proposedId == pp.id);
                    if (current.Any())
                    {
                        proposedProducts.Add(pp);
                    }
                }

                if (proposedProductsRebalances.Count != 0)
                {
                    foreach (PF pp in proposedProductsRebalances)
                    {
                        proposedProducts.RemoveAll(x => x.id == pp.id);
                    }
                }

                var existingProducts = new List<CF>();
                var alternativeProducts = new List<AlternativeFund>();
                foreach (PF pp in proposedProducts)
                {
                    var alternative = alternativeAssets.Where(a => a.proposedId == pp.id);
                    alternativeProducts.AddRange(alternative);

                    var current = currentAssests.Where(a => a.proposedId == pp.id);
                    existingProducts.AddRange(current);
                }

                var isExisting = existingProducts.Where(z => z.owner != "Partner");
                var isAlternate = alternativeProducts.Where(z => z.owner != "Partner");
                bool notPartner = false;
                if (isExisting.Count() > 0 || isAlternate.Count() > 0)
                {
                    notPartner = true;
                }

                if (proposedProducts.Any() || existingProducts.Any() || alternativeProducts.Any())
                {
                    Run linebreak = new Run(new Break());
                    Paragraph replacement = new Paragraph();
                    replacement.Append(new OpenXmlElement[] { (Run)linebreak.CloneNode(true) });
                    body.Append(replacement);

                    Paragraph s2 = body.AppendChild(new Paragraph(new Run(new RunProperties(new Bold(), new FontSize { Val = "24" }, new Color() { Val = "ED7D27" }), new Text("Comparison costs for " + clientDetails.PartnerName))));

                    //New Table

                    Table table = body.AppendChild(new Table());
                    TableProperties tableProp = new TableProperties();
                    TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                    TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                    tableProp.Append(tableStyle, tableWidth);
                    table.AppendChild(tableProp);


                    ////Header
                    TableRow header = new TableRow();
                    TableRow type = new TableRow();
                    TableCell h1 = new TableCell();

                    TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties hcp2 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                    ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                    ParagraphProperties hpp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                    Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                    hpp1.AppendChild((Justification)centerJustify.CloneNode(true));

                    TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                    Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                    TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                    hcp.Append(hcm1, hs1, hcb);
                    hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                    hcp2.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true));

                    //TableCell blank = new TableCell();
                    //blank.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                    //blank.Append((TableCellProperties)hcp1.CloneNode(true));
                    //blank.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(""))));
                    //type.Append(blank);

                    //foreach (CF existing in existingProducts)
                    //{
                    //    TableCell h = new TableCell();
                    //    h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                    //    h.Append((TableCellProperties)hcp2.CloneNode(true));
                    //    h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing "))));
                    //    type.Append(h);
                    //}
                    //foreach (PF proposed in proposedProducts)
                    //{
                    //    TableCell h = new TableCell();
                    //    h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                    //    h.Append((TableCellProperties)hcp2.CloneNode(true));
                    //    h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed "))));
                    //    type.Append(h);
                    //}
                    //foreach (PF proposed in proposedProducts)
                    //{
                    //    var alt = alternativeProducts.Where(z => z.proposedId == proposed.id);
                    //    HorizontalMerge horizontalMerge = new HorizontalMerge()
                    //    {
                    //        Val = MergedCellValues.Restart
                    //    };
                    //    hcp2.Append(horizontalMerge);
                    //    HorizontalMerge horizontalMerge1 = new HorizontalMerge()
                    //    {
                    //        Val = MergedCellValues.Continue
                    //    };
                    //    hcp2.Append(horizontalMerge1);

                    //    for (int i = 0; i < alt.Count(); i++)
                    //    {
                    //        if (i == 0)
                    //        {
                    //            TableCell h = new TableCell();
                    //            h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                    //            h.Append((TableCellProperties)hcp2.CloneNode(true));
                    //            h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternatives for " + proposed.product))));
                    //            type.Append(h);
                    //        }
                    //        if (i == alt.Count() - 1)
                    //        {
                    //            TableCell h = new TableCell();
                    //            h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                    //            h.Append((TableCellProperties)hcp2.CloneNode(true));
                    //            h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternatives for " + proposed.product))));
                    //            type.Append(h);
                    //        }
                    //    }


                    //}

                    //table.Append(type);



                    h1.Append(hcp);

                    h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                    h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Plan Costs"))));
                    header.Append(h1);

                    foreach (PF proposed in proposedProducts)
                    {
                        var existing = existingProducts.Where(z => z.proposedId == proposed.id);

                        TableCellProperties tableCellProperties = new TableCellProperties();
                        HorizontalMerge horizontalMerge = new HorizontalMerge()
                        {
                            Val = MergedCellValues.Restart
                        };
                        tableCellProperties.Append(horizontalMerge);

                        TableCellProperties tableCellProperties1 = new TableCellProperties();
                        HorizontalMerge horizontalMerge1 = new HorizontalMerge()
                        {
                            Val = MergedCellValues.Continue
                        };
                        tableCellProperties1.Append(horizontalMerge1);


                        foreach (CF ex in existing)
                        {
                            foreach (ProductFeesDisplay pfd in ex.feeDisplay)
                            {
                                if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                                {
                                    bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                    if (!isExist)
                                    {
                                        feeDisplay.Add(pfd.name.Trim());
                                    }
                                }
                            }
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                            h.Append((TableCellProperties)hcp1.CloneNode(true));
                            if (notPartner)
                            {
                                var name = "";
                                if (ex.owner == "Client")
                                {
                                    name = clientDetails.ClientName;
                                }
                                else if (ex.owner == "Partner")
                                {
                                    name = clientDetails.PartnerName;
                                }
                                else
                                {
                                    name = "Joint";
                                }
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing " + ex.product + " - " + name))));

                            }
                            else
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing " + ex.product))));
                            }
                            header.Append(h);
                        }
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        foreach (ProductFeesDisplay pfd in proposed.feeDisplay)
                        {
                            if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                            {
                                bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                if (!isExist)
                                {
                                    feeDisplay.Add(pfd.name.Trim());
                                }
                            }
                        }
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                        h.Append((TableCellProperties)hcp1.CloneNode(true));
                        if (notPartner)
                        {
                            var name = "";
                            if (proposed.owner == "Client")
                            {
                                name = clientDetails.ClientName;
                            }
                            else if (proposed.owner == "Partner")
                            {
                                name = clientDetails.PartnerName;
                            }
                            else
                            {
                                name = "Joint";
                            }
                            h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed " + proposed.product + " - " + name))));

                        }
                        else
                        {
                            h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed " + proposed.product))));
                        }
                        header.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        var alt = alternativeProducts.Where(z => z.proposedId == proposed.id);

                        TableCellProperties tableCellProperties = new TableCellProperties();
                        HorizontalMerge horizontalMerge = new HorizontalMerge()
                        {
                            Val = MergedCellValues.Restart
                        };
                        tableCellProperties.Append(horizontalMerge);

                        TableCellProperties tableCellProperties1 = new TableCellProperties();
                        HorizontalMerge horizontalMerge1 = new HorizontalMerge()
                        {
                            Val = MergedCellValues.Continue
                        };
                        tableCellProperties1.Append(horizontalMerge1);


                        foreach (AlternativeFund alternate in alt)
                        {
                            foreach (ProductFeesDisplay pfd in alternate.feeDisplay)
                            {
                                if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                                {
                                    bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                    if (!isExist)
                                    {
                                        feeDisplay.Add(pfd.name.Trim());
                                    }
                                }
                            }
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                            h.Append((TableCellProperties)hcp1.CloneNode(true));
                            if (notPartner)
                            {
                                var name = "";
                                if (alternate.owner == "Client")
                                {
                                    name = clientDetails.ClientName;
                                }
                                else if (alternate.owner == "Partner")
                                {
                                    name = clientDetails.PartnerName;
                                }
                                else
                                {
                                    name = "Joint";
                                }
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternative " + alternate.product + " - " + name))));

                            }
                            else
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternative " + alternate.product))));
                            }
                            header.Append(h);
                        }
                    }

                    table.Append(header);



                    //Body

                    TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                    TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                    TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                    TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                    TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                    ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                    ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                    pp.AppendChild((Justification)centerJustify.CloneNode(true));
                    tcp.Append(tcbR, tcm);
                    tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                    TableRow AccountBalance = new TableRow();
                    TableCell dCell = new TableCell();
                    dCell.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    dCell.Append((TableCellProperties)tcpN.CloneNode(true));
                    dCell.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Account Balance"))));
                    AccountBalance.Append(dCell);

                    foreach (CF existing in existingProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", existing.value)))));
                        AccountBalance.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", proposed.value)))));
                        AccountBalance.Append(h);
                    }
                    foreach (AlternativeFund alternate in alternativeProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", alternate.value)))));
                        AccountBalance.Append(h);
                    }

                    table.Append(AccountBalance);

                    foreach (String s in feeDisplay)
                    {
                        TableRow feeName = new TableRow();
                        TableCell fee = new TableCell();
                        fee.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        fee.Append((TableCellProperties)tcpN.CloneNode(true));
                        fee.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(s))));
                        feeName.Append(fee);

                        foreach (CF existing in existingProducts)
                        {
                            var feeDetails = existing.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            h.Append((TableCellProperties)tcp.CloneNode(true));
                            h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            if (feeDetails.percentage == 0 && feeDetails.val == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                            }
                            else if (feeDetails.percentage == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                            }
                            else if (feeDetails.percentage != 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                            }
                            feeName.Append(h);
                        }
                        foreach (PF proposed in proposedProducts)
                        {
                            var feeDetails = proposed.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            h.Append((TableCellProperties)tcp.CloneNode(true));
                            h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            if (feeDetails.percentage == 0 && feeDetails.val == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                            }
                            else if (feeDetails.percentage == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                            }
                            else if (feeDetails.percentage != 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                            }
                            feeName.Append(h);
                        }
                        foreach (AlternativeFund alternate in alternativeProducts)
                        {
                            var feeDetails = alternate.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            h.Append((TableCellProperties)tcp.CloneNode(true));
                            h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            if (feeDetails.percentage == 0 && feeDetails.val == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                            }
                            else if (feeDetails.percentage == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                            }
                            else if (feeDetails.percentage != 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                            }
                            feeName.Append(h);
                        }




                        table.Append(feeName);



                    }

                    TableRow LessTotalRebates = new TableRow();
                    TableCell dCell1 = new TableCell();
                    dCell1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    dCell1.Append((TableCellProperties)tcpN.CloneNode(true));
                    dCell1.Append(new Paragraph(new Run(new RunProperties(new Italic()), new Text("Less Total Rebates"))));
                    LessTotalRebates.Append(dCell1);

                    foreach (CF existing in existingProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Italic()), new Text("0"))));
                        LessTotalRebates.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Italic()), new Text("0"))));
                        LessTotalRebates.Append(h);
                    }
                    foreach (AlternativeFund alternate in alternativeProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Italic()), new Text("0"))));
                        LessTotalRebates.Append(h);
                    }

                    table.Append(LessTotalRebates);

                    //Total
                    TableRow NetOngoingCosts = new TableRow();
                    TableCell dCell2 = new TableCell();
                    dCell2.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    dCell2.Append((TableCellProperties)tcpN.CloneNode(true));
                    dCell2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Net Ongoing Costs (per annum)"))));
                    NetOngoingCosts.Append(dCell2);

                    foreach (CF existing in existingProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", existing.feeDisplay.Sum(item => item.val))))));
                        NetOngoingCosts.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", proposed.feeDisplay.Sum(item => item.val))))));
                        NetOngoingCosts.Append(h);
                    }
                    foreach (AlternativeFund alternate in alternativeProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", alternate.feeDisplay.Sum(item => item.val))))));
                        NetOngoingCosts.Append(h);
                    }

                    table.Append(NetOngoingCosts);

                    //Difference
                    //Total
                    TableRow Difference = new TableRow();
                    TableCell dCell3 = new TableCell();
                    dCell3.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    dCell3.Append((TableCellProperties)tcpN.CloneNode(true));
                    dCell3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Difference in ongoing costs"))));
                    Difference.Append(dCell3);

                    foreach (CF existing in existingProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(""))));
                        Difference.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {

                        decimal sum = 0;
                        IEnumerable<RopcurrentProducts> list = this.mapper.Map<IEnumerable<RopcurrentProducts>>(from s in this.context.RopcurrentProducts.AsEnumerable()  where s.ProposedProduct == proposed.id select s).ToList();
                        foreach (RopcurrentProducts cp in list)
                        {
                            var current = currentAssests.Where(a => a.id == cp.RecId).FirstOrDefault();
                            if (current != null)
                            {
                                sum += current.feeDisplay.Sum(item => item.val);
                            }
                        }

                        var display = "";
                        var value = Math.Round(proposed.feeDisplay.Sum(item => item.val)) - Math.Round(sum);
                        if (value > 0)
                        {
                            display = " Additional $" + String.Format("{0:n0}", Math.Abs(value));
                        }
                        else if (value < 0)
                        {
                            display = " Less $" + String.Format("{0:n0}", Math.Abs(value));
                        }
                        else
                        {
                            display = "$0";
                        }

                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(display))));
                        Difference.Append(h);
                    }
                    foreach (AlternativeFund alternate in alternativeProducts)
                    {
                        decimal sum = 0;
                        IEnumerable<RopcurrentProducts> list = this.mapper.Map<IEnumerable<RopcurrentProducts>>(from s in this.context.RopcurrentProducts.AsEnumerable() where s.ProposedProduct == alternate.id select s).ToList();

                        foreach (RopcurrentProducts cp in list)
                        {
                            var current = currentAssests.Where(a => a.id == cp.RecId).FirstOrDefault();
                            if (current != null)
                            {
                                sum += current.feeDisplay.Sum(item => item.val);
                            }
                        }

                        var display = "";
                        var value = Math.Round(alternate.feeDisplay.Sum(item => item.val)) - Math.Round(sum);
                        if (value > 0)
                        {
                            display = " Additional $" + String.Format("{0:n0}", Math.Abs(value));
                        }
                        else if (value < 0)
                        {
                            display = " Less $" + String.Format("{0:n0}", Math.Abs(value));
                        }
                        else
                        {
                            display = "$0";
                        }

                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(display))));
                        Difference.Append(h);
                    }

                    table.Append(Difference);
                }
                if (existingProducts.Any() || proposedProducts.Any())
                {
                    Run linebreak = new Run(new Break());
                    Paragraph transactionCost = new Paragraph();
                    transactionCost.Append(new OpenXmlElement[] { (Run)linebreak.CloneNode(true), new Run(new RunProperties(new Bold(), new Color() { Val = "ED7D27" }), new Text("Initial Product costs ")) });
                    body.Append(transactionCost);

                    Paragraph commentary = new Paragraph(new Run(new RunProperties(), new Text("The following table shows the initial product costs that may apply to replace your existing products with the recommended products. All costs are estimates which may vary at the time of implementation.")));
                    body.Append(commentary);

                    //New Table

                    Table table = body.AppendChild(new Table());
                    TableProperties tableProp = new TableProperties();
                    TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                    TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                    tableProp.Append(tableStyle, tableWidth);
                    table.AppendChild(tableProp);


                    ////Header
                    TableRow header = new TableRow();
                    TableCell h1 = new TableCell();

                    TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                    ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                    ParagraphProperties hpp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                    Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                    hpp1.AppendChild((Justification)centerJustify.CloneNode(true));

                    TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                    Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                    TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                    hcp.Append(hcm1, hs1, hcb);
                    hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                    h1.Append(hcp);

                    h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                    h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Plan Costs"))));
                    header.Append(h1);

                    foreach (CF existing in existingProducts)
                    {
                        foreach (ProductFeesDisplay pfd in existing.feeDisplay)
                        {
                            if (pfd.feeType.Trim() == "transactional")
                            {
                                bool isExist = transactionDisplay.Any(pfd.name.Trim().Contains);
                                if (!isExist)
                                {
                                    transactionDisplay.Add(pfd.name.Trim());
                                }
                            }
                        }

                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                        h.Append((TableCellProperties)hcp1.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing " + existing.product))));
                        header.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        foreach (ProductFeesDisplay pfd in proposed.feeDisplay)
                        {
                            if (pfd.feeType.Trim() == "transactional")
                            {
                                bool isExist = transactionDisplay.Any(pfd.name.Trim().Contains);
                                if (!isExist)
                                {
                                    transactionDisplay.Add(pfd.name.Trim());
                                }
                            }
                        }
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                        h.Append((TableCellProperties)hcp1.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed " + proposed.product))));
                        header.Append(h);
                    }

                    table.Append(header);
                    TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                    TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                    TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                    TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                    TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                    ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                    ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                    pp.AppendChild((Justification)centerJustify.CloneNode(true));
                    tcp.Append(tcbR, tcm);
                    tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                    var transaction = new List<string>();
                    transaction.Add("Exit/Withdrawal fees");
                    transaction.Add("Other transaction costs");
                    transaction.Add("Buy/Sell Costs");
                    transaction.Add("Managed fund transactions");
                    transaction.Add("Brokerage Fee");

                    var transactionDisplaySorted = transactionDisplay.OrderBy(d => transaction.IndexOf(d.Trim())).ToList();
                    foreach (String s in transactionDisplaySorted)
                    {
                        TableRow feeName = new TableRow();
                        TableCell fee = new TableCell();
                        fee.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        fee.Append((TableCellProperties)tcpN.CloneNode(true));
                        fee.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(s))));
                        feeName.Append(fee);

                        foreach (CF existing in existingProducts)
                        {
                            var feeDetails = existing.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            h.Append((TableCellProperties)tcp.CloneNode(true));
                            h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                            feeName.Append(h);
                        }
                        foreach (PF proposed in proposedProducts)
                        {
                            var feeDetails = proposed.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            h.Append((TableCellProperties)tcp.CloneNode(true));
                            h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                            feeName.Append(h);
                        }

                        table.Append(feeName);



                    }

                    Paragraph commentary1 = new Paragraph(new Run(new RunProperties(new Italic()), new Text("*The buy/sell spread is the full buy/sell spread on the recommended investment purchases. It doesnâ€™t include the sell spread for the recommended investment sales as this is typically already reflected in your current investment balance.")));
                    body.Append(commentary1);

                    //Paragraph commentary2 = new Paragraph(new Run(new RunProperties(), new Text("Please note, effective 1 October 2017, ASIC Regulatory Guide 97 (RG97) has come into effect. The aim of the legislation to which RG97 relates is to drive greater consistency in how financial product providers disclose their fees. For many products, some of these costs were previously included in the unit price, or disclosed as alternative fee types. Due to the magnitude of this industry wide change, at the time of production of this Statement of Advice, the new fee breakdown for your existing fund may not have been provided to our approved investment research platform. As such, there may be a fee variation between what has been disclosed above and the new fee disclosure breakdown in your Product Disclosure Statement. Based on ASICâ€™s own assessment, they have found the average increase across all reported superannuation data to be 0.24%. For clients who hold default super funds, the average increase was about 0.23%. They have identified some cases where the increase was more than 1.00%. Whilst fees are an important consideration, you should consider the totality of our recommendations and how they align to your objectives.")));
                    //body.Append(commentary2);
                }
            }

            //Joint
            if (jointproposedAssets != null && jointproposedAssets.Length > 0)
            {

                var feeDisplay = new List<String>();
                var transactionDisplay = new List<String>();
                var proposedProducts = new List<PF>();
                var proposedProductsRebalances = new List<PF>();
                foreach (PF pp in jointproposedAssets)
                {
                    var current = currentAssests.Where(a => a.proposedId == pp.id);
                    if (current.Count() == 1 && (pp.productId == current.First().productId))
                    {
                        var prop = pp.data.Select(x => x.Apircode).ToArray();
                        var curr = current.First().data.Select(x => x.Apircode).ToArray();

                        var diff = false;
                        if (prop.Length == curr.Length)
                        {
                            foreach (var proposed in pp.data)
                            {
                                var isExist = current.First().data.Where(x => x.Apircode == proposed.Apircode).FirstOrDefault();
                                if (isExist != null)
                                {
                                    if (proposed.Value != isExist.Value)
                                    {
                                        diff = true;
                                    }
                                }
                            }

                        }

                        if (((prop.Length == curr.Length && prop.Intersect(curr).Count() == prop.Length) == false) || (diff == true))
                        {
                            proposedProductsRebalances.Add(pp);
                        }
                    }
                }


                foreach (PF pp in jointproposedAssets)
                {
                    var current = currentAssests.Where(a => a.proposedId == pp.id);
                    if (current.Any())
                    {
                        proposedProducts.Add(pp);
                    }
                }

                if (proposedProductsRebalances.Count != 0)
                {
                    foreach (PF pp in proposedProductsRebalances)
                    {
                        proposedProducts.RemoveAll(x => x.id == pp.id);
                    }
                }

                var existingProducts = new List<CF>();
                var alternativeProducts = new List<AlternativeFund>();
                foreach (PF pp in proposedProducts)
                {
                    var alternative = alternativeAssets.Where(a => a.proposedId == pp.id);
                    alternativeProducts.AddRange(alternative);

                    var current = currentAssests.Where(a => a.proposedId == pp.id);
                    existingProducts.AddRange(current);
                }

                var isExisting = existingProducts.Where(z => z.owner != "Partner");
                var isAlternate = alternativeProducts.Where(z => z.owner != "Partner");
                bool notJoint = false;
                if (isExisting.Count() > 0 || isAlternate.Count() > 0)
                {
                    notJoint = true;
                }

                if (proposedProducts.Any() || existingProducts.Any() || alternativeProducts.Any())
                {
                    Run linebreak = new Run(new Break());
                    Paragraph replacement = new Paragraph();
                    replacement.Append(new OpenXmlElement[] { (Run)linebreak.CloneNode(true) });
                    body.Append(replacement);

                    Paragraph s2 = body.AppendChild(new Paragraph(new Run(new RunProperties(new Bold(), new FontSize { Val = "24" }, new Color() { Val = "ED7D27" }), new Text("Comparison costs for Joint"))));

                    //New Table

                    Table table = body.AppendChild(new Table());
                    TableProperties tableProp = new TableProperties();
                    TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                    TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                    tableProp.Append(tableStyle, tableWidth);
                    table.AppendChild(tableProp);


                    ////Header
                    TableRow header = new TableRow();
                    TableRow type = new TableRow();
                    TableCell h1 = new TableCell();

                    TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties hcp2 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                    ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                    ParagraphProperties hpp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                    Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                    hpp1.AppendChild((Justification)centerJustify.CloneNode(true));

                    TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                    Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                    TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                    hcp.Append(hcm1, hs1, hcb);
                    hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                    hcp2.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true));

                    //TableCell blank = new TableCell();
                    //blank.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                    //blank.Append((TableCellProperties)hcp1.CloneNode(true));
                    //blank.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(""))));
                    //type.Append(blank);

                    //foreach (CF existing in existingProducts)
                    //{
                    //    TableCell h = new TableCell();
                    //    h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                    //    h.Append((TableCellProperties)hcp2.CloneNode(true));
                    //    h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing "))));
                    //    type.Append(h);
                    //}
                    //foreach (PF proposed in proposedProducts)
                    //{
                    //    TableCell h = new TableCell();
                    //    h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                    //    h.Append((TableCellProperties)hcp2.CloneNode(true));
                    //    h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed "))));
                    //    type.Append(h);
                    //}
                    //foreach (PF proposed in proposedProducts)
                    //{
                    //    var alt = alternativeProducts.Where(z => z.proposedId == proposed.id);
                    //    HorizontalMerge horizontalMerge = new HorizontalMerge()
                    //    {
                    //        Val = MergedCellValues.Restart
                    //    };
                    //    hcp2.Append(horizontalMerge);
                    //    HorizontalMerge horizontalMerge1 = new HorizontalMerge()
                    //    {
                    //        Val = MergedCellValues.Continue
                    //    };
                    //    hcp2.Append(horizontalMerge1);

                    //    for (int i = 0; i < alt.Count(); i++)
                    //    {
                    //        if (i == 0)
                    //        {
                    //            TableCell h = new TableCell();
                    //            h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                    //            h.Append((TableCellProperties)hcp2.CloneNode(true));
                    //            h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternatives for " + proposed.product))));
                    //            type.Append(h);
                    //        }
                    //        if (i == alt.Count() - 1)
                    //        {
                    //            TableCell h = new TableCell();
                    //            h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                    //            h.Append((TableCellProperties)hcp2.CloneNode(true));
                    //            h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternatives for " + proposed.product))));
                    //            type.Append(h);
                    //        }
                    //    }


                    //}

                    //table.Append(type);



                    h1.Append(hcp);

                    h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                    h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Plan Costs"))));
                    header.Append(h1);

               
                    foreach (PF proposed in proposedProducts)
                    {
                        var existing = existingProducts.Where(z => z.proposedId == proposed.id);

                        TableCellProperties tableCellProperties = new TableCellProperties();
                        HorizontalMerge horizontalMerge = new HorizontalMerge()
                        {
                            Val = MergedCellValues.Restart
                        };
                        tableCellProperties.Append(horizontalMerge);

                        TableCellProperties tableCellProperties1 = new TableCellProperties();
                        HorizontalMerge horizontalMerge1 = new HorizontalMerge()
                        {
                            Val = MergedCellValues.Continue
                        };
                        tableCellProperties1.Append(horizontalMerge1);


                        foreach (CF ex in existing)
                        {
                            foreach (ProductFeesDisplay pfd in ex.feeDisplay)
                            {
                                if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                                {
                                    bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                    if (!isExist)
                                    {
                                        feeDisplay.Add(pfd.name.Trim());
                                    }
                                }
                            }
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                            h.Append((TableCellProperties)hcp1.CloneNode(true));
                            if (notJoint)
                            {
                                var name = "";
                                if (ex.owner == "Client")
                                {
                                    name = clientDetails.ClientName;
                                }
                                else if (ex.owner == "Partner")
                                {
                                    name = clientDetails.PartnerName;
                                }
                                else
                                {
                                    name = "Joint";
                                }
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing " + ex.product + " - " + name))));

                            }
                            else
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing " + ex.product))));
                            }
                            header.Append(h);
                        }
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        foreach (ProductFeesDisplay pfd in proposed.feeDisplay)
                        {
                            if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                            {
                                bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                if (!isExist)
                                {
                                    feeDisplay.Add(pfd.name.Trim());
                                }
                            }
                        }
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                        h.Append((TableCellProperties)hcp1.CloneNode(true));
                        if (notJoint)
                        {
                            var name = "";
                            if (proposed.owner == "Client")
                            {
                                name = clientDetails.ClientName;
                            }
                            else if (proposed.owner == "Partner")
                            {
                                name = clientDetails.PartnerName;
                            }
                            else
                            {
                                name = "Joint";
                            }
                            h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed " + proposed.product + " - " + name))));

                        }
                        else
                        {
                            h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed " + proposed.product))));
                        }
                        header.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        var alt = alternativeProducts.Where(z => z.proposedId == proposed.id);

                        TableCellProperties tableCellProperties = new TableCellProperties();
                        HorizontalMerge horizontalMerge = new HorizontalMerge()
                        {
                            Val = MergedCellValues.Restart
                        };
                        tableCellProperties.Append(horizontalMerge);

                        TableCellProperties tableCellProperties1 = new TableCellProperties();
                        HorizontalMerge horizontalMerge1 = new HorizontalMerge()
                        {
                            Val = MergedCellValues.Continue
                        };
                        tableCellProperties1.Append(horizontalMerge1);


                        foreach (AlternativeFund alternate in alt)
                        {
                            foreach (ProductFeesDisplay pfd in alternate.feeDisplay)
                            {
                                if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                                {
                                    bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                    if (!isExist)
                                    {
                                        feeDisplay.Add(pfd.name.Trim());
                                    }
                                }
                            }
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                            h.Append((TableCellProperties)hcp1.CloneNode(true));
                            if (notJoint)
                            {
                                var name = "";
                                if (alternate.owner == "Client")
                                {
                                    name = clientDetails.ClientName;
                                }
                                else if (alternate.owner == "Partner")
                                {
                                    name = clientDetails.PartnerName;
                                }
                                else
                                {
                                    name = "Joint";
                                }
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternative " + alternate.product + " - " + name))));

                            }
                            else
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternative " + alternate.product))));
                            }
                            header.Append(h);
                        }
                    }

                    table.Append(header);



                    //Body

                    TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                    TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                    TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                    TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                    TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                    ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                    ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                    pp.AppendChild((Justification)centerJustify.CloneNode(true));
                    tcp.Append(tcbR, tcm);
                    tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                    TableRow AccountBalance = new TableRow();
                    TableCell dCell = new TableCell();
                    dCell.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    dCell.Append((TableCellProperties)tcpN.CloneNode(true));
                    dCell.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Account Balance"))));
                    AccountBalance.Append(dCell);

                    foreach (CF existing in existingProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", existing.value)))));
                        AccountBalance.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", proposed.value)))));
                        AccountBalance.Append(h);
                    }
                    foreach (AlternativeFund alternate in alternativeProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", alternate.value)))));
                        AccountBalance.Append(h);
                    }

                    table.Append(AccountBalance);

                    foreach (String s in feeDisplay)
                    {
                        TableRow feeName = new TableRow();
                        TableCell fee = new TableCell();
                        fee.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        fee.Append((TableCellProperties)tcpN.CloneNode(true));
                        fee.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(s))));
                        feeName.Append(fee);

                        foreach (CF existing in existingProducts)
                        {
                            var feeDetails = existing.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            h.Append((TableCellProperties)tcp.CloneNode(true));
                            h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            if (feeDetails.percentage == 0 && feeDetails.val == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                            }
                            else if (feeDetails.percentage == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                            }
                            else if (feeDetails.percentage != 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                            }
                            feeName.Append(h);
                        }
                        foreach (PF proposed in proposedProducts)
                        {
                            var feeDetails = proposed.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            h.Append((TableCellProperties)tcp.CloneNode(true));
                            h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            if (feeDetails.percentage == 0 && feeDetails.val == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                            }
                            else if (feeDetails.percentage == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                            }
                            else if (feeDetails.percentage != 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                            }
                            feeName.Append(h);
                        }
                        foreach (AlternativeFund alternate in alternativeProducts)
                        {
                            var feeDetails = alternate.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            h.Append((TableCellProperties)tcp.CloneNode(true));
                            h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            if (feeDetails.percentage == 0 && feeDetails.val == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                            }
                            else if (feeDetails.percentage == 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                            }
                            else if (feeDetails.percentage != 0)
                            {
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                            }
                            feeName.Append(h);
                        }




                        table.Append(feeName);



                    }

                    TableRow LessTotalRebates = new TableRow();
                    TableCell dCell1 = new TableCell();
                    dCell1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    dCell1.Append((TableCellProperties)tcpN.CloneNode(true));
                    dCell1.Append(new Paragraph(new Run(new RunProperties(new Italic()), new Text("Less Total Rebates"))));
                    LessTotalRebates.Append(dCell1);

                    foreach (CF existing in existingProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Italic()), new Text("0"))));
                        LessTotalRebates.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Italic()), new Text("0"))));
                        LessTotalRebates.Append(h);
                    }
                    foreach (AlternativeFund alternate in alternativeProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Italic()), new Text("0"))));
                        LessTotalRebates.Append(h);
                    }

                    table.Append(LessTotalRebates);

                    //Total
                    TableRow NetOngoingCosts = new TableRow();
                    TableCell dCell2 = new TableCell();
                    dCell2.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    dCell2.Append((TableCellProperties)tcpN.CloneNode(true));
                    dCell2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Net Ongoing Costs (per annum)"))));
                    NetOngoingCosts.Append(dCell2);

                    foreach (CF existing in existingProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", existing.feeDisplay.Sum(item => item.val))))));
                        NetOngoingCosts.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", proposed.feeDisplay.Sum(item => item.val))))));
                        NetOngoingCosts.Append(h);
                    }
                    foreach (AlternativeFund alternate in alternativeProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", alternate.feeDisplay.Sum(item => item.val))))));
                        NetOngoingCosts.Append(h);
                    }

                    table.Append(NetOngoingCosts);

                    //Difference
                    //Total
                    TableRow Difference = new TableRow();
                    TableCell dCell3 = new TableCell();
                    dCell3.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                    dCell3.Append((TableCellProperties)tcpN.CloneNode(true));
                    dCell3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Difference in ongoing costs"))));
                    Difference.Append(dCell3);

                    foreach (CF existing in existingProducts)
                    {
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(""))));
                        Difference.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {

                        decimal sum = 0;
                        IEnumerable<RopcurrentProducts> list = this.mapper.Map<IEnumerable<RopcurrentProducts>>(from s in this.context.RopcurrentProducts.AsEnumerable() where s.ProposedProduct == proposed.id select s).ToList();
                        foreach (RopcurrentProducts cp in list)
                        {
                            var current = currentAssests.Where(a => a.id == cp.RecId).FirstOrDefault();
                            if (current != null)
                            {
                                sum += current.feeDisplay.Sum(item => item.val);
                            }
                        }

                        var display = "";
                        var value = Math.Round(proposed.feeDisplay.Sum(item => item.val)) - Math.Round(sum);
                        if (value > 0)
                        {
                            display = " Additional $" + String.Format("{0:n0}", Math.Abs(value));
                        }
                        else if (value < 0)
                        {
                            display = " Less $" + String.Format("{0:n0}", Math.Abs(value));
                        }
                        else
                        {
                            display = "$0";
                        }

                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(display))));
                        Difference.Append(h);
                    }
                    foreach (AlternativeFund alternate in alternativeProducts)
                    {
                        decimal sum = 0;
                        IEnumerable<RopcurrentProducts> list = this.mapper.Map<IEnumerable<RopcurrentProducts>>(from s in this.context.RopcurrentProducts.AsEnumerable() where s.ProposedProduct == alternate.id select s).ToList();
                        foreach (RopcurrentProducts cp in list)
                        {
                            var current = currentAssests.Where(a => a.id == cp.RecId).FirstOrDefault();
                            if (current != null)
                            {
                                sum += current.feeDisplay.Sum(item => item.val);
                            }
                        }

                        var display = "";
                        var value = Math.Round(alternate.feeDisplay.Sum(item => item.val)) - Math.Round(sum);
                        if (value > 0)
                        {
                            display = " Additional $" + String.Format("{0:n0}", Math.Abs(value));
                        }
                        else if (value < 0)
                        {
                            display = " Less $" + String.Format("{0:n0}", Math.Abs(value));
                        }
                        else
                        {
                            display = "$0";
                        }

                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                        h.Append((TableCellProperties)tcp.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(display))));
                        Difference.Append(h);
                    }

                    table.Append(Difference);
                }
                if (existingProducts.Any() || proposedProducts.Any())
                {
                    Run linebreak = new Run(new Break());
                    Paragraph transactionCost = new Paragraph();
                    transactionCost.Append(new OpenXmlElement[] { (Run)linebreak.CloneNode(true), new Run(new RunProperties(new Bold(), new Color() { Val = "ED7D27" }), new Text("Initial Product costs ")) });
                    body.Append(transactionCost);

                    Paragraph commentary = new Paragraph(new Run(new RunProperties(), new Text("The following table shows the initial product costs that may apply to replace your existing products with the recommended products. All costs are estimates which may vary at the time of implementation.")));
                    body.Append(commentary);

                    //New Table

                    Table table = body.AppendChild(new Table());
                    TableProperties tableProp = new TableProperties();
                    TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                    TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                    tableProp.Append(tableStyle, tableWidth);
                    table.AppendChild(tableProp);


                    ////Header
                    TableRow header = new TableRow();
                    TableCell h1 = new TableCell();

                    TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                    ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                    ParagraphProperties hpp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                    Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                    hpp1.AppendChild((Justification)centerJustify.CloneNode(true));

                    TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                    Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                    TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                    hcp.Append(hcm1, hs1, hcb);
                    hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                    h1.Append(hcp);

                    h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                    h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Plan Costs"))));
                    header.Append(h1);

                    foreach (CF existing in existingProducts)
                    {
                        foreach (ProductFeesDisplay pfd in existing.feeDisplay)
                        {
                            if (pfd.feeType.Trim() == "transactional")
                            {
                                bool isExist = transactionDisplay.Any(pfd.name.Trim().Contains);
                                if (!isExist)
                                {
                                    transactionDisplay.Add(pfd.name.Trim());
                                }
                            }
                        }

                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                        h.Append((TableCellProperties)hcp1.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing " + existing.product))));
                        header.Append(h);
                    }
                    foreach (PF proposed in proposedProducts)
                    {
                        foreach (ProductFeesDisplay pfd in proposed.feeDisplay)
                        {
                            if (pfd.feeType.Trim() == "transactional")
                            {
                                bool isExist = transactionDisplay.Any(pfd.name.Trim().Contains);
                                if (!isExist)
                                {
                                    transactionDisplay.Add(pfd.name.Trim());
                                }
                            }
                        }
                        TableCell h = new TableCell();
                        h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                        h.Append((TableCellProperties)hcp1.CloneNode(true));
                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed " + proposed.product))));
                        header.Append(h);
                    }

                    table.Append(header);
                    TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                    TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                    TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                    TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                    TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                    TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                    ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                    ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                    pp.AppendChild((Justification)centerJustify.CloneNode(true));
                    tcp.Append(tcbR, tcm);
                    tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                    var transaction = new List<string>();
                    transaction.Add("Exit/Withdrawal fees");
                    transaction.Add("Other transaction costs");
                    transaction.Add("Buy/Sell Costs");
                    transaction.Add("Managed fund transactions");
                    transaction.Add("Brokerage Fee");

                    var transactionDisplaySorted = transactionDisplay.OrderBy(d => transaction.IndexOf(d.Trim())).ToList();
                    foreach (String s in transactionDisplaySorted)
                    {
                        TableRow feeName = new TableRow();
                        TableCell fee = new TableCell();
                        fee.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                        fee.Append((TableCellProperties)tcpN.CloneNode(true));
                        fee.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(s))));
                        feeName.Append(fee);

                        foreach (CF existing in existingProducts)
                        {
                            var feeDetails = existing.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            h.Append((TableCellProperties)tcp.CloneNode(true));
                            h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                            feeName.Append(h);
                        }
                        foreach (PF proposed in proposedProducts)
                        {
                            var feeDetails = proposed.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                            TableCell h = new TableCell();
                            h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            h.Append((TableCellProperties)tcp.CloneNode(true));
                            h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                            feeName.Append(h);
                        }

                        table.Append(feeName);



                    }

                    Paragraph commentary1 = new Paragraph(new Run(new RunProperties(new Italic()), new Text("*The buy/sell spread is the full buy/sell spread on the recommended investment purchases. It doesnâ€™t include the sell spread for the recommended investment sales as this is typically already reflected in your current investment balance.")));
                    body.Append(commentary1);

                    //Paragraph commentary2 = new Paragraph(new Run(new RunProperties(), new Text("Please note, effective 1 October 2017, ASIC Regulatory Guide 97 (RG97) has come into effect. The aim of the legislation to which RG97 relates is to drive greater consistency in how financial product providers disclose their fees. For many products, some of these costs were previously included in the unit price, or disclosed as alternative fee types. Due to the magnitude of this industry wide change, at the time of production of this Statement of Advice, the new fee breakdown for your existing fund may not have been provided to our approved investment research platform. As such, there may be a fee variation between what has been disclosed above and the new fee disclosure breakdown in your Product Disclosure Statement. Based on ASICâ€™s own assessment, they have found the average increase across all reported superannuation data to be 0.24%. For clients who hold default super funds, the average increase was about 0.23%. They have identified some cases where the increase was more than 1.00%. Whilst fees are an important consideration, you should consider the totality of our recommendations and how they align to your objectives.")));
                    //body.Append(commentary2);
                }
            }




        }
        private void AddReplacementOfInvestmentProduct(Body body, CF[] currentAssests, PF[] proposedAssets, AlternativeFund[] alternativeAssets, BasicDetails clientDetails, Color orange)
        {

            var clientproposedAssets = proposedAssets.Where(c => c.owner == "Client").ToArray();
            var partnerproposedAssets = proposedAssets.Where(c => c.owner == "Partner").ToArray();
            var jointproposedAssets = proposedAssets.Where(c => c.owner == "Joint").ToArray();

            if (clientproposedAssets.Length > 0 || partnerproposedAssets.Length > 0 || jointproposedAssets.Length > 0)
            {
              
            }

           

            //Client
            if (clientproposedAssets != null && clientproposedAssets.Length > 0)
            {

                var feeDisplay = new List<String>();
                var transactionDisplay = new List<String>();

                var proposedProducts = new List<PF>();
                foreach (PF pp in clientproposedAssets)
                {
                    var current = currentAssests.Where(a => a.proposedId == pp.id);
                    if (current.Count() == 1 && (pp.productId == current.First().productId))
                    {
                        var prop = pp.data.Select(x => x.Apircode).ToArray();
                        var curr = current.First().data.Select(x => x.Apircode).ToArray();

                        var diff = false;
                        if (prop.Length == curr.Length)
                        {
                            foreach (var proposed in pp.data)
                            {
                                var isExist = current.First().data.Where(x => x.Apircode == proposed.Apircode).FirstOrDefault();
                                if (isExist != null)
                                {
                                    if (proposed.Value != isExist.Value)
                                    {
                                        diff = true;
                                    }
                                }
                            }

                        }

                        if (((prop.Length == curr.Length && prop.Intersect(curr).Count() == prop.Length) == false) || (diff == true))
                        {
                            proposedProducts.Add(pp);
                        }
                    }
                }

                if (proposedProducts.Any())
                {
                    //TODO:Common Fix
                    Paragraph break5 = new Paragraph(new Run(new Break() { Type = BreakValues.Page }));
                    body.Append(break5);
                    Paragraph InvestmentProductReplacement = new Paragraph(new Run(new RunProperties(new FontSize { Val = "40" }, new Color() { Val = "ED7D27" }), new Text("Replacement of investment product")));
                    body.Append(InvestmentProductReplacement);

                    Paragraph s1 = body.AppendChild(new Paragraph());
                    Run r1 = s1.AppendChild(new Run());
                    RunProperties runProperties1 = r1.AppendChild(new RunProperties());
                    Color black = new Color() { Val = "000000" };
                    runProperties1.AppendChild(black);
                    r1.AppendChild(new Text("We have recommended you rebalance the funds within your existing products. The tables below show the costs of your current investments and what costs will apply with the recommended investments based on our research."));

                    Paragraph paragraph14 = new Paragraph() { RsidParagraphMarkRevision = "00482D19", RsidParagraphAddition = "001A4A50", RsidParagraphProperties = "00A85FEB", RsidRunAdditionDefault = "001A4A50" };

                    ParagraphProperties paragraphProperties14 = new ParagraphProperties();
                    SuppressAutoHyphens suppressAutoHyphens14 = new SuppressAutoHyphens();
                    SpacingBetweenLines spacingBetweenLines14 = new SpacingBetweenLines() { After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto };
                    Justification justification4 = new Justification() { Val = JustificationValues.Both };

                    ParagraphMarkRunProperties paragraphMarkRunProperties14 = new ParagraphMarkRunProperties();
                    RunFonts runFonts36 = new RunFonts() { Ascii = "Verdana", HighAnsi = "Verdana", EastAsia = "Calibri", ComplexScript = "Verdana" };
                    FontSize fontSize35 = new FontSize() { Val = "18" };
                    Languages languages33 = new Languages() { Val = "en-AU", EastAsia = "zh-CN" };

                    paragraphMarkRunProperties14.Append(runFonts36);
                    paragraphMarkRunProperties14.Append(fontSize35);
                    paragraphMarkRunProperties14.Append(languages33);

                    paragraphProperties14.Append(suppressAutoHyphens14);
                    paragraphProperties14.Append(spacingBetweenLines14);
                    paragraphProperties14.Append(justification4);
                    paragraphProperties14.Append(paragraphMarkRunProperties14);
                    body.AppendChild(paragraph14);

                    //Run linebreak = new Run(new Break());
                    //Paragraph replacement = new Paragraph();
                    //replacement.Append(new OpenXmlElement[] { new Run(new RunProperties(), new Text("We have recommended you rebalance the funds within your existing products. The tables below show the costs of your current investments and what costs will apply with the recommended investments based on our research.")), (Run)linebreak.CloneNode(true) });
                    //body.Append(replacement);

                    foreach (PF proposedProduct in proposedProducts)

                    {
                        var existingProducts = new List<CF>();
                        var alternativeProducts = new List<AlternativeFund>();
                        var alternative = alternativeAssets.Where(a => a.proposedId == proposedProduct.id);
                        alternativeProducts.AddRange(alternative);

                        var current = currentAssests.Where(a => a.proposedId == proposedProduct.id);
                        existingProducts.AddRange(current);

                        var isExisting = existingProducts.Where(z => z.owner != "Client");
                        var isAlternate = alternativeProducts.Where(z => z.owner != "Client");
                        bool notClient = false;
                        if (isExisting.Count() > 0 || isAlternate.Count() > 0)
                        {
                            notClient = true;
                        }

                        // Paragraph s2 = body.AppendChild(new Paragraph(new Run(new RunProperties(new Bold(), new FontSize { Val = "24" }, new Color() { Val = "ED7D27" }), new Text("Comparison costs for " + clientDetails.ClientName + " - " + proposedProduct.product))));
                        Paragraph s2 = body.AppendChild(new Paragraph(new Run(new RunProperties(new Bold(), new FontSize { Val = "24" }), new Text("Comparison costs for " + clientDetails.ClientName + " - " + proposedProduct.product))));

                        //New Table
                        if (proposedProduct != null)
                        {
                            Table table = body.AppendChild(new Table());
                            TableProperties tableProp = new TableProperties();
                            TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                            TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                            tableProp.Append(tableStyle, tableWidth);
                            table.AppendChild(tableProp);


                            ////Header
                            TableRow header = new TableRow();

                            TableCell h1 = new TableCell();

                            TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties hcp2 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                            ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                            ParagraphProperties hpp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                            Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                            hpp1.AppendChild((Justification)centerJustify.CloneNode(true));

                            TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                            Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                            TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                            hcp.Append(hcm1, hs1, hcb);
                            hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                            hcp2.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true));

                            h1.Append(hcp);

                            h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                            h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Plan Costs"))));
                            header.Append(h1);

                           
                            if (proposedProduct != null)
                            {
                                var existing = existingProducts.Where(z => z.proposedId == proposedProduct.id);

                                TableCellProperties tableCellProperties = new TableCellProperties();
                                HorizontalMerge horizontalMerge = new HorizontalMerge()
                                {
                                    Val = MergedCellValues.Restart
                                };
                                tableCellProperties.Append(horizontalMerge);

                                TableCellProperties tableCellProperties1 = new TableCellProperties();
                                HorizontalMerge horizontalMerge1 = new HorizontalMerge()
                                {
                                    Val = MergedCellValues.Continue
                                };
                                tableCellProperties1.Append(horizontalMerge1);


                                foreach (CF ex in existing)
                                {
                                    foreach (ProductFeesDisplay pfd in ex.feeDisplay)
                                    {
                                        if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                                        {
                                            bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                            if (!isExist)
                                            {
                                                feeDisplay.Add(pfd.name.Trim());
                                            }
                                        }
                                    }
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                                    h.Append((TableCellProperties)hcp1.CloneNode(true));
                                    if (notClient)
                                    {
                                        var name = "";
                                        if (ex.owner == "Client")
                                        {
                                            name = clientDetails.ClientName;
                                        }
                                        else if (ex.owner == "Partner")
                                        {
                                            name = clientDetails.PartnerName;
                                        }
                                        else
                                        {
                                            name = "Joint";
                                        }
                                      
                                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing " + ex.product + " - " + name))));

                                    }
                                    else
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing " + ex.product))));
                                    }
                                    header.Append(h);
                                }
                            }

                            if (proposedProduct != null)
                            {
                                foreach (ProductFeesDisplay pfd in proposedProduct.feeDisplay)
                                {
                                    if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                                    {
                                        bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                        if (!isExist)
                                        {
                                            feeDisplay.Add(pfd.name.Trim());
                                        }
                                    }
                                }
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                                h.Append((TableCellProperties)hcp1.CloneNode(true));
                                if (notClient)
                                {
                                    var name = "";
                                    if (proposedProduct.owner == "Client")
                                    {
                                        name = clientDetails.ClientName;
                                    }
                                    else if (proposedProduct.owner == "Partner")
                                    {
                                        name = clientDetails.PartnerName;
                                    }
                                    else
                                    {
                                        name = "Joint";
                                    }
                                    h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed " + proposedProduct.product + " - " + name))));

                                }
                                else
                                {
                                    h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed " + proposedProduct.product))));
                                }
                                header.Append(h);
                            }
                            if (proposedProduct != null)
                            {
                                var alt = alternativeProducts.Where(z => z.proposedId == proposedProduct.id);

                                TableCellProperties tableCellProperties = new TableCellProperties();
                                HorizontalMerge horizontalMerge = new HorizontalMerge()
                                {
                                    Val = MergedCellValues.Restart
                                };
                                tableCellProperties.Append(horizontalMerge);

                                TableCellProperties tableCellProperties1 = new TableCellProperties();
                                HorizontalMerge horizontalMerge1 = new HorizontalMerge()
                                {
                                    Val = MergedCellValues.Continue
                                };
                                tableCellProperties1.Append(horizontalMerge1);


                                foreach (AlternativeFund alternate in alt)
                                {
                                    foreach (ProductFeesDisplay pfd in alternate.feeDisplay)
                                    {
                                        if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                                        {
                                            bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                            if (!isExist)
                                            {
                                                feeDisplay.Add(pfd.name.Trim());
                                            }
                                        }
                                    }
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                                    h.Append((TableCellProperties)hcp1.CloneNode(true));
                                    if (notClient)
                                    {
                                        var name = "";
                                        if (alternate.owner == "Client")
                                        {
                                            name = clientDetails.ClientName;
                                        }
                                        else if (alternate.owner == "Partner")
                                        {
                                            name = clientDetails.PartnerName;
                                        }
                                        else
                                        {
                                            name = "Joint";
                                        }
                                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternative " + alternate.product + " - " + name))));

                                    }
                                    else
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternative " + alternate.product))));
                                    }
                                    header.Append(h);
                                }
                            }

                            table.Append(header);



                            //Body

                            TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                            TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                            TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                            TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                            TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                            ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                            ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                            pp.AppendChild((Justification)centerJustify.CloneNode(true));
                            tcp.Append(tcbR, tcm);
                            tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                            ////Investment Portfolio

                            //TableRow InvestmentPortfolio = new TableRow();
                            //TableCell dCell0 = new TableCell();
                            //dCell0.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            //dCell0.Append((TableCellProperties)tcpN.CloneNode(true));
                            //dCell0.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Investment"))));
                            //InvestmentPortfolio.Append(dCell0);

                            //foreach (CF existing in existingProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    if (existing.data.Length == 1)
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text(existing.data[0].FundName))));

                            //    }
                            //    else
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text("Refer to Recommended portfolio table above"))));

                            //    }
                            //    InvestmentPortfolio.Append(h);
                            //}
                            //if (proposedProduct != null)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    if (proposedProduct.data.Length == 1)
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text(proposedProduct.data[0].FundName))));

                            //    }
                            //    else
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text("Refer to Recommended portfolio table above"))));

                            //    }
                            //    InvestmentPortfolio.Append(h);
                            //}
                            //foreach (AlternativeFund alternate in alternativeProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    if(alternate.data.Length == 1)
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text(alternate.data[0].FundName))));

                            //    }
                            //    else
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text(""))));

                            //    }
                            //    InvestmentPortfolio.Append(h);
                            //}

                            //table.Append(InvestmentPortfolio);



                            TableRow AccountBalance = new TableRow();
                            TableCell dCell = new TableCell();
                            dCell.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            dCell.Append((TableCellProperties)tcpN.CloneNode(true));
                            dCell.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Amount"))));
                            AccountBalance.Append(dCell);

                            foreach (CF existing in existingProducts)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", existing.value)))));
                                AccountBalance.Append(h);
                            }
                            if (proposedProduct != null)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", proposedProduct.value)))));
                                AccountBalance.Append(h);
                            }
                            foreach (AlternativeFund alternate in alternativeProducts)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", alternate.value)))));
                                AccountBalance.Append(h);
                            }

                            table.Append(AccountBalance);



                            ////Empty
                            //TableRow ProductFees = new TableRow();
                            //TableCell dCell8 = new TableCell();
                            //dCell8.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            //dCell8.Append((TableCellProperties)tcpN.CloneNode(true));
                            //dCell8.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Product Fees"))));
                            //ProductFees.Append(dCell8);

                            //foreach (CF existing in existingProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcpN.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(""))));
                            //    ProductFees.Append(h);
                            //}
                            //if (proposedProduct != null)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcpN.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(""))));
                            //    ProductFees.Append(h);
                            //}
                            //foreach (AlternativeFund alternate in alternativeProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcpN.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(""))));
                            //    ProductFees.Append(h);
                            //}

                            //table.Append(ProductFees);


                            foreach (String s in feeDisplay)
                            {
                                TableRow feeName = new TableRow();
                                TableCell fee = new TableCell();
                                fee.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                                fee.Append((TableCellProperties)tcpN.CloneNode(true));
                                fee.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(s))));
                                feeName.Append(fee);

                                foreach (CF existing in existingProducts)
                                {
                                    var feeDetails = existing.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    h.Append((TableCellProperties)tcp.CloneNode(true));
                                    h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    if (feeDetails.percentage == 0 && feeDetails.val == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                                    }
                                    else if (feeDetails.percentage == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                                    }
                                    else if (feeDetails.percentage != 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                                    }
                                    feeName.Append(h);
                                }
                                if (proposedProduct != null)
                                {
                                    var feeDetails = proposedProduct.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    h.Append((TableCellProperties)tcp.CloneNode(true));
                                    h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    if (feeDetails.percentage == 0 && feeDetails.val == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                                    }
                                    else if (feeDetails.percentage == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                                    }
                                    else if (feeDetails.percentage != 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                                    }
                                    feeName.Append(h);
                                }
                                foreach (AlternativeFund alternate in alternativeProducts)
                                {
                                    var feeDetails = alternate.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    h.Append((TableCellProperties)tcp.CloneNode(true));
                                    h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    if (feeDetails.percentage == 0 && feeDetails.val == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                                    }
                                    else if (feeDetails.percentage == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                                    }
                                    else if (feeDetails.percentage != 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                                    }
                                    feeName.Append(h);
                                }




                                table.Append(feeName);



                            }



                            //Total
                            TableRow NetOngoingCosts = new TableRow();
                            TableCell dCell2 = new TableCell();
                            dCell2.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            dCell2.Append((TableCellProperties)tcpN.CloneNode(true));
                            dCell2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total Portfolio Fees"))));
                            NetOngoingCosts.Append(dCell2);

                            foreach (CF existing in existingProducts)
                            {
                                //TableCell h = new TableCell();
                                //h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                //h.Append((TableCellProperties)tcp.CloneNode(true));
                                //h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", existing.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val))))));
                                //NetOngoingCosts.Append(h);

                              
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", existing.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val))))));
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", (Math.Round(existing.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val)) / existing.value) * 100) + "%"))));
                                NetOngoingCosts.Append(h);
                        }
                            if (proposedProduct != null)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", proposedProduct.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val))))));
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", (Math.Round(proposedProduct.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val)) / proposedProduct.value) * 100) + "%"))));
                                NetOngoingCosts.Append(h);
                            }
                            foreach (AlternativeFund alternate in alternativeProducts)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", alternate.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val))))));
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", (Math.Round(alternate.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val)) / alternate.value) * 100) + "%"))));
                                NetOngoingCosts.Append(h);
                            }

                            table.Append(NetOngoingCosts);

                            //Percentage

                            //TableRow Percentage = new TableRow();
                            //TableCell dCell1 = new TableCell();
                            //dCell1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            //dCell1.Append((TableCellProperties)tcpN.CloneNode(true));
                            //dCell1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total Portfolio Fees (%)"))));
                            //Percentage.Append(dCell1);

                            //foreach (CF existing in existingProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(String.Format("{0:n}",  (Math.Round(existing.feeDisplay.Sum(item => item.val)) / existing.value) * 100) + "%"))));
                            //    Percentage.Append(h);
                            //}
                            //if (proposedProduct != null)
                            //{
                               
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(String.Format("{0:n}", (Math.Round(proposedProduct.feeDisplay.Sum(item => item.val)) / proposedProduct.value) * 100) + "%"))));
                            //    Percentage.Append(h);
                            //}
                            //foreach (AlternativeFund alternate in alternativeProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(String.Format("{0:n}", (Math.Round(alternate.feeDisplay.Sum(item => item.val)) / alternate.value) * 100) + "%"))));
                            //    Percentage.Append(h);
                            //}

                            //table.Append(Percentage);




                            //Difference
                            //Total
                            TableRow Difference = new TableRow();
                            TableCell dCell3 = new TableCell();
                            dCell3.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            dCell3.Append((TableCellProperties)tcpN.CloneNode(true));
                            dCell3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Difference in costs"))));
                            Difference.Append(dCell3);

                            foreach (CF existing in existingProducts)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(""))));
                                Difference.Append(h);
                            }
                            if (proposedProduct != null)
                            {

                                decimal sum = 0;
                                IEnumerable<RopcurrentProducts> list = this.mapper.Map<IEnumerable<RopcurrentProducts>>(from s in this.context.RopcurrentProducts.AsEnumerable() where s.ProposedProduct == proposedProduct.id select s).ToList();
                                foreach (RopcurrentProducts cp in list)
                                {
                                    var c = currentAssests.Where(a => a.id == cp.RecId).FirstOrDefault();
                                    sum += c.feeDisplay.Sum(item => item.val);
                                }
                          
                                var display = "";
                                var value = Math.Round(proposedProduct.feeDisplay.Sum(item => item.val)) - Math.Round(sum);
                                if (value > 0)
                                {
                                    display = " Additional $" + String.Format("{0:n0}", Math.Abs(value));
                                }
                                else if (value < 0)
                                {
                                    display = " Less $" + String.Format("{0:n0}", Math.Abs(value));
                                }
                                else
                                {
                                    display = "$0";
                                }

                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(display))));
                                Difference.Append(h);
                            }
                            foreach (AlternativeFund alternate in alternativeProducts)
                            {
                                decimal sum = 0;
                                IEnumerable<RopcurrentProducts> list = this.mapper.Map<IEnumerable<RopcurrentProducts>>(from s in this.context.RopcurrentProducts.AsEnumerable() where s.ProposedProduct == alternate.proposedId select s).ToList();
                                foreach (RopcurrentProducts cp in list)
                                {
                                    var c = currentAssests.Where(a => a.id == cp.RecId).FirstOrDefault();
                                    sum += c.feeDisplay.Sum(item => item.val);
                                }
                                //IEnumerable<CurrentClientProducts> list2 = this.mapper.Map<IEnumerable<CurrentClientProducts>>(from s in this.context.ProductReplacement.AsEnumerable() join sa in this.context.CurrentClientProducts.AsEnumerable() on s.CurrentId equals sa.RecId where s.ProposedId == alternate.proposedId select sa).ToList();
                                //foreach (CurrentClientProducts cp in list2)
                                //{
                                //    var current = currentAssests.Where(a => a.id == cp.RecId).FirstOrDefault();
                                //    sum += current.feeDisplay.Sum(item => item.val);
                                //}

                                var display = "";
                                var value = Math.Round(alternate.feeDisplay.Sum(item => item.val)) - Math.Round(sum);
                                if (value > 0)
                                {
                                    display = " Additional $" + String.Format("{0:n0}", Math.Abs(value));
                                }
                                else if (value < 0)
                                {
                                    display = " Less $" + String.Format("{0:n0}", Math.Abs(value));
                                }
                                else
                                {
                                    display = "$0";
                                }

                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(display))));
                                Difference.Append(h);
                            }

                            table.Append(Difference);
                        }

                        if (proposedProduct.feeDisplay.Length != 0)
                        {
                            Run linebreak0 = new Run(new Break());
                            Paragraph transactionCost = new Paragraph();
                            transactionCost.Append(new OpenXmlElement[] { (Run)linebreak0.CloneNode(true), new Run(new RunProperties(new Bold(), new Color() { Val = "ED7D27" }), new Text("Initial Product costs ")) });
                            body.Append(transactionCost);

                            Paragraph commentary = new Paragraph(new Run(new RunProperties(), new Text("The following table shows the initial product costs that may apply to rebalance your existing products with the recommended products. All costs are estimates which may vary at the time of implementation.")));
                            body.Append(commentary);

                            //New Table

                            Table table = body.AppendChild(new Table());
                            TableProperties tableProp = new TableProperties();
                            TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                            TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                            tableProp.Append(tableStyle, tableWidth);
                            table.AppendChild(tableProp);


                            ////Header
                            TableRow header = new TableRow();
                            TableCell h1 = new TableCell();

                            TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                            ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                            ParagraphProperties hpp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                            Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                            hpp1.AppendChild((Justification)centerJustify.CloneNode(true));

                            TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                            Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                            TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                            hcp.Append(hcm1, hs1, hcb);
                            hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                            h1.Append(hcp);

                            h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                            h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Plan Costs"))));
                            header.Append(h1);

                            foreach (CF existing in existingProducts)
                            {
                                foreach (ProductFeesDisplay pfd in existing.feeDisplay)
                                {
                                    if (pfd.feeType.Trim() == "transactional")
                                    {
                                        bool isExist = transactionDisplay.Any(pfd.name.Trim().Contains);
                                        if (!isExist)
                                        {
                                            transactionDisplay.Add(pfd.name.Trim());
                                        }
                                    }
                                }

                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                                h.Append((TableCellProperties)hcp1.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing " + existing.product))));
                                header.Append(h);
                            }
                            if(proposedProduct !=null)
                            {
                                foreach (ProductFeesDisplay pfd in proposedProduct.feeDisplay)
                                {
                                    if (pfd.feeType.Trim() == "transactional")
                                    {
                                        bool isExist = transactionDisplay.Any(pfd.name.Trim().Contains);
                                        if (!isExist)
                                        {
                                            transactionDisplay.Add(pfd.name.Trim());
                                        }
                                    }
                                }
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                                h.Append((TableCellProperties)hcp1.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed " + proposedProduct.product))));
                                header.Append(h);
                            }

                            table.Append(header);
                            TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                            TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                            TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                            TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                            TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                            ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                            ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                            pp.AppendChild((Justification)centerJustify.CloneNode(true));
                            tcp.Append(tcbR, tcm);
                            tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                            var transaction = new List<string>();
                            transaction.Add("Exit/Withdrawal fees");
                            transaction.Add("Other transaction costs");
                            transaction.Add("Buy/Sell Costs");
                            transaction.Add("Managed fund transactions");
                            transaction.Add("Brokerage Fee");

                            var transactionDisplaySorted = transactionDisplay.OrderBy(d => transaction.IndexOf(d.Trim())).ToList();
                            foreach (String s in transactionDisplaySorted)
                            {
                                TableRow feeName = new TableRow();
                                TableCell fee = new TableCell();
                                fee.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                                fee.Append((TableCellProperties)tcpN.CloneNode(true));
                                fee.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(s))));
                                feeName.Append(fee);

                                foreach (CF existing in existingProducts)
                                {
                                    var feeDetails = existing.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    h.Append((TableCellProperties)tcp.CloneNode(true));
                                    h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                                    feeName.Append(h);
                                }
                                if (proposedProduct != null)
                                {
                                    var feeDetails = proposedProduct.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    h.Append((TableCellProperties)tcp.CloneNode(true));
                                    h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                                    feeName.Append(h);
                                }

                                table.Append(feeName);



                            }

                            Paragraph commentary1 = new Paragraph(new Run(new RunProperties(new Italic()), new Text("*The buy/sell spread is the full buy/sell spread on the recommended investment purchases. It doesnâ€™t include the sell spread for the recommended investment sales as this is typically already reflected in your current investment balance.")));
                            body.Append(commentary1);

                            //Paragraph commentary2 = new Paragraph(new Run(new RunProperties(), new Text("Please note, effective 1 October 2017, ASIC Regulatory Guide 97 (RG97) has come into effect. The aim of the legislation to which RG97 relates is to drive greater consistency in how financial product providers disclose their fees. For many products, some of these costs were previously included in the unit price, or disclosed as alternative fee types. Due to the magnitude of this industry wide change, at the time of production of this Statement of Advice, the new fee breakdown for your existing fund may not have been provided to our approved investment research platform. As such, there may be a fee variation between what has been disclosed above and the new fee disclosure breakdown in your Product Disclosure Statement. Based on ASICâ€™s own assessment, they have found the average increase across all reported superannuation data to be 0.24%. For clients who hold default super funds, the average increase was about 0.23%. They have identified some cases where the increase was more than 1.00%. Whilst fees are an important consideration, you should consider the totality of our recommendations and how they align to your objectives.")));
                            //body.Append(commentary2);
                        }


                    }
                 
                }
            }

            //Partner
            if (partnerproposedAssets != null && partnerproposedAssets.Length > 0)
            {

                var feeDisplay = new List<String>();
                var transactionDisplay = new List<String>(); 
                var proposedProducts = new List<PF>();
                foreach (PF pp in partnerproposedAssets)
                {
                    var current = currentAssests.Where(a => a.proposedId == pp.id);
                    if (current.Count() == 1 && (pp.productId == current.First().productId))
                    {
                        var prop = pp.data.Select(x => x.Apircode).ToArray();
                        var curr = current.First().data.Select(x => x.Apircode).ToArray();

                        var diff = false;
                        if (prop.Length == curr.Length)
                        {
                            foreach (var proposed in pp.data)
                            {
                                var isExist = current.First().data.Where(x => x.Apircode == proposed.Apircode).FirstOrDefault();
                                if (isExist != null)
                                {
                                    if (proposed.Value != isExist.Value)
                                    {
                                        diff = true;
                                    }
                                }
                            }

                        }

                        if (((prop.Length == curr.Length && prop.Intersect(curr).Count() == prop.Length) == false) || (diff == true))
                        {
                            proposedProducts.Add(pp);
                        }
                    }
                }

                if (proposedProducts.Any())
                {
                    Run linebreak = new Run(new Break());
                    Paragraph replacement = new Paragraph();
                    replacement.Append(new OpenXmlElement[] { (Run)linebreak.CloneNode(true) });
                    body.Append(replacement);

                    foreach (PF proposedProduct in proposedProducts)

                    {
                        var existingProducts = new List<CF>();
                        var alternativeProducts = new List<AlternativeFund>();
                        var alternative = alternativeAssets.Where(a => a.proposedId == proposedProduct.id);
                        alternativeProducts.AddRange(alternative);

                        var current = currentAssests.Where(a => a.proposedId == proposedProduct.id);
                        existingProducts.AddRange(current);

                        var isExisting = existingProducts.Where(z => z.owner != "Partner");
                        var isAlternate = alternativeProducts.Where(z => z.owner != "Partner");
                        bool notClient = false;
                        if (isExisting.Count() > 0 || isAlternate.Count() > 0)
                        {
                            notClient = true;
                        }

                        Paragraph s2 = body.AppendChild(new Paragraph(new Run(new RunProperties(new Bold(), new FontSize { Val = "24" }, new Color() { Val = "ED7D27" }), new Text("Comparison costs for " + clientDetails.PartnerName + " - " + proposedProduct.product))));

                        //New Table
                        if (proposedProduct != null)
                        {
                            Table table = body.AppendChild(new Table());
                            TableProperties tableProp = new TableProperties();
                            TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                            TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                            tableProp.Append(tableStyle, tableWidth);
                            table.AppendChild(tableProp);


                            ////Header
                            TableRow header = new TableRow();

                            TableCell h1 = new TableCell();

                            TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties hcp2 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                            ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                            ParagraphProperties hpp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                            Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                            hpp1.AppendChild((Justification)centerJustify.CloneNode(true));

                            TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                            Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                            TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                            hcp.Append(hcm1, hs1, hcb);
                            hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                            hcp2.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true));

                            h1.Append(hcp);

                            h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                            h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(proposedProduct.product))));
                            header.Append(h1);

                         
                            if (proposedProduct != null)
                            {
                                var existing = existingProducts.Where(z => z.proposedId == proposedProduct.id);

                                TableCellProperties tableCellProperties = new TableCellProperties();
                                HorizontalMerge horizontalMerge = new HorizontalMerge()
                                {
                                    Val = MergedCellValues.Restart
                                };
                                tableCellProperties.Append(horizontalMerge);

                                TableCellProperties tableCellProperties1 = new TableCellProperties();
                                HorizontalMerge horizontalMerge1 = new HorizontalMerge()
                                {
                                    Val = MergedCellValues.Continue
                                };
                                tableCellProperties1.Append(horizontalMerge1);


                                foreach (CF ex in existing)
                                {
                                    foreach (ProductFeesDisplay pfd in ex.feeDisplay)
                                    {
                                        if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                                        {
                                            bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                            if (!isExist)
                                            {
                                                feeDisplay.Add(pfd.name.Trim());
                                            }
                                        }
                                    }
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                                    h.Append((TableCellProperties)hcp1.CloneNode(true));
                                    if (notClient)
                                    {
                                        var name = "";
                                        if (ex.owner == "Client")
                                        {
                                            name = clientDetails.ClientName;
                                        }
                                        else if (ex.owner == "Partner")
                                        {
                                            name = clientDetails.PartnerName;
                                        }
                                        else
                                        {
                                            name = "Joint";
                                        }

                                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing - " + ex.product + " - " + name))));

                                    }
                                    else
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing - " + ex.product))));
                                    }
                                    header.Append(h);
                                }
                            }
                            if (proposedProduct != null)
                            {
                                foreach (ProductFeesDisplay pfd in proposedProduct.feeDisplay)
                                {
                                    if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                                    {
                                        bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                        if (!isExist)
                                        {
                                            feeDisplay.Add(pfd.name.Trim());
                                        }
                                    }
                                }
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                                h.Append((TableCellProperties)hcp1.CloneNode(true));
                                if (notClient)
                                {
                                    var name = "";
                                    if (proposedProduct.owner == "Client")
                                    {
                                        name = clientDetails.ClientName;
                                    }
                                    else if (proposedProduct.owner == "Partner")
                                    {
                                        name = clientDetails.PartnerName;
                                    }
                                    else
                                    {
                                        name = "Joint";
                                    }
                                    h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed - " + name))));

                                }
                                else
                                {
                                    h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed "))));
                                }
                                header.Append(h);
                            }
                            if (proposedProduct != null)
                            {
                                var alt = alternativeProducts.Where(z => z.proposedId == proposedProduct.id);

                                TableCellProperties tableCellProperties = new TableCellProperties();
                                HorizontalMerge horizontalMerge = new HorizontalMerge()
                                {
                                    Val = MergedCellValues.Restart
                                };
                                tableCellProperties.Append(horizontalMerge);

                                TableCellProperties tableCellProperties1 = new TableCellProperties();
                                HorizontalMerge horizontalMerge1 = new HorizontalMerge()
                                {
                                    Val = MergedCellValues.Continue
                                };
                                tableCellProperties1.Append(horizontalMerge1);


                                foreach (AlternativeFund alternate in alt)
                                {
                                    foreach (ProductFeesDisplay pfd in alternate.feeDisplay)
                                    {
                                        if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                                        {
                                            bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                            if (!isExist)
                                            {
                                                feeDisplay.Add(pfd.name.Trim());
                                            }
                                        }
                                    }
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                                    h.Append((TableCellProperties)hcp1.CloneNode(true));
                                    if (notClient)
                                    {
                                        var name = "";
                                        if (alternate.owner == "Client")
                                        {
                                            name = clientDetails.ClientName;
                                        }
                                        else if (alternate.owner == "Partner")
                                        {
                                            name = clientDetails.PartnerName;
                                        }
                                        else
                                        {
                                            name = "Joint";
                                        }
                                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternative - " + alternate.product + " - " + name))));

                                    }
                                    else
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternative - " + alternate.product))));
                                    }
                                    header.Append(h);
                                }
                            }

                            table.Append(header);



                            //Body

                            TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                            TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                            TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                            TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                            TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                            ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                            ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                            pp.AppendChild((Justification)centerJustify.CloneNode(true));
                            tcp.Append(tcbR, tcm);
                            tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                            //Investment Portfolio

                            //TableRow InvestmentPortfolio = new TableRow();
                            //TableCell dCell0 = new TableCell();
                            //dCell0.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            //dCell0.Append((TableCellProperties)tcpN.CloneNode(true));
                            //dCell0.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Investment"))));
                            //InvestmentPortfolio.Append(dCell0);

                            //foreach (CF existing in existingProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    if (existing.data.Length == 1)
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text(existing.data[0].FundName))));

                            //    }
                            //    else
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text("Refer to Recommended portfolio table above"))));

                            //    }
                            //    InvestmentPortfolio.Append(h);
                            //}
                            //if (proposedProduct != null)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    if (proposedProduct.data.Length == 1)
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text(proposedProduct.data[0].FundName))));

                            //    }
                            //    else
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text("Refer to Recommended portfolio table above"))));

                            //    }
                            //    InvestmentPortfolio.Append(h);
                            //}
                            //foreach (AlternativeFund alternate in alternativeProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    if (alternate.data.Length == 1)
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text(alternate.data[0].FundName))));

                            //    }
                            //    else
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text(""))));

                            //    }
                            //    InvestmentPortfolio.Append(h);
                            //}

                            //table.Append(InvestmentPortfolio);



                            TableRow AccountBalance = new TableRow();
                            TableCell dCell = new TableCell();
                            dCell.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            dCell.Append((TableCellProperties)tcpN.CloneNode(true));
                            dCell.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Amount"))));
                            AccountBalance.Append(dCell);

                            foreach (CF existing in existingProducts)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", existing.value)))));
                                AccountBalance.Append(h);
                            }
                            if (proposedProduct != null)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", proposedProduct.value)))));
                                AccountBalance.Append(h);
                            }
                            foreach (AlternativeFund alternate in alternativeProducts)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", alternate.value)))));
                                AccountBalance.Append(h);
                            }

                            table.Append(AccountBalance);



                            //Empty
                            //TableRow ProductFees = new TableRow();
                            //TableCell dCell8 = new TableCell();
                            //dCell8.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            //dCell8.Append((TableCellProperties)tcpN.CloneNode(true));
                            //dCell8.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Product Fees"))));
                            //ProductFees.Append(dCell8);

                            //foreach (CF existing in existingProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcpN.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(""))));
                            //    ProductFees.Append(h);
                            //}
                            //if (proposedProduct != null)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcpN.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(""))));
                            //    ProductFees.Append(h);
                            //}
                            //foreach (AlternativeFund alternate in alternativeProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcpN.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(""))));
                            //    ProductFees.Append(h);
                            //}

                            //table.Append(ProductFees);


                            foreach (String s in feeDisplay)
                            {
                                TableRow feeName = new TableRow();
                                TableCell fee = new TableCell();
                                fee.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                                fee.Append((TableCellProperties)tcpN.CloneNode(true));
                                fee.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(s))));
                                feeName.Append(fee);

                                foreach (CF existing in existingProducts)
                                {
                                    var feeDetails = existing.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    h.Append((TableCellProperties)tcp.CloneNode(true));
                                    h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    if (feeDetails.percentage == 0 && feeDetails.val == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                                    }
                                    else if (feeDetails.percentage == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                                    }
                                    else if (feeDetails.percentage != 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                                    }
                                    feeName.Append(h);
                                }
                                if (proposedProduct != null)
                                {
                                    var feeDetails = proposedProduct.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    h.Append((TableCellProperties)tcp.CloneNode(true));
                                    h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    if (feeDetails.percentage == 0 && feeDetails.val == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                                    }
                                    else if (feeDetails.percentage == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                                    }
                                    else if (feeDetails.percentage != 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                                    }
                                    feeName.Append(h);
                                }
                                foreach (AlternativeFund alternate in alternativeProducts)
                                {
                                    var feeDetails = alternate.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    h.Append((TableCellProperties)tcp.CloneNode(true));
                                    h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    if (feeDetails.percentage == 0 && feeDetails.val == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                                    }
                                    else if (feeDetails.percentage == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                                    }
                                    else if (feeDetails.percentage != 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                                    }
                                    feeName.Append(h);
                                }




                                table.Append(feeName);



                            }



                            //Total
                            TableRow NetOngoingCosts = new TableRow();
                            TableCell dCell2 = new TableCell();
                            dCell2.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            dCell2.Append((TableCellProperties)tcpN.CloneNode(true));
                            dCell2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total Portfolio Fees"))));
                            NetOngoingCosts.Append(dCell2);

                            foreach (CF existing in existingProducts)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", existing.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val))))));
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", (Math.Round(existing.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val)) / existing.value) * 100) + "%"))));
                                NetOngoingCosts.Append(h);
                            }
                            if (proposedProduct != null)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", proposedProduct.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val))))));
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", (Math.Round(proposedProduct.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val)) / proposedProduct.value) * 100) + "%"))));
                                NetOngoingCosts.Append(h);
                            }
                            foreach (AlternativeFund alternate in alternativeProducts)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", alternate.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val))))));
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", (Math.Round(alternate.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val)) / alternate.value) * 100) + "%"))));
                                NetOngoingCosts.Append(h);
                            }

                            table.Append(NetOngoingCosts);

                            //Percentage

                            //TableRow Percentage = new TableRow();
                            //TableCell dCell1 = new TableCell();
                            //dCell1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            //dCell1.Append((TableCellProperties)tcpN.CloneNode(true));
                            //dCell1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total Portfolio Fees (%)"))));
                            //Percentage.Append(dCell1);

                            //foreach (CF existing in existingProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(String.Format("{0:n}", (Math.Round(existing.feeDisplay.Sum(item => item.val)) / existing.value) * 100) + "%"))));
                            //    Percentage.Append(h);
                            //}
                            //if (proposedProduct != null)
                            //{

                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(String.Format("{0:n}", (Math.Round(proposedProduct.feeDisplay.Sum(item => item.val)) / proposedProduct.value) * 100) + "%"))));
                            //    Percentage.Append(h);
                            //}
                            //foreach (AlternativeFund alternate in alternativeProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(String.Format("{0:n}", (Math.Round(alternate.feeDisplay.Sum(item => item.val)) / alternate.value) * 100) + "%"))));
                            //    Percentage.Append(h);
                            //}

                            //table.Append(Percentage);




                            //Difference
                            //Total
                            TableRow Difference = new TableRow();
                            TableCell dCell3 = new TableCell();
                            dCell3.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            dCell3.Append((TableCellProperties)tcpN.CloneNode(true));
                            dCell3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Difference in costs"))));
                            Difference.Append(dCell3);

                            foreach (CF existing in existingProducts)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(""))));
                                Difference.Append(h);
                            }
                            if (proposedProduct != null)
                            {

                                decimal sum = 0;
                                IEnumerable<RopcurrentProducts> list = this.mapper.Map<IEnumerable<RopcurrentProducts>>(from s in this.context.RopcurrentProducts.AsEnumerable() where s.ProposedProduct == proposedProduct.id select s).ToList();
                                foreach (RopcurrentProducts cp in list)
                                {
                                    var c = currentAssests.Where(a => a.id == cp.RecId).FirstOrDefault();
                                    sum += c.feeDisplay.Sum(item => item.val);
                                }

                                var display = "";
                                var value = Math.Round(proposedProduct.feeDisplay.Sum(item => item.val)) - Math.Round(sum);
                                if (value > 0)
                                {
                                    display = " Additional $" + String.Format("{0:n0}", Math.Abs(value));
                                }
                                else if (value < 0)
                                {
                                    display = " Less $" + String.Format("{0:n0}", Math.Abs(value));
                                }
                                else
                                {
                                    display = "$0";
                                }

                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(display))));
                                Difference.Append(h);
                            }
                            foreach (AlternativeFund alternate in alternativeProducts)
                            {
                                decimal sum = 0;
                                IEnumerable<RopcurrentProducts> list = this.mapper.Map<IEnumerable<RopcurrentProducts>>(from s in this.context.RopcurrentProducts.AsEnumerable() where s.ProposedProduct == alternate.proposedId select s).ToList();
                                foreach (RopcurrentProducts cp in list)
                                {
                                    var c = currentAssests.Where(a => a.id == cp.RecId).FirstOrDefault();
                                    sum += c.feeDisplay.Sum(item => item.val);
                                }

                                var display = "";
                                var value = Math.Round(alternate.feeDisplay.Sum(item => item.val)) - Math.Round(sum);
                                if (value > 0)
                                {
                                    display = " Additional $" + String.Format("{0:n0}", Math.Abs(value));
                                }
                                else if (value < 0)
                                {
                                    display = " Less $" + String.Format("{0:n0}", Math.Abs(value));
                                }
                                else
                                {
                                    display = "$0";
                                }

                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(display))));
                                Difference.Append(h);
                            }

                            table.Append(Difference);
                        }

                        if (proposedProduct.feeDisplay.Length != 0)
                        {
                            Run linebreak0 = new Run(new Break());
                            Paragraph transactionCost = new Paragraph();
                            transactionCost.Append(new OpenXmlElement[] { (Run)linebreak0.CloneNode(true), new Run(new RunProperties(new Bold(), new Color() { Val = "ED7D27" }), new Text("Initial Product costs ")) });
                            body.Append(transactionCost);

                            Paragraph commentary = new Paragraph(new Run(new RunProperties(), new Text("The following table shows the initial product costs that may apply to replace your existing products with the recommended products. All costs are estimates which may vary at the time of implementation.")));
                            body.Append(commentary);

                            //New Table

                            Table table = body.AppendChild(new Table());
                            TableProperties tableProp = new TableProperties();
                            TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                            TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                            tableProp.Append(tableStyle, tableWidth);
                            table.AppendChild(tableProp);


                            ////Header
                            TableRow header = new TableRow();
                            TableCell h1 = new TableCell();

                            TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                            ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                            ParagraphProperties hpp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                            Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                            hpp1.AppendChild((Justification)centerJustify.CloneNode(true));

                            TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                            Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                            TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                            hcp.Append(hcm1, hs1, hcb);
                            hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                            h1.Append(hcp);

                            h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                            h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Plan Costs"))));
                            header.Append(h1);

                            foreach (CF existing in existingProducts)
                            {
                                foreach (ProductFeesDisplay pfd in existing.feeDisplay)
                                {
                                    if (pfd.feeType.Trim() == "transactional")
                                    {
                                        bool isExist = transactionDisplay.Any(pfd.name.Trim().Contains);
                                        if (!isExist)
                                        {
                                            transactionDisplay.Add(pfd.name.Trim());
                                        }
                                    }
                                }

                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                                h.Append((TableCellProperties)hcp1.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing " + existing.product))));
                                header.Append(h);
                            }
                            if (proposedProduct != null)
                            {
                                foreach (ProductFeesDisplay pfd in proposedProduct.feeDisplay)
                                {
                                    if (pfd.feeType.Trim() == "transactional")
                                    {
                                        bool isExist = transactionDisplay.Any(pfd.name.Trim().Contains);
                                        if (!isExist)
                                        {
                                            transactionDisplay.Add(pfd.name.Trim());
                                        }
                                    }
                                }
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                                h.Append((TableCellProperties)hcp1.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed " + proposedProduct.product))));
                                header.Append(h);
                            }

                            table.Append(header);
                            TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                            TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                            TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                            TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                            TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                            ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                            ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                            pp.AppendChild((Justification)centerJustify.CloneNode(true));
                            tcp.Append(tcbR, tcm);
                            tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                            var transaction = new List<string>();
                            transaction.Add("Exit/Withdrawal fees");
                            transaction.Add("Other transaction costs");
                            transaction.Add("Buy/Sell Costs");
                            transaction.Add("Managed fund transactions");
                            transaction.Add("Brokerage Fee");

                            var transactionDisplaySorted = transactionDisplay.OrderBy(d => transaction.IndexOf(d.Trim())).ToList();
                            foreach (String s in transactionDisplaySorted)
                            {
                                TableRow feeName = new TableRow();
                                TableCell fee = new TableCell();
                                fee.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                                fee.Append((TableCellProperties)tcpN.CloneNode(true));
                                fee.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(s))));
                                feeName.Append(fee);

                                foreach (CF existing in existingProducts)
                                {
                                    var feeDetails = existing.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    h.Append((TableCellProperties)tcp.CloneNode(true));
                                    h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                                    feeName.Append(h);
                                }
                                if (proposedProduct != null)
                                {
                                    var feeDetails = proposedProduct.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    h.Append((TableCellProperties)tcp.CloneNode(true));
                                    h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                                    feeName.Append(h);
                                }

                                table.Append(feeName);



                            }

                            Paragraph commentary1 = new Paragraph(new Run(new RunProperties(new Italic()), new Text("*The buy/sell spread is the full buy/sell spread on the recommended investment purchases. It doesnâ€™t include the sell spread for the recommended investment sales as this is typically already reflected in your current investment balance.")));
                            body.Append(commentary1);

                            //Paragraph commentary2 = new Paragraph(new Run(new RunProperties(), new Text("Please note, effective 1 October 2017, ASIC Regulatory Guide 97 (RG97) has come into effect. The aim of the legislation to which RG97 relates is to drive greater consistency in how financial product providers disclose their fees. For many products, some of these costs were previously included in the unit price, or disclosed as alternative fee types. Due to the magnitude of this industry wide change, at the time of production of this Statement of Advice, the new fee breakdown for your existing fund may not have been provided to our approved investment research platform. As such, there may be a fee variation between what has been disclosed above and the new fee disclosure breakdown in your Product Disclosure Statement. Based on ASICâ€™s own assessment, they have found the average increase across all reported superannuation data to be 0.24%. For clients who hold default super funds, the average increase was about 0.23%. They have identified some cases where the increase was more than 1.00%. Whilst fees are an important consideration, you should consider the totality of our recommendations and how they align to your objectives.")));
                            //body.Append(commentary2);
                        }


                    }

                }
            }

            //Joint
            if (jointproposedAssets != null && jointproposedAssets.Length > 0)
            {

                var feeDisplay = new List<String>();
                var transactionDisplay = new List<String>();
                var proposedProducts = new List<PF>();
                foreach (PF pp in jointproposedAssets)
                {
                    var current = currentAssests.Where(a => a.proposedId == pp.id);
                    if (current.Count() == 1 && (pp.productId == current.First().productId))
                    {
                        var prop = pp.data.Select(x => x.Apircode).ToArray();
                        var curr = current.First().data.Select(x => x.Apircode).ToArray();

                        var diff = false;
                        if (prop.Length == curr.Length)
                        {
                            foreach (var proposed in pp.data)
                            {
                                var isExist = current.First().data.Where(x => x.Apircode == proposed.Apircode).FirstOrDefault();
                                if (isExist != null)
                                {
                                    if (proposed.Value != isExist.Value)
                                    {
                                        diff = true;
                                    }
                                }
                            }

                        }

                        if (((prop.Length == curr.Length && prop.Intersect(curr).Count() == prop.Length) == false) || (diff == true))
                        {
                            proposedProducts.Add(pp);
                        }
                    }
                }

                if (proposedProducts.Any())
                {
                    Run linebreak = new Run(new Break());
                    Paragraph replacement = new Paragraph();
                    replacement.Append(new OpenXmlElement[] { (Run)linebreak.CloneNode(true) });
                    body.Append(replacement);

                    foreach (PF proposedProduct in proposedProducts)

                    {
                        var existingProducts = new List<CF>();
                        var alternativeProducts = new List<AlternativeFund>();
                        var alternative = alternativeAssets.Where(a => a.proposedId == proposedProduct.id);
                        alternativeProducts.AddRange(alternative);

                        var current = currentAssests.Where(a => a.proposedId == proposedProduct.id);
                        existingProducts.AddRange(current);


                        var isExisting = existingProducts.Where(z => z.owner != "Joint");
                        var isAlternate = alternativeProducts.Where(z => z.owner != "Joint");
                        bool notClient = false;
                        if (isExisting.Count() > 0 || isAlternate.Count() > 0)
                        {
                            notClient = true;
                        }

                        Paragraph s2 = body.AppendChild(new Paragraph(new Run(new RunProperties(new Bold(), new FontSize { Val = "24" }, new Color() { Val = "ED7D27" }), new Text("Comparison costs for Joint - " + proposedProduct.product))));

                        //New Table
                        if (proposedProduct != null)
                        {
                            Table table = body.AppendChild(new Table());
                            TableProperties tableProp = new TableProperties();
                            TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                            TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                            tableProp.Append(tableStyle, tableWidth);
                            table.AppendChild(tableProp);


                            ////Header
                            TableRow header = new TableRow();

                            TableCell h1 = new TableCell();

                            TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties hcp2 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                            ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                            ParagraphProperties hpp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                            Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                            hpp1.AppendChild((Justification)centerJustify.CloneNode(true));

                            TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                            Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                            TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                            hcp.Append(hcm1, hs1, hcb);
                            hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                            hcp2.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true));

                            h1.Append(hcp);

                            h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                            h1.Append(new Paragraph(new RunProperties(new Bold()), new Run(new Text(proposedProduct.product))));
                            header.Append(h1);

                         
                            if (proposedProduct != null)
                            {
                                var existing = existingProducts.Where(z => z.proposedId == proposedProduct.id);

                                TableCellProperties tableCellProperties = new TableCellProperties();
                                HorizontalMerge horizontalMerge = new HorizontalMerge()
                                {
                                    Val = MergedCellValues.Restart
                                };
                                tableCellProperties.Append(horizontalMerge);

                                TableCellProperties tableCellProperties1 = new TableCellProperties();
                                HorizontalMerge horizontalMerge1 = new HorizontalMerge()
                                {
                                    Val = MergedCellValues.Continue
                                };
                                tableCellProperties1.Append(horizontalMerge1);


                                foreach (CF ex in existing)
                                {
                                    foreach (ProductFeesDisplay pfd in ex.feeDisplay)
                                    {
                                        if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                                        {
                                            bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                            if (!isExist)
                                            {
                                                feeDisplay.Add(pfd.name.Trim());
                                            }
                                        }
                                    }
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                                    h.Append((TableCellProperties)hcp1.CloneNode(true));
                                    if (notClient)
                                    {
                                        var name = "";
                                        if (ex.owner == "Client")
                                        {
                                            name = clientDetails.ClientName;
                                        }
                                        else if (ex.owner == "Partner")
                                        {
                                            name = clientDetails.PartnerName;
                                        }
                                        else
                                        {
                                            name = "Joint";
                                        }

                                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing - " + ex.product + " - " + name))));

                                    }
                                    else
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing - " + ex.product))));
                                    }
                                    header.Append(h);
                                }
                            }
                            if (proposedProduct != null)
                            {
                                foreach (ProductFeesDisplay pfd in proposedProduct.feeDisplay)
                                {
                                    if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                                    {
                                        bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                        if (!isExist)
                                        {
                                            feeDisplay.Add(pfd.name.Trim());
                                        }
                                    }
                                }
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                                h.Append((TableCellProperties)hcp1.CloneNode(true));
                                if (notClient)
                                {
                                    var name = "";
                                    if (proposedProduct.owner == "Client")
                                    {
                                        name = clientDetails.ClientName;
                                    }
                                    else if (proposedProduct.owner == "Partner")
                                    {
                                        name = clientDetails.PartnerName;
                                    }
                                    else
                                    {
                                        name = "Joint";
                                    }
                                    h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed - " + name))));

                                }
                                else
                                {
                                    h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed "))));
                                }
                                header.Append(h);
                            }
                            if (proposedProduct != null)
                            {
                                var alt = alternativeProducts.Where(z => z.proposedId == proposedProduct.id);

                                TableCellProperties tableCellProperties = new TableCellProperties();
                                HorizontalMerge horizontalMerge = new HorizontalMerge()
                                {
                                    Val = MergedCellValues.Restart
                                };
                                tableCellProperties.Append(horizontalMerge);

                                TableCellProperties tableCellProperties1 = new TableCellProperties();
                                HorizontalMerge horizontalMerge1 = new HorizontalMerge()
                                {
                                    Val = MergedCellValues.Continue
                                };
                                tableCellProperties1.Append(horizontalMerge1);


                                foreach (AlternativeFund alternate in alt)
                                {
                                    foreach (ProductFeesDisplay pfd in alternate.feeDisplay)
                                    {
                                        if ((pfd.val != 0 || pfd.percentage != 0) && pfd.feeType.Trim() == "ongoing")
                                        {
                                            bool isExist = feeDisplay.Any(pfd.name.Trim().Contains);
                                            if (!isExist)
                                            {
                                                feeDisplay.Add(pfd.name.Trim());
                                            }
                                        }
                                    }
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                                    h.Append((TableCellProperties)hcp1.CloneNode(true));
                                    if (notClient)
                                    {
                                        var name = "";
                                        if (alternate.owner == "Client")
                                        {
                                            name = clientDetails.ClientName;
                                        }
                                        else if (alternate.owner == "Partner")
                                        {
                                            name = clientDetails.PartnerName;
                                        }
                                        else
                                        {
                                            name = "Joint";
                                        }
                                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternative - " + alternate.product + " - " + name))));

                                    }
                                    else
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Alternative - " + alternate.product))));
                                    }
                                    header.Append(h);
                                }
                            }

                            table.Append(header);



                            //Body

                            TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                            TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                            TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                            TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                            TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                            ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                            ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                            pp.AppendChild((Justification)centerJustify.CloneNode(true));
                            tcp.Append(tcbR, tcm);
                            tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                            //Investment Portfolio

                            //TableRow InvestmentPortfolio = new TableRow();
                            //TableCell dCell0 = new TableCell();
                            //dCell0.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            //dCell0.Append((TableCellProperties)tcpN.CloneNode(true));
                            //dCell0.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Investment"))));
                            //InvestmentPortfolio.Append(dCell0);

                            //foreach (CF existing in existingProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    if (existing.data.Length == 1)
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text(existing.data[0].FundName))));

                            //    }
                            //    else
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text("Refer to Recommended portfolio table above"))));

                            //    }
                            //    InvestmentPortfolio.Append(h);
                            //}
                            //if (proposedProduct != null)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    if (proposedProduct.data.Length == 1)
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text(proposedProduct.data[0].FundName))));

                            //    }
                            //    else
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text("Refer to Recommended portfolio table above"))));

                            //    }
                            //    InvestmentPortfolio.Append(h);
                            //}
                            //foreach (AlternativeFund alternate in alternativeProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    if (alternate.data.Length == 1)
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text(alternate.data[0].FundName))));

                            //    }
                            //    else
                            //    {
                            //        h.Append(new Paragraph(new Run(new RunProperties(), new Text(""))));

                            //    }
                            //    InvestmentPortfolio.Append(h);
                            //}

                            //table.Append(InvestmentPortfolio);



                            TableRow AccountBalance = new TableRow();
                            TableCell dCell = new TableCell();
                            dCell.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            dCell.Append((TableCellProperties)tcpN.CloneNode(true));
                            dCell.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Amount"))));
                            AccountBalance.Append(dCell);

                            foreach (CF existing in existingProducts)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", existing.value)))));
                                AccountBalance.Append(h);
                            }
                            if (proposedProduct != null)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", proposedProduct.value)))));
                                AccountBalance.Append(h);
                            }
                            foreach (AlternativeFund alternate in alternativeProducts)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(), new Text("$" + String.Format("{0:n0}", alternate.value)))));
                                AccountBalance.Append(h);
                            }

                            table.Append(AccountBalance);



                            //Empty
                            //TableRow ProductFees = new TableRow();
                            //TableCell dCell8 = new TableCell();
                            //dCell8.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            //dCell8.Append((TableCellProperties)tcpN.CloneNode(true));
                            //dCell8.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Product Fees"))));
                            //ProductFees.Append(dCell8);

                            //foreach (CF existing in existingProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcpN.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(""))));
                            //    ProductFees.Append(h);
                            //}
                            //if (proposedProduct != null)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcpN.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(""))));
                            //    ProductFees.Append(h);
                            //}
                            //foreach (AlternativeFund alternate in alternativeProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcpN.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(""))));
                            //    ProductFees.Append(h);
                            //}

                            //table.Append(ProductFees);


                            foreach (String s in feeDisplay)
                            {
                                TableRow feeName = new TableRow();
                                TableCell fee = new TableCell();
                                fee.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                                fee.Append((TableCellProperties)tcpN.CloneNode(true));
                                fee.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(s))));
                                feeName.Append(fee);

                                foreach (CF existing in existingProducts)
                                {
                                    var feeDetails = existing.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    h.Append((TableCellProperties)tcp.CloneNode(true));
                                    h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    if (feeDetails.percentage == 0 && feeDetails.val == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                                    }
                                    else if (feeDetails.percentage == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                                    }
                                    else if (feeDetails.percentage != 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                                    }
                                    feeName.Append(h);
                                }
                                if (proposedProduct != null)
                                {
                                    var feeDetails = proposedProduct.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    h.Append((TableCellProperties)tcp.CloneNode(true));
                                    h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    if (feeDetails.percentage == 0 && feeDetails.val == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                                    }
                                    else if (feeDetails.percentage == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                                    }
                                    else if (feeDetails.percentage != 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                                    }
                                    feeName.Append(h);
                                }
                                foreach (AlternativeFund alternate in alternativeProducts)
                                {
                                    var feeDetails = alternate.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    h.Append((TableCellProperties)tcp.CloneNode(true));
                                    h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    if (feeDetails.percentage == 0 && feeDetails.val == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(feeDetails != null ? String.Format("{0:n}", feeDetails.percentage) + "%" : "0.00%"))));
                                    }
                                    else if (feeDetails.percentage == 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text("Fixed Fee"))));

                                    }
                                    else if (feeDetails.percentage != 0)
                                    {
                                        h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", feeDetails.percentage) + "%"))));

                                    }
                                    feeName.Append(h);
                                }




                                table.Append(feeName);



                            }



                            //Total
                            TableRow NetOngoingCosts = new TableRow();
                            TableCell dCell2 = new TableCell();
                            dCell2.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            dCell2.Append((TableCellProperties)tcpN.CloneNode(true));
                            dCell2.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total Portfolio Fees"))));
                            NetOngoingCosts.Append(dCell2);

                            foreach (CF existing in existingProducts)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", existing.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val))))));
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", (Math.Round(existing.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val)) / existing.value) * 100) + "%"))));

                                NetOngoingCosts.Append(h);
                            }
                            if (proposedProduct != null)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", proposedProduct.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val))))));
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", (Math.Round(proposedProduct.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val)) / proposedProduct.value) * 100) + "%"))));

                                NetOngoingCosts.Append(h);
                            }
                            foreach (AlternativeFund alternate in alternativeProducts)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("$" + String.Format("{0:n0}", alternate.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val))))));
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Color() { Val = "808080" }), new Text(String.Format("{0:n}", (Math.Round(alternate.feeDisplay.Where(x => x.feeType == "ongoing").Sum(item => item.val)) / alternate.value) * 100) + "%"))));

                                NetOngoingCosts.Append(h);
                            }

                            table.Append(NetOngoingCosts);

                            //Percentage

                            //TableRow Percentage = new TableRow();
                            //TableCell dCell1 = new TableCell();
                            //dCell1.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            //dCell1.Append((TableCellProperties)tcpN.CloneNode(true));
                            //dCell1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Total Portfolio Fees (%)"))));
                            //Percentage.Append(dCell1);

                            //foreach (CF existing in existingProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(String.Format("{0:n}", (Math.Round(existing.feeDisplay.Sum(item => item.val)) / existing.value) * 100) + "%"))));
                            //    Percentage.Append(h);
                            //}
                            //if (proposedProduct != null)
                            //{

                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(String.Format("{0:n}", (Math.Round(proposedProduct.feeDisplay.Sum(item => item.val)) / proposedProduct.value) * 100) + "%"))));
                            //    Percentage.Append(h);
                            //}
                            //foreach (AlternativeFund alternate in alternativeProducts)
                            //{
                            //    TableCell h = new TableCell();
                            //    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                            //    h.Append((TableCellProperties)tcp.CloneNode(true));
                            //    h.Append(new Paragraph(new Run(new RunProperties(), new Text(String.Format("{0:n}", (Math.Round(alternate.feeDisplay.Sum(item => item.val)) / alternate.value) * 100) + "%"))));
                            //    Percentage.Append(h);
                            //}

                            //table.Append(Percentage);




                            //Difference
                            //Total
                            TableRow Difference = new TableRow();
                            TableCell dCell3 = new TableCell();
                            dCell3.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                            dCell3.Append((TableCellProperties)tcpN.CloneNode(true));
                            dCell3.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Difference in costs"))));
                            Difference.Append(dCell3);

                            foreach (CF existing in existingProducts)
                            {
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(""))));
                                Difference.Append(h);
                            }
                            if (proposedProduct != null)
                            {

                                decimal sum = 0;
                                IEnumerable<RopcurrentProducts> list1 = this.mapper.Map<IEnumerable<RopcurrentProducts>>(from s in this.context.RopcurrentProducts.AsEnumerable() where s.ProposedProduct == proposedProduct.id select s).ToList();
                                foreach (RopcurrentProducts cp in list1)
                                {
                                    var c = currentAssests.Where(a => a.id == cp.RecId).FirstOrDefault();
                                    sum += c.feeDisplay.Sum(item => item.val);
                                }

                                var display = "";
                                var value = Math.Round(proposedProduct.feeDisplay.Sum(item => item.val)) - Math.Round(sum);
                                if (value > 0)
                                {
                                    display = " Additional $" + String.Format("{0:n0}", Math.Abs(value));
                                }
                                else if (value < 0)
                                {
                                    display = " Less $" + String.Format("{0:n0}", Math.Abs(value));
                                }
                                else
                                {
                                    display = "$0";
                                }

                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(display))));
                                Difference.Append(h);
                            }
                            foreach (AlternativeFund alternate in alternativeProducts)
                            {
                                decimal sum = 0;
                                IEnumerable<RopcurrentProducts> list2 = this.mapper.Map<IEnumerable<RopcurrentProducts>>(from s in this.context.RopcurrentProducts.AsEnumerable() where s.ProposedProduct == alternate.proposedId select s).ToList();
                                foreach (RopcurrentProducts cp in list2)
                                {
                                    var c = currentAssests.Where(a => a.id == cp.RecId).FirstOrDefault();
                                    sum += c.feeDisplay.Sum(item => item.val);
                                }

                                var display = "";
                                var value = Math.Round(alternate.feeDisplay.Sum(item => item.val)) - Math.Round(sum);
                                if (value > 0)
                                {
                                    display = " Additional $" + String.Format("{0:n0}", Math.Abs(value));
                                }
                                else if (value < 0)
                                {
                                    display = " Less $" + String.Format("{0:n0}", Math.Abs(value));
                                }
                                else
                                {
                                    display = "$0";
                                }

                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                h.Append((TableCellProperties)tcp.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(display))));
                                Difference.Append(h);
                            }

                            table.Append(Difference);
                        }

                        if (proposedProduct.feeDisplay.Length != 0)
                        {
                            Run linebreak0 = new Run(new Break());
                            Paragraph transactionCost = new Paragraph();
                            transactionCost.Append(new OpenXmlElement[] { (Run)linebreak0.CloneNode(true), new Run(new RunProperties(new Bold(), new Color() { Val = "ED7D27" }), new Text("Initial Product costs ")) });
                            body.Append(transactionCost);

                            Paragraph commentary = new Paragraph(new Run(new RunProperties(), new Text("The following table shows the initial product costs that may apply to replace your existing products with the recommended products. All costs are estimates which may vary at the time of implementation.")));
                            body.Append(commentary);

                            //New Table

                            Table table = body.AppendChild(new Table());
                            TableProperties tableProp = new TableProperties();
                            TableStyle tableStyle = new TableStyle() { Val = "TableGrid" };

                            TableWidth tableWidth = new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct };

                            tableProp.Append(tableStyle, tableWidth);
                            table.AppendChild(tableProp);


                            ////Header
                            TableRow header = new TableRow();
                            TableCell h1 = new TableCell();

                            TableCellProperties hcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties hcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                            ParagraphProperties hpp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                            ParagraphProperties hpp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                            Justification centerJustify = new Justification() { Val = JustificationValues.Center };
                            hpp1.AppendChild((Justification)centerJustify.CloneNode(true));

                            TableCellBorders hcb = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 20, Color = "ED7D27" } };

                            Shading hs1 = new Shading() { Color = "auto", Fill = "393939", Val = ShadingPatternValues.Clear };
                            TableCellMargin hcm1 = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                            hcp.Append(hcm1, hs1, hcb);
                            hcp1.Append((TableCellMargin)hcm1.CloneNode(true), (Shading)hs1.CloneNode(true), (TableCellBorders)hcb.CloneNode(true));
                            h1.Append(hcp);

                            h1.AppendChild((ParagraphProperties)hpp.CloneNode(true));
                            h1.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Plan Costs"))));
                            header.Append(h1);

                            foreach (CF existing in existingProducts)
                            {
                                foreach (ProductFeesDisplay pfd in existing.feeDisplay)
                                {
                                    if (pfd.feeType.Trim() == "transactional")
                                    {
                                        bool isExist = transactionDisplay.Any(pfd.name.Trim().Contains);
                                        if (!isExist)
                                        {
                                            transactionDisplay.Add(pfd.name.Trim());
                                        }
                                    }
                                }

                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                                h.Append((TableCellProperties)hcp1.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Existing " + existing.product))));
                                header.Append(h);
                            }
                            if (proposedProduct != null)
                            {
                                foreach (ProductFeesDisplay pfd in proposedProduct.feeDisplay)
                                {
                                    if (pfd.feeType.Trim() == "transactional")
                                    {
                                        bool isExist = transactionDisplay.Any(pfd.name.Trim().Contains);
                                        if (!isExist)
                                        {
                                            transactionDisplay.Add(pfd.name.Trim());
                                        }
                                    }
                                }
                                TableCell h = new TableCell();
                                h.AppendChild((ParagraphProperties)hpp1.CloneNode(true));
                                h.Append((TableCellProperties)hcp1.CloneNode(true));
                                h.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text("Proposed " + proposedProduct.product))));
                                header.Append(h);
                            }

                            table.Append(header);
                            TableCellProperties tcp1 = new TableCellProperties(new TableCellWidth { Width = "2390", Type = TableWidthUnitValues.Auto }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });
                            TableCellProperties tcpN = new TableCellProperties(new TableCellWidth { Width = "2000", Type = TableWidthUnitValues.Pct }, new TableCellVerticalAlignment { Val = TableVerticalAlignmentValues.Center });

                            TableCellBorders tcbL = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, RightBorder = new RightBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                            TableCellBorders tcbR = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, LeftBorder = new LeftBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };
                            TableCellBorders tcbN = new TableCellBorders() { BottomBorder = new BottomBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" }, TopBorder = new TopBorder() { Val = BorderValues.Single, Size = 1, Color = "D3D3D3" } };

                            TableCellMargin tcm = new TableCellMargin() { RightMargin = new RightMargin() { Width = "50", Type = TableWidthUnitValues.Dxa }, LeftMargin = new LeftMargin() { Width = "50", Type = TableWidthUnitValues.Dxa } };

                            ParagraphProperties pp = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });
                            ParagraphProperties pp1 = new ParagraphProperties(new ParagraphStyleId() { Val = "No Spacing" }, new SpacingBetweenLines() { After = "5" });

                            pp.AppendChild((Justification)centerJustify.CloneNode(true));
                            tcp.Append(tcbR, tcm);
                            tcpN.Append((TableCellBorders)tcbN.CloneNode(true), (TableCellMargin)tcm.CloneNode(true));

                            var transaction = new List<string>();
                            transaction.Add("Exit/Withdrawal fees");
                            transaction.Add("Other transaction costs");
                            transaction.Add("Buy/Sell Costs");
                            transaction.Add("Managed fund transactions");
                            transaction.Add("Brokerage Fee");

                            var transactionDisplaySorted = transactionDisplay.OrderBy(d => transaction.IndexOf(d.Trim())).ToList();
                            foreach (String s in transactionDisplaySorted)
                            {
                                TableRow feeName = new TableRow();
                                TableCell fee = new TableCell();
                                fee.AppendChild((ParagraphProperties)pp1.CloneNode(true));
                                fee.Append((TableCellProperties)tcpN.CloneNode(true));
                                fee.Append(new Paragraph(new Run(new RunProperties(new Bold()), new Text(s))));
                                feeName.Append(fee);

                                foreach (CF existing in existingProducts)
                                {
                                    var feeDetails = existing.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    h.Append((TableCellProperties)tcp.CloneNode(true));
                                    h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                                    feeName.Append(h);
                                }
                                if (proposedProduct != null)
                                {
                                    var feeDetails = proposedProduct.feeDisplay.Where(z => z.name.Trim() == s).FirstOrDefault();
                                    TableCell h = new TableCell();
                                    h.AppendChild((ParagraphProperties)pp.CloneNode(true));
                                    h.Append((TableCellProperties)tcp.CloneNode(true));
                                    h.Append(new Paragraph(new Run(new RunProperties(), new Text(feeDetails != null ? "$" + String.Format("{0:n0}", feeDetails.val) : "0"))));
                                    feeName.Append(h);
                                }

                                table.Append(feeName);



                            }

                            Paragraph commentary1 = new Paragraph(new Run(new RunProperties(new Italic()), new Text("*The buy/sell spread is the full buy/sell spread on the recommended investment purchases. It doesnâ€™t include the sell spread for the recommended investment sales as this is typically already reflected in your current investment balance.")));
                            body.Append(commentary1);

                            //Paragraph commentary2 = new Paragraph(new Run(new RunProperties(), new Text("Please note, effective 1 October 2017, ASIC Regulatory Guide 97 (RG97) has come into effect. The aim of the legislation to which RG97 relates is to drive greater consistency in how financial product providers disclose their fees. For many products, some of these costs were previously included in the unit price, or disclosed as alternative fee types. Due to the magnitude of this industry wide change, at the time of production of this Statement of Advice, the new fee breakdown for your existing fund may not have been provided to our approved investment research platform. As such, there may be a fee variation between what has been disclosed above and the new fee disclosure breakdown in your Product Disclosure Statement. Based on ASICâ€™s own assessment, they have found the average increase across all reported superannuation data to be 0.24%. For clients who hold default super funds, the average increase was about 0.23%. They have identified some cases where the increase was more than 1.00%. Whilst fees are an important consideration, you should consider the totality of our recommendations and how they align to your objectives.")));
                            //body.Append(commentary2);
                        }


                    }

                }
            }


        }
        public AssetDetails findVal(AssetDetails[] assetDetails , string search)
        {
            var searchItem = assetDetails.Where(val => val.name == search).FirstOrDefault();
            return searchItem;
        }
    }
}
